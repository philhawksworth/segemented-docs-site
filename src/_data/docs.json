{
  "version": 1,
  "nodes": [
    {
      "name": "",
      "location": {
        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
        "line": 1,
        "col": 0,
        "byteIndex": 0
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The global namespace where Deno specific, non-standard APIs are located.",
        "tags": [
          {
            "kind": "module"
          }
        ]
      },
      "kind": "moduleDoc"
    },
    {
      "name": "Deno",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
        "line": 8,
        "col": 0,
        "byteIndex": 100
      },
      "declarationKind": "declare",
      "jsDoc": {
        "doc": "The global namespace where Deno specific, non-standard APIs are located.",
        "tags": [
          {
            "kind": "module"
          }
        ]
      },
      "kind": "namespace",
      "namespaceDef": {
        "elements": [
          {
            "name": "errors",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 30,
              "col": 2,
              "byteIndex": 712
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A set of error constructors that are raised by Deno APIs.\n\nCan be used to provide more specific handling of failures within code\nwhich is using Deno APIs. For example, handling attempting to open a file\nwhich does not exist:\n\n```ts\ntry {\n  const file = await Deno.open(\"./some/file.txt\");\n} catch (error) {\n  if (error instanceof Deno.errors.NotFound) {\n    console.error(\"the file was not found\");\n  } else {\n    // otherwise re-throw\n    throw error;\n  }\n}\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Errors"
                }
              ]
            },
            "kind": "namespace",
            "namespaceDef": {
              "elements": [
                {
                  "name": "NotFound",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 36,
                    "col": 4,
                    "byteIndex": 881
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system indicates that the file\nwas not found.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "PermissionDenied",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 47,
                    "col": 4,
                    "byteIndex": 1363
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system indicates the current user\nwhich the Deno process is running under does not have the appropriate\npermissions to a file or resource.\n\nBefore Deno 2.0, this error was raised when the user _did not_ provide\nrequired `--allow-*` flag. As of Deno 2.0, that case is now handled by\nthe {@link NotCapable} error.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "ConnectionRefused",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 53,
                    "col": 4,
                    "byteIndex": 1566
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system reports that a connection to\na resource is refused.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "ConnectionReset",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 60,
                    "col": 4,
                    "byteIndex": 1898
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system reports that a connection has\nbeen reset. With network servers, it can be a _normal_ occurrence where a\nclient will abort a connection instead of properly shutting it down.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "ConnectionAborted",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 66,
                    "col": 4,
                    "byteIndex": 2081
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system reports an `ECONNABORTED`\nerror.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "NotConnected",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 71,
                    "col": 4,
                    "byteIndex": 2255
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system reports an `ENOTCONN` error.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "AddrInUse",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 77,
                    "col": 4,
                    "byteIndex": 2459
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when attempting to open a server listener on an address and port\nthat already has a listener.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "AddrNotAvailable",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 83,
                    "col": 4,
                    "byteIndex": 2637
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system reports an `EADDRNOTAVAIL`\nerror.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "BrokenPipe",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 91,
                    "col": 4,
                    "byteIndex": 2999
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when trying to write to a resource and a broken pipe error occurs.\nThis can happen when trying to write directly to `stdout` or `stderr`\nand the operating system is unable to pipe the output for a reason\nexternal to the Deno runtime.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "AlreadyExists",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 97,
                    "col": 4,
                    "byteIndex": 3174
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when trying to create a resource, like a file, that already\nexits.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "InvalidData",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 103,
                    "col": 4,
                    "byteIndex": 3370
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when an operation to returns data that is invalid for the\noperation being performed.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "TimedOut",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 109,
                    "col": 4,
                    "byteIndex": 3575
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system reports that an I/O operation\nhas timed out (`ETIMEDOUT`).\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "Interrupted",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 116,
                    "col": 4,
                    "byteIndex": 3882
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system reports an `EINTR` error. In\nmany cases, this underlying IO error will be handled internally within\nDeno, or result in an @{link BadResource} error instead.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "WouldBlock",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 122,
                    "col": 4,
                    "byteIndex": 4108
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying operating system would need to block to\ncomplete but an asynchronous (non-blocking) API is used.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "WriteZero",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 128,
                    "col": 4,
                    "byteIndex": 4293
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when expecting to write to a IO buffer resulted in zero bytes\nbeing written.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "UnexpectedEof",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 134,
                    "col": 4,
                    "byteIndex": 4489
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when attempting to read bytes from a resource, but the EOF was\nunexpectedly encountered.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "BadResource",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 140,
                    "col": 4,
                    "byteIndex": 4687
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "The underlying IO resource is invalid or closed, and so the operation\ncould not be performed.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "Http",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 146,
                    "col": 4,
                    "byteIndex": 4895
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised in situations where when attempting to load a dynamic import,\ntoo many redirects were encountered.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "Busy",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 152,
                    "col": 4,
                    "byteIndex": 5103
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying IO resource is not available because it is\nbeing awaited on in another block of code.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "NotSupported",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 158,
                    "col": 4,
                    "byteIndex": 5298
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when the underlying Deno API is asked to perform a function that\nis not currently supported.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "FilesystemLoop",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 164,
                    "col": 4,
                    "byteIndex": 5483
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when too many symbolic links were encountered when resolving the\nfilename.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "IsADirectory",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 169,
                    "col": 4,
                    "byteIndex": 5641
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when trying to open, create or write to a directory.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "NetworkUnreachable",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 175,
                    "col": 4,
                    "byteIndex": 5824
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when performing a socket operation but the remote host is\nnot reachable.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "NotADirectory",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 181,
                    "col": 4,
                    "byteIndex": 6039
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when trying to perform an operation on a path that is not a\ndirectory, when directory is required.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                },
                {
                  "name": "NotCapable",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 191,
                    "col": 4,
                    "byteIndex": 6370
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Raised when trying to perform an operation while the relevant Deno\npermission (like `--allow-read`) has not been granted.\n\nBefore Deno 2.0, this condition was covered by the {@link PermissionDenied}\nerror.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Errors"
                      }
                    ]
                  },
                  "kind": "class",
                  "classDef": {
                    "isAbstract": false,
                    "constructors": [],
                    "properties": [],
                    "indexSignatures": [],
                    "methods": [],
                    "extends": "Error",
                    "implements": [],
                    "typeParams": [],
                    "superTypeParams": []
                  }
                }
              ]
            }
          },
          {
            "name": "pid",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 204,
              "col": 15,
              "byteIndex": 6620
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The current process ID of this instance of the Deno CLI.\n\n```ts\nconsole.log(Deno.pid);\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "kind": "const"
            }
          },
          {
            "name": "ppid",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 215,
              "col": 15,
              "byteIndex": 6815
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The process ID of parent process of this instance of the Deno CLI.\n\n```ts\nconsole.log(Deno.ppid);\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "kind": "const"
            }
          },
          {
            "name": "MemoryUsage",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 218,
              "col": 2,
              "byteIndex": 6859
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "rss",
                  "jsDoc": {
                    "doc": "The number of bytes of the current Deno's process resident set size,\nwhich is the amount of memory occupied in main memory (RAM)."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 221,
                    "col": 4,
                    "byteIndex": 7042
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "heapTotal",
                  "jsDoc": {
                    "doc": "The total size of the heap for V8, in bytes."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 223,
                    "col": 4,
                    "byteIndex": 7115
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "heapUsed",
                  "jsDoc": {
                    "doc": "The amount of the heap used for V8, in bytes."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 225,
                    "col": 4,
                    "byteIndex": 7195
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "external",
                  "jsDoc": {
                    "doc": "Memory, in bytes, associated with JavaScript objects outside of the\nJavaScript isolate."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 228,
                    "col": 4,
                    "byteIndex": 7323
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "memoryUsage",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 237,
              "col": 2,
              "byteIndex": 7504
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returns an object describing the memory usage of the Deno process and the\nV8 subsystem measured in bytes.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "MemoryUsage",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "MemoryUsage"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "hostname",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 251,
              "col": 2,
              "byteIndex": 7786
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Get the `hostname` of the machine the Deno process is running on.\n\n```ts\nconsole.log(Deno.hostname());\n```\n\nRequires `allow-sys` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-sys"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "loadavg",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 271,
              "col": 2,
              "byteIndex": 8513
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returns an array containing the 1, 5, and 15 minute load averages. The\nload average is a measure of CPU and IO utilization of the last one, five,\nand 15 minute periods expressed as a fractional number.  Zero means there\nis no load. On Windows, the three values are always the same and represent\nthe current load, not the 1, 5 and 15 minute load averages.\n\n```ts\nconsole.log(Deno.loadavg());  // e.g. [ 0.71, 0.44, 0.44 ]\n```\n\nRequires `allow-sys` permission.\n\nOn Windows there is no API available to retrieve this information and this method returns `[ 0, 0, 0 ]`.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-sys"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "NetworkInterfaceInfo",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 279,
              "col": 2,
              "byteIndex": 8703
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The information for a network interface returned from a call to\n{@linkcode Deno.networkInterfaces}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "jsDoc": {
                    "doc": "The network interface name."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 281,
                    "col": 4,
                    "byteIndex": 8786
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "family",
                  "jsDoc": {
                    "doc": "The IP protocol version."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 283,
                    "col": 4,
                    "byteIndex": 8840
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "IPv4",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "IPv4"
                        }
                      },
                      {
                        "repr": "IPv6",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "IPv6"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "address",
                  "jsDoc": {
                    "doc": "The IP address bound to the interface."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 285,
                    "col": 4,
                    "byteIndex": 8919
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "netmask",
                  "jsDoc": {
                    "doc": "The netmask applied to the interface."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 287,
                    "col": 4,
                    "byteIndex": 8989
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "scopeid",
                  "jsDoc": {
                    "doc": "The IPv6 scope id or `null`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 289,
                    "col": 4,
                    "byteIndex": 9050
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "cidr",
                  "jsDoc": {
                    "doc": "The CIDR range."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 291,
                    "col": 4,
                    "byteIndex": 9105
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "mac",
                  "jsDoc": {
                    "doc": "The MAC address."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 293,
                    "col": 4,
                    "byteIndex": 9151
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "networkInterfaces",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 308,
              "col": 2,
              "byteIndex": 9404
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returns an array of the network interface information.\n\n```ts\nconsole.log(Deno.networkInterfaces());\n```\n\nRequires `allow-sys` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-sys"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "NetworkInterfaceInfo",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "NetworkInterfaceInfo"
                  }
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "systemMemoryInfo",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 325,
              "col": 2,
              "byteIndex": 9844
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Displays the total amount of free and used physical and swap memory in the\nsystem, as well as the buffers and caches used by the kernel.\n\nThis is similar to the `free` command in Linux\n\n```ts\nconsole.log(Deno.systemMemoryInfo());\n```\n\nRequires `allow-sys` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-sys"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "SystemMemoryInfo",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SystemMemoryInfo"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "SystemMemoryInfo",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 332,
              "col": 2,
              "byteIndex": 10017
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Information returned from a call to {@linkcode Deno.systemMemoryInfo}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "total",
                  "jsDoc": {
                    "doc": "Total installed memory in bytes."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 334,
                    "col": 4,
                    "byteIndex": 10101
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "free",
                  "jsDoc": {
                    "doc": "Unused memory in bytes."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 336,
                    "col": 4,
                    "byteIndex": 10155
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "available",
                  "jsDoc": {
                    "doc": "Estimation of how much memory, in bytes, is available for starting new\napplications, without swapping. Unlike the data provided by the cache or\nfree fields, this field takes into account page cache and also that not\nall reclaimable memory will be reclaimed due to items being in use."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 342,
                    "col": 4,
                    "byteIndex": 10494
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "buffers",
                  "jsDoc": {
                    "doc": "Memory used by kernel buffers."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 344,
                    "col": 4,
                    "byteIndex": 10559
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "cached",
                  "jsDoc": {
                    "doc": "Memory used by the page cache and slabs."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 346,
                    "col": 4,
                    "byteIndex": 10632
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "swapTotal",
                  "jsDoc": {
                    "doc": "Total swap memory."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 348,
                    "col": 4,
                    "byteIndex": 10682
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "swapFree",
                  "jsDoc": {
                    "doc": "Unused swap memory."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 350,
                    "col": 4,
                    "byteIndex": 10736
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "noColor",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 363,
              "col": 15,
              "byteIndex": 11109
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Reflects the `NO_COLOR` environment variable at program start.\n\nWhen the value is `true`, the Deno CLI will attempt to not send color codes\nto `stderr` or `stdout` and other command line programs should also attempt\nto respect this value.\n\nSee: https://no-color.org/\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              "kind": "const"
            }
          },
          {
            "name": "osRelease",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 379,
              "col": 2,
              "byteIndex": 11493
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returns the release version of the Operating System.\n\n```ts\nconsole.log(Deno.osRelease());\n```\n\nRequires `allow-sys` permission.\nUnder consideration to possibly move to Deno.build or Deno.versions and if\nit should depend sys-info, which may not be desirable.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-sys"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "osUptime",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 393,
              "col": 2,
              "byteIndex": 11760
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returns the Operating System uptime in number of seconds.\n\n```ts\nconsole.log(Deno.osUptime());\n```\n\nRequires `allow-sys` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-sys"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "PermissionOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 404,
              "col": 2,
              "byteIndex": 12187
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which define the permissions within a test or worker context.\n\n`\"inherit\"` ensures that all permissions of the parent process will be\napplied to the test context. `\"none\"` ensures the test context has no\npermissions. A `PermissionOptionsObject` provides a more specific\nset of permissions to the test context.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "inherit",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "inherit"
                    }
                  },
                  {
                    "repr": "none",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "none"
                    }
                  },
                  {
                    "repr": "PermissionOptionsObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PermissionOptionsObject"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "PermissionOptionsObject",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 411,
              "col": 2,
              "byteIndex": 12429
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A set of options which can define the permissions within a test or worker\ncontext at a highly specific level.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "env",
                  "jsDoc": {
                    "doc": "Specifies if the `env` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `env` permission will be inherited.\nIf set to `true`, the global `env` permission will be requested.\nIf set to `false`, the global `env` permission will be revoked.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 419,
                    "col": 4,
                    "byteIndex": 12810
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "sys",
                  "jsDoc": {
                    "doc": "Specifies if the `sys` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `sys` permission will be inherited.\nIf set to `true`, the global `sys` permission will be requested.\nIf set to `false`, the global `sys` permission will be revoked.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 428,
                    "col": 4,
                    "byteIndex": 13187
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "net",
                  "jsDoc": {
                    "doc": "Specifies if the `net` permission should be requested or revoked.\nif set to `\"inherit\"`, the current `net` permission will be inherited.\nif set to `true`, the global `net` permission will be requested.\nif set to `false`, the global `net` permission will be revoked.\nif set to `string[]`, the `net` permission will be requested with the\nspecified host strings with the format `\"<host>[:<port>]`.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false",
                        "doc": "Examples:\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test({\nname: \"inherit\",\npermissions: {\nnet: \"inherit\",\n},\nasync fn() {\nconst status = await Deno.permissions.query({ name: \"net\" })\nassertEquals(status.state, \"granted\");\n},\n});\n```\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test({\nname: \"true\",\npermissions: {\nnet: true,\n},\nasync fn() {\nconst status = await Deno.permissions.query({ name: \"net\" });\nassertEquals(status.state, \"granted\");\n},\n});\n```\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test({\nname: \"false\",\npermissions: {\nnet: false,\n},\nasync fn() {\nconst status = await Deno.permissions.query({ name: \"net\" });\nassertEquals(status.state, \"denied\");\n},\n});\n```\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test({\nname: \"localhost:8080\",\npermissions: {\nnet: [\"localhost:8080\"],\n},\nasync fn() {\nconst status = await Deno.permissions.query({ name: \"net\", host: \"localhost:8080\" });\nassertEquals(status.state, \"granted\");\n},\n});\n```"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 501,
                    "col": 4,
                    "byteIndex": 15231
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "ffi",
                  "jsDoc": {
                    "doc": "Specifies if the `ffi` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `ffi` permission will be inherited.\nIf set to `true`, the global `ffi` permission will be requested.\nIf set to `false`, the global `ffi` permission will be revoked.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 510,
                    "col": 4,
                    "byteIndex": 15608
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "URL",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "URL"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Array"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "read",
                  "jsDoc": {
                    "doc": "Specifies if the `read` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `read` permission will be inherited.\nIf set to `true`, the global `read` permission will be requested.\nIf set to `false`, the global `read` permission will be revoked.\nIf set to `Array<string | URL>`, the `read` permission will be requested with the\nspecified file paths.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 521,
                    "col": 4,
                    "byteIndex": 16118
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "URL",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "URL"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Array"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "run",
                  "jsDoc": {
                    "doc": "Specifies if the `run` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `run` permission will be inherited.\nIf set to `true`, the global `run` permission will be requested.\nIf set to `false`, the global `run` permission will be revoked.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 530,
                    "col": 4,
                    "byteIndex": 16507
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "URL",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "URL"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Array"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "write",
                  "jsDoc": {
                    "doc": "Specifies if the `write` permission should be requested or revoked.\nIf set to `\"inherit\"`, the current `write` permission will be inherited.\nIf set to `true`, the global `write` permission will be requested.\nIf set to `false`, the global `write` permission will be revoked.\nIf set to `Array<string | URL>`, the `write` permission will be requested with the\nspecified file paths.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 541,
                    "col": 4,
                    "byteIndex": 17022
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "URL",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "URL"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Array"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "TestContext",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 550,
              "col": 2,
              "byteIndex": 17306
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Context that is passed to a testing function, which can be used to either\ngain information about the current test, or register additional test\nsteps within the current test.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [
                {
                  "name": "step",
                  "jsDoc": {
                    "doc": "Run a sub step of the parent test or step. Returns a promise\nthat resolves to a boolean signifying if the step completed successfully.\n\nThe returned promise never rejects unless the arguments are invalid.\n\nIf the test was ignored the promise returns `false`.\n\n```ts\nDeno.test({\n  name: \"a parent test\",\n  async fn(t) {\n    console.log(\"before the step\");\n    await t.step({\n      name: \"step 1\",\n      fn(t) {\n        console.log(\"current step:\", t.name);\n      }\n    });\n    console.log(\"after the step\");\n  }\n});\n```"
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 582,
                    "col": 4,
                    "byteIndex": 18273
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "definition",
                      "optional": false,
                      "tsType": {
                        "repr": "TestStepDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TestStepDefinition"
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "step",
                  "jsDoc": {
                    "doc": "Run a sub step of the parent test or step. Returns a promise\nthat resolves to a boolean signifying if the step completed successfully.\n\nThe returned promise never rejects unless the arguments are invalid.\n\nIf the test was ignored the promise returns `false`.\n\n```ts\nDeno.test(\n  \"a parent test\",\n  async (t) => {\n    console.log(\"before the step\");\n    await t.step(\n      \"step 1\",\n      (t) => {\n        console.log(\"current step:\", t.name);\n      }\n    );\n    console.log(\"after the step\");\n  }\n);\n```"
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 607,
                    "col": 4,
                    "byteIndex": 18999
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "name",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "step",
                  "jsDoc": {
                    "doc": "Run a sub step of the parent test or step. Returns a promise\nthat resolves to a boolean signifying if the step completed successfully.\n\nThe returned promise never rejects unless the arguments are invalid.\n\nIf the test was ignored the promise returns `false`.\n\n```ts\nDeno.test(async function aParentTest(t) {\n  console.log(\"before the step\");\n  await t.step(function step1(t) {\n    console.log(\"current step:\", t.name);\n  });\n  console.log(\"after the step\");\n});\n```"
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 629,
                    "col": 4,
                    "byteIndex": 19691
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                }
              ],
              "properties": [
                {
                  "name": "name",
                  "jsDoc": {
                    "doc": "The current test name."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 552,
                    "col": 4,
                    "byteIndex": 17375
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "origin",
                  "jsDoc": {
                    "doc": "The string URL of the current test."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 554,
                    "col": 4,
                    "byteIndex": 17440
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "parent",
                  "jsDoc": {
                    "doc": "If the current test is a step of another test, the parent test context\nwill be set here."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 557,
                    "col": 4,
                    "byteIndex": 17567
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "TestContext",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TestContext"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "TestStepDefinition",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 633,
              "col": 2,
              "byteIndex": 19795
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "fn",
                  "jsDoc": {
                    "doc": "The test function that will be tested when this step is executed. The\nfunction can take an argument which will provide information about the\ncurrent step's context."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 637,
                    "col": 4,
                    "byteIndex": 20027
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          }
                        ]
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "t",
                          "optional": false,
                          "tsType": {
                            "repr": "TestContext",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "TestContext"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "name",
                  "jsDoc": {
                    "doc": "The name of the step."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 639,
                    "col": 4,
                    "byteIndex": 20110
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "ignore",
                  "jsDoc": {
                    "doc": "If truthy the current test step will be ignored.\n\nThis is a quick way to skip over a step, but also can be used for\nconditional logic, like determining if an environment feature is present."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 645,
                    "col": 4,
                    "byteIndex": 20354
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "sanitizeOps",
                  "jsDoc": {
                    "doc": "Check that the number of async completed operations after the test step\nis the same as number of dispatched operations. This ensures that the\ncode tested does not start async operations which it then does\nnot await. This helps in preventing logic errors and memory leaks\nin the application code.\n\nDefaults to the parent test or step's value."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 653,
                    "col": 4,
                    "byteIndex": 20770
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "sanitizeResources",
                  "jsDoc": {
                    "doc": "Ensure the test step does not \"leak\" resources - like open files or\nnetwork connections - by ensuring the open resources at the start of the\nstep match the open resources at the end of the step.\n\nDefaults to the parent test or step's value."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 659,
                    "col": 4,
                    "byteIndex": 21076
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "sanitizeExit",
                  "jsDoc": {
                    "doc": "Ensure the test step does not prematurely cause the process to exit,\nfor example via a call to {@linkcode Deno.exit}.\n\nDefaults to the parent test or step's value."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 664,
                    "col": 4,
                    "byteIndex": 21304
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "TestDefinition",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 668,
              "col": 2,
              "byteIndex": 21362
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "fn",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 669,
                    "col": 4,
                    "byteIndex": 21400
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          }
                        ]
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "t",
                          "optional": false,
                          "tsType": {
                            "repr": "TestContext",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "TestContext"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "name",
                  "jsDoc": {
                    "doc": "The name of the test."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 671,
                    "col": 4,
                    "byteIndex": 21483
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "ignore",
                  "jsDoc": {
                    "doc": "If truthy the current test step will be ignored.\n\nIt is a quick way to skip over a step, but also can be used for\nconditional logic, like determining if an environment feature is present."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 677,
                    "col": 4,
                    "byteIndex": 21725
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "only",
                  "jsDoc": {
                    "doc": "If at least one test has `only` set to `true`, only run tests that have\n`only` set to `true` and fail the test suite."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 680,
                    "col": 4,
                    "byteIndex": 21883
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "sanitizeOps",
                  "jsDoc": {
                    "doc": "Check that the number of async completed operations after the test step\nis the same as number of dispatched operations. This ensures that the\ncode tested does not start async operations which it then does\nnot await. This helps in preventing logic errors and memory leaks\nin the application code.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 688,
                    "col": 4,
                    "byteIndex": 22268
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "sanitizeResources",
                  "jsDoc": {
                    "doc": "Ensure the test step does not \"leak\" resources - like open files or\nnetwork connections - by ensuring the open resources at the start of the\ntest match the open resources at the end of the test.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 694,
                    "col": 4,
                    "byteIndex": 22545
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "sanitizeExit",
                  "jsDoc": {
                    "doc": "Ensure the test case does not prematurely cause the process to exit,\nfor example via a call to {@linkcode Deno.exit}.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 699,
                    "col": 4,
                    "byteIndex": 22744
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "permissions",
                  "jsDoc": {
                    "doc": "Specifies the permissions that should be used to run the test.\n\nSet this to \"inherit\" to keep the calling runtime permissions, set this\nto \"none\" to revoke all permissions, or set a more specific set of\npermissions using a {@linkcode PermissionOptionsObject}.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "\"inherit\""
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 707,
                    "col": 4,
                    "byteIndex": 23105
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "PermissionOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PermissionOptions"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "test",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 745,
              "col": 15,
              "byteIndex": 24040
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.test({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.test({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "DenoTest",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "DenoTest"
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "DenoTest",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 750,
              "col": 2,
              "byteIndex": 24094
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [
                {
                  "name": "ignore",
                  "jsDoc": {
                    "doc": "Shorthand property for ignoring a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 935,
                    "col": 4,
                    "byteIndex": 29594
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "t",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "ignore",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "ignore"
                              }
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "ignore",
                  "jsDoc": {
                    "doc": "Shorthand property for ignoring a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 941,
                    "col": 4,
                    "byteIndex": 29752
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "name",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "ignore",
                  "jsDoc": {
                    "doc": "Shorthand property for ignoring a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 947,
                    "col": 4,
                    "byteIndex": 29935
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "ignore",
                  "jsDoc": {
                    "doc": "Shorthand property for ignoring a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 953,
                    "col": 4,
                    "byteIndex": 30104
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "name",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "fn",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "fn"
                                  }
                                },
                                {
                                  "repr": "name",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "name"
                                  }
                                },
                                {
                                  "repr": "ignore",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "ignore"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "ignore",
                  "jsDoc": {
                    "doc": "Shorthand property for ignoring a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 963,
                    "col": 4,
                    "byteIndex": 30369
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "fn",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "fn"
                                  }
                                },
                                {
                                  "repr": "name",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "name"
                                  }
                                },
                                {
                                  "repr": "ignore",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "ignore"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "ignore",
                  "jsDoc": {
                    "doc": "Shorthand property for ignoring a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 972,
                    "col": 4,
                    "byteIndex": 30614
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "fn",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "fn"
                                  }
                                },
                                {
                                  "repr": "ignore",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "ignore"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "only",
                  "jsDoc": {
                    "doc": "Shorthand property for focusing a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 981,
                    "col": 4,
                    "byteIndex": 30850
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "t",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "only",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "only"
                              }
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "only",
                  "jsDoc": {
                    "doc": "Shorthand property for focusing a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 987,
                    "col": 4,
                    "byteIndex": 31004
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "name",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "only",
                  "jsDoc": {
                    "doc": "Shorthand property for focusing a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 993,
                    "col": 4,
                    "byteIndex": 31185
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "only",
                  "jsDoc": {
                    "doc": "Shorthand property for focusing a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 999,
                    "col": 4,
                    "byteIndex": 31352
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "name",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "fn",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "fn"
                                  }
                                },
                                {
                                  "repr": "name",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "name"
                                  }
                                },
                                {
                                  "repr": "only",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "only"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "only",
                  "jsDoc": {
                    "doc": "Shorthand property for focusing a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1009,
                    "col": 4,
                    "byteIndex": 31613
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "fn",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "fn"
                                  }
                                },
                                {
                                  "repr": "name",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "name"
                                  }
                                },
                                {
                                  "repr": "only",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "only"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "only",
                  "jsDoc": {
                    "doc": "Shorthand property for focusing a particular test case.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1018,
                    "col": 4,
                    "byteIndex": 31854
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "fn",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "fn"
                                  }
                                },
                                {
                                  "repr": "only",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "only"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                }
              ],
              "properties": [],
              "callSignatures": [
                {
                  "jsDoc": {
                    "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.test({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.test({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 786,
                    "col": 4,
                    "byteIndex": 25078
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "t",
                      "optional": false,
                      "tsType": {
                        "repr": "TestDefinition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TestDefinition"
                        }
                      }
                    }
                  ],
                  "tsType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "jsDoc": {
                    "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 809,
                    "col": 4,
                    "byteIndex": 25785
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "name",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "tsType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "jsDoc": {
                    "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 832,
                    "col": 4,
                    "byteIndex": 26554
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "tsType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "jsDoc": {
                    "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assert, fail, assertEquals } from \"jsr:@std/assert\";\n\nDeno.test(\"My test description\", { permissions: { read: true } }, (): void => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.test(\"My async test description\", { permissions: { read: false } }, async (): Promise<void> => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 855,
                    "col": 4,
                    "byteIndex": 27390
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "name",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "fn",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "fn"
                                  }
                                },
                                {
                                  "repr": "name",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "name"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "tsType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "jsDoc": {
                    "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test(\n  {\n    name: \"My test description\",\n    permissions: { read: true },\n  },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  },\n);\n\nDeno.test(\n  {\n    name: \"My async test description\",\n    permissions: { read: false },\n  },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  },\n);\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 894,
                    "col": 4,
                    "byteIndex": 28420
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "fn",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "fn"
                                  }
                                },
                                {
                                  "repr": "name",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "name"
                                  }
                                }
                              ]
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "tsType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "jsDoc": {
                    "doc": "Register a test which will be run when `deno test` is used on the command\nline and the containing module looks like a test module.\n\n`fn` can be async if required. Declared function must have a name.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.test(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  },\n);\n\nDeno.test(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  },\n);\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Testing"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 926,
                    "col": 4,
                    "byteIndex": 29375
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "Omit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "TestDefinition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TestDefinition"
                              }
                            },
                            {
                              "repr": "fn",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "fn"
                              }
                            }
                          ],
                          "typeName": "Omit"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "fn",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "fnOrConstructor",
                        "fnOrConstructor": {
                          "constructor": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "void",
                                "kind": "keyword",
                                "keyword": "void"
                              },
                              {
                                "repr": "Promise",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "void",
                                      "kind": "keyword",
                                      "keyword": "void"
                                    }
                                  ],
                                  "typeName": "Promise"
                                }
                              }
                            ]
                          },
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "t",
                              "optional": false,
                              "tsType": {
                                "repr": "TestContext",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "TestContext"
                                }
                              }
                            }
                          ],
                          "typeParams": []
                        }
                      }
                    }
                  ],
                  "tsType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                }
              ],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "BenchContext",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1031,
              "col": 2,
              "byteIndex": 32238
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Context that is passed to a benchmarked function. The instance is shared\nbetween iterations of the benchmark. Its methods can be used for example\nto override of the measured portion of the function.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [
                {
                  "name": "start",
                  "jsDoc": {
                    "doc": "Restarts the timer for the bench measurement. This should be called\nafter doing setup work which should not be measured.\n\nWarning: This method should not be used for benchmarks averaging less\nthan 10μs per iteration. In such cases it will be disabled but the call\nwill still have noticeable overhead, resulting in a warning.\n\n```ts\nDeno.bench(\"foo\", async (t) => {\n  const data = await Deno.readFile(\"data.txt\");\n  t.start();\n  // some operation on `data`...\n});\n```"
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1052,
                    "col": 4,
                    "byteIndex": 32977
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "end",
                  "jsDoc": {
                    "doc": "End the timer early for the bench measurement. This should be called\nbefore doing teardown work which should not be measured.\n\nWarning: This method should not be used for benchmarks averaging less\nthan 10μs per iteration. In such cases it will be disabled but the call\nwill still have noticeable overhead, resulting in a warning.\n\n```ts\nDeno.bench(\"foo\", async (t) => {\n  using file = await Deno.open(\"data.txt\");\n  t.start();\n  // some operation on `file`...\n  t.end();\n});\n```"
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1070,
                    "col": 4,
                    "byteIndex": 33589
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                }
              ],
              "properties": [
                {
                  "name": "name",
                  "jsDoc": {
                    "doc": "The current benchmark name."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1033,
                    "col": 4,
                    "byteIndex": 32313
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "origin",
                  "jsDoc": {
                    "doc": "The string URL of the current benchmark."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1035,
                    "col": 4,
                    "byteIndex": 32383
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "BenchDefinition",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1078,
              "col": 2,
              "byteIndex": 33728
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The interface for defining a benchmark test using {@linkcode Deno.bench}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "fn",
                  "jsDoc": {
                    "doc": "The test function which will be benchmarked."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1080,
                    "col": 4,
                    "byteIndex": 33823
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          }
                        ]
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "b",
                          "optional": false,
                          "tsType": {
                            "repr": "BenchContext",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "BenchContext"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "name",
                  "jsDoc": {
                    "doc": "The name of the test, which will be used in displaying the results."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1082,
                    "col": 4,
                    "byteIndex": 33953
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "ignore",
                  "jsDoc": {
                    "doc": "If truthy, the benchmark test will be ignored/skipped."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1084,
                    "col": 4,
                    "byteIndex": 34037
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "group",
                  "jsDoc": {
                    "doc": "Group name for the benchmark.\n\nGrouped benchmarks produce a group time summary, where the difference\nin performance between each test of the group is compared."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1089,
                    "col": 4,
                    "byteIndex": 34250
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "baseline",
                  "jsDoc": {
                    "doc": "Benchmark should be used as the baseline for other benchmarks.\n\nIf there are multiple baselines in a group, the first one is used as the\nbaseline."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1094,
                    "col": 4,
                    "byteIndex": 34448
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "only",
                  "jsDoc": {
                    "doc": "If at least one bench has `only` set to true, only run benches that have\n`only` set to `true` and fail the bench suite."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1097,
                    "col": 4,
                    "byteIndex": 34610
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "sanitizeExit",
                  "jsDoc": {
                    "doc": "Ensure the bench case does not prematurely cause the process to exit,\nfor example via a call to {@linkcode Deno.exit}.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1102,
                    "col": 4,
                    "byteIndex": 34797
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "permissions",
                  "jsDoc": {
                    "doc": "Specifies the permissions that should be used to run the bench.\n\nSet this to `\"inherit\"` to keep the calling thread's permissions.\n\nSet this to `\"none\"` to revoke all permissions.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "\"inherit\""
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1111,
                    "col": 4,
                    "byteIndex": 35082
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "PermissionOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PermissionOptions"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "bench",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1151,
              "col": 2,
              "byteIndex": 36126
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.bench({\n  name: \"example test\",\n  fn() {\n    assertEquals(\"world\", \"world\");\n  },\n});\n\nDeno.bench({\n  name: \"example ignored test\",\n  ignore: Deno.build.os === \"windows\",\n  fn() {\n    // This test is ignored only on Windows machines\n  },\n});\n\nDeno.bench({\n  name: \"example async test\",\n  async fn() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n});\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "b",
                  "optional": false,
                  "tsType": {
                    "repr": "BenchDefinition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BenchDefinition"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "bench",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1176,
              "col": 2,
              "byteIndex": 36932
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.bench(\"My test description\", () => {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(\"My async test description\", async () => {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "fn",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          }
                        ]
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "b",
                          "optional": false,
                          "tsType": {
                            "repr": "BenchContext",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "BenchContext"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "bench",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1204,
              "col": 2,
              "byteIndex": 37777
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.bench(function myTestName() {\n  assertEquals(\"hello\", \"hello\");\n});\n\nDeno.bench(async function myOtherTestName() {\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = await Deno.readFile(\"hello_world.txt\");\n  assertEquals(decoder.decode(data), \"Hello world\");\n});\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "fn",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          }
                        ]
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "b",
                          "optional": false,
                          "tsType": {
                            "repr": "BenchContext",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "BenchContext"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "bench",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1237,
              "col": 2,
              "byteIndex": 38744
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.bench(\n  \"My test description\",\n  { permissions: { read: true } },\n  () => {\n   assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  \"My async test description\",\n  { permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "BenchDefinition",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "BenchDefinition"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "fn",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "fn"
                              }
                            },
                            {
                              "repr": "name",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "name"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "fn",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          }
                        ]
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "b",
                          "optional": false,
                          "tsType": {
                            "repr": "BenchContext",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "BenchContext"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "bench",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1272,
              "col": 2,
              "byteIndex": 39788
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.bench(\n  { name: \"My test description\", permissions: { read: true } },\n  () => {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { name: \"My async test description\", permissions: { read: false } },\n  async () => {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "BenchDefinition",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "BenchDefinition"
                          }
                        },
                        {
                          "repr": "fn",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "fn"
                          }
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "fn",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          }
                        ]
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "b",
                          "optional": false,
                          "tsType": {
                            "repr": "BenchContext",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "BenchContext"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "bench",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1306,
              "col": 2,
              "byteIndex": 40778
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Register a benchmark test which will be run when `deno bench` is used on\nthe command line and the containing module looks like a bench module.\n\nIf the test function (`fn`) returns a promise or is async, the test runner\nwill await resolution to consider the test complete.\n\n```ts\nimport { assertEquals } from \"jsr:@std/assert\";\n\nDeno.bench(\n  { permissions: { read: true } },\n  function myTestName() {\n    assertEquals(\"hello\", \"hello\");\n  }\n);\n\nDeno.bench(\n  { permissions: { read: false } },\n  async function myOtherTestName() {\n    const decoder = new TextDecoder(\"utf-8\");\n    const data = await Deno.readFile(\"hello_world.txt\");\n    assertEquals(decoder.decode(data), \"Hello world\");\n  }\n);\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Testing"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "BenchDefinition",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "BenchDefinition"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "fn",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "fn"
                              }
                            },
                            {
                              "repr": "name",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "name"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "fn",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          },
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          }
                        ]
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "b",
                          "optional": false,
                          "tsType": {
                            "repr": "BenchContext",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "BenchContext"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "exit",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1323,
              "col": 2,
              "byteIndex": 41197
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Exit the Deno process with optional exit code.\n\nIf no exit code is supplied then Deno will exit with return code of `0`.\n\nIn worker contexts this is an alias to `self.close();`.\n\n```ts\nDeno.exit(5);\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "code",
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "returnType": {
                "repr": "never",
                "kind": "keyword",
                "keyword": "never"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "exitCode",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1340,
              "col": 13,
              "byteIndex": 41680
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The exit code for the Deno process.\n\nIf no exit code has been supplied, then Deno will assume a return code of `0`.\n\nWhen setting an exit code value, a number or non-NaN string must be provided,\notherwise a TypeError will be thrown.\n\n```ts\nconsole.log(Deno.exitCode); //-> 0\nDeno.exitCode = 1;\nconsole.log(Deno.exitCode); //-> 1\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "kind": "var"
            }
          },
          {
            "name": "Env",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1348,
              "col": 2,
              "byteIndex": 41851
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An interface containing methods to interact with the process environment\nvariables.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-env"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [
                {
                  "name": "get",
                  "jsDoc": {
                    "doc": "Retrieve the value of an environment variable.\n\nReturns `undefined` if the supplied environment variable is not defined.\n\n```ts\nconsole.log(Deno.env.get(\"HOME\"));  // e.g. outputs \"/home/alice\"\nconsole.log(Deno.env.get(\"MADE_UP_VAR\"));  // outputs \"undefined\"\n```\n\nRequires `allow-env` permission.\n",
                    "tags": [
                      {
                        "kind": "tags",
                        "tags": [
                          "allow-env"
                        ]
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1362,
                    "col": 4,
                    "byteIndex": 42282
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "key",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "undefined",
                        "kind": "keyword",
                        "keyword": "undefined"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "set",
                  "jsDoc": {
                    "doc": "Set the value of an environment variable.\n\n```ts\nDeno.env.set(\"SOME_VAR\", \"Value\");\nDeno.env.get(\"SOME_VAR\");  // outputs \"Value\"\n```\n\nRequires `allow-env` permission.\n",
                    "tags": [
                      {
                        "kind": "tags",
                        "tags": [
                          "allow-env"
                        ]
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1375,
                    "col": 4,
                    "byteIndex": 42586
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "key",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "value",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "delete",
                  "jsDoc": {
                    "doc": "Delete the value of an environment variable.\n\n```ts\nDeno.env.set(\"SOME_VAR\", \"Value\");\nDeno.env.delete(\"SOME_VAR\");  // outputs \"undefined\"\n```\n\nRequires `allow-env` permission.\n",
                    "tags": [
                      {
                        "kind": "tags",
                        "tags": [
                          "allow-env"
                        ]
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1388,
                    "col": 4,
                    "byteIndex": 42901
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "key",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "has",
                  "jsDoc": {
                    "doc": "Check whether an environment variable is present or not.\n\n```ts\nDeno.env.set(\"SOME_VAR\", \"Value\");\nDeno.env.has(\"SOME_VAR\");  // outputs true\n```\n\nRequires `allow-env` permission.\n",
                    "tags": [
                      {
                        "kind": "tags",
                        "tags": [
                          "allow-env"
                        ]
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1401,
                    "col": 4,
                    "byteIndex": 43206
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "key",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "toObject",
                  "jsDoc": {
                    "doc": "Returns a snapshot of the environment variables at invocation as a\nsimple object of keys and values.\n\n```ts\nDeno.env.set(\"TEST_VAR\", \"A\");\nconst myEnv = Deno.env.toObject();\nconsole.log(myEnv.SHELL);\nDeno.env.set(\"TEST_VAR\", \"B\");\nconsole.log(myEnv.TEST_VAR);  // outputs \"A\"\n```\n\nRequires `allow-env` permission.\n",
                    "tags": [
                      {
                        "kind": "tags",
                        "tags": [
                          "allow-env"
                        ]
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1418,
                    "col": 4,
                    "byteIndex": 43673
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [],
                      "callSignatures": [],
                      "indexSignatures": [
                        {
                          "readonly": false,
                          "params": [
                            {
                              "kind": "identifier",
                              "name": "index",
                              "optional": false,
                              "tsType": {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              }
                            }
                          ],
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 1418,
                            "col": 18,
                            "byteIndex": 43687
                          }
                        }
                      ]
                    }
                  },
                  "typeParams": []
                }
              ],
              "properties": [],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "env",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1427,
              "col": 15,
              "byteIndex": 43884
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An interface containing methods to interact with the process environment\nvariables.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-env"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "Env",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Env"
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "execPath",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1441,
              "col": 2,
              "byteIndex": 44156
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returns the path to the current deno executable.\n\n```ts\nconsole.log(Deno.execPath());  // e.g. \"/home/alice/.local/bin/deno\"\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "chdir",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1462,
              "col": 2,
              "byteIndex": 44702
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Change the current working directory to the specified path.\n\n```ts\nDeno.chdir(\"/home/userA\");\nDeno.chdir(\"../userB\");\nDeno.chdir(\"C:\\\\Program Files (x86)\\\\Java\");\n```\n\nThrows {@linkcode Deno.errors.NotFound} if directory not found.\n\nThrows {@linkcode Deno.errors.PermissionDenied} if the user does not have\noperating system file access rights.\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "directory",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "cwd",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1481,
              "col": 2,
              "byteIndex": 45217
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Return a string representing the current working directory.\n\nIf the current directory can be reached via multiple paths (due to symbolic\nlinks), `cwd()` may return any one of them.\n\n```ts\nconst currentWorkingDirectory = Deno.cwd();\n```\n\nThrows {@linkcode Deno.errors.NotFound} if directory not available.\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "link",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1495,
              "col": 2,
              "byteIndex": 45516
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates `newpath` as a hard link to `oldpath`.\n\n```ts\nawait Deno.link(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "oldpath",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "newpath",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "linkSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1509,
              "col": 2,
              "byteIndex": 45867
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously creates `newpath` as a hard link to `oldpath`.\n\n```ts\nDeno.linkSync(\"old/name\", \"new/name\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "oldpath",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "newpath",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "SeekMode",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1516,
              "col": 2,
              "byteIndex": 46056
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A enum which defines the seek mode for IO related APIs that support\nseeking.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "I/O"
                }
              ]
            },
            "kind": "enum",
            "enumDef": {
              "members": [
                {
                  "name": "Start",
                  "init": {
                    "repr": "0",
                    "kind": "literal",
                    "literal": {
                      "kind": "number",
                      "number": 0.0
                    }
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1518,
                    "col": 4,
                    "byteIndex": 46135
                  }
                },
                {
                  "name": "Current",
                  "init": {
                    "repr": "1",
                    "kind": "literal",
                    "literal": {
                      "kind": "number",
                      "number": 1.0
                    }
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1520,
                    "col": 4,
                    "byteIndex": 46217
                  }
                },
                {
                  "name": "End",
                  "init": {
                    "repr": "2",
                    "kind": "literal",
                    "literal": {
                      "kind": "number",
                      "number": 2.0
                    }
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1522,
                    "col": 4,
                    "byteIndex": 46292
                  }
                }
              ]
            }
          },
          {
            "name": "open",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1551,
              "col": 2,
              "byteIndex": 47192
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Open a file and resolve to an instance of {@linkcode Deno.FsFile}. The\nfile does not need to previously exist if using the `create` or `createNew`\nopen options. The caller may have the resulting file automatically closed\nby the runtime once it's out of scope by declaring the file variable with\nthe `using` keyword.\n\n```ts\nusing file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\n```\n\nAlternatively, the caller may manually close the resource when finished with\nit.\n\n```ts\nconst file = await Deno.open(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nfile.close();\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on\noptions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "OpenOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OpenOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "FsFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "FsFile"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "openSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1582,
              "col": 2,
              "byteIndex": 48180
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously open a file and return an instance of\n{@linkcode Deno.FsFile}. The file does not need to previously exist if\nusing the `create` or `createNew` open options. The caller may have the\nresulting file automatically closed by the runtime once it's out of scope\nby declaring the file variable with the `using` keyword.\n\n```ts\nusing file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\n```\n\nAlternatively, the caller may manually close the resource when finished with\nit.\n\n```ts\nconst file = Deno.openSync(\"/foo/bar.txt\", { read: true, write: true });\n// Do work with file\nfile.close();\n```\n\nRequires `allow-read` and/or `allow-write` permissions depending on\noptions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "OpenOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OpenOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "FsFile",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FsFile"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "create",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1596,
              "col": 2,
              "byteIndex": 48602
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates a file if none exists or truncates an existing file and resolves to\n an instance of {@linkcode Deno.FsFile}.\n\n```ts\nconst file = await Deno.create(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "FsFile",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "FsFile"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "createSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1610,
              "col": 2,
              "byteIndex": 49002
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates a file if none exists or truncates an existing file and returns\n an instance of {@linkcode Deno.FsFile}.\n\n```ts\nconst file = Deno.createSync(\"/foo/bar.txt\");\n```\n\nRequires `allow-read` and `allow-write` permissions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "FsFile",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FsFile"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "FsFile",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 1629,
              "col": 2,
              "byteIndex": 49666
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The Deno abstraction for reading and writing files.\n\nThis is the most straight forward way of handling files within Deno and is\nrecommended over using the discrete functions within the `Deno` namespace.\n\n```ts\nusing file = await Deno.open(\"/foo/bar.txt\", { read: true });\nconst fileInfo = await file.stat();\nif (fileInfo.isFile) {\n  const buf = new Uint8Array(100);\n  const numberOfBytesRead = await file.read(buf); // 11 bytes\n  const text = new TextDecoder().decode(buf);  // \"hello world\"\n}\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [],
              "properties": [
                {
                  "jsDoc": {
                    "doc": "A {@linkcode ReadableStream} instance representing to the byte contents\nof the file. This makes it easy to interoperate with other web streams\nbased APIs.\n\n```ts\nusing file = await Deno.open(\"my_file.txt\", { read: true });\nconst decoder = new TextDecoder();\nfor await (const chunk of file.readable) {\n  console.log(decoder.decode(chunk));\n}\n```"
                  },
                  "tsType": {
                    "repr": "ReadableStream",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "ReadableStream"
                    }
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "readable",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1642,
                    "col": 4,
                    "byteIndex": 50144
                  }
                },
                {
                  "jsDoc": {
                    "doc": "A {@linkcode WritableStream} instance to write the contents of the\nfile. This makes it easy to interoperate with other web streams based\nAPIs.\n\n```ts\nconst items = [\"hello\", \"world\"];\nusing file = await Deno.open(\"my_file.txt\", { write: true });\nconst encoder = new TextEncoder();\nconst writer = file.writable.getWriter();\nfor (const item of items) {\n  await writer.write(encoder.encode(item));\n}\n```"
                  },
                  "tsType": {
                    "repr": "WritableStream",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "WritableStream"
                    }
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "writable",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1657,
                    "col": 4,
                    "byteIndex": 50695
                  }
                }
              ],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Write the contents of the array buffer (`p`) to the file.\n\nResolves to the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nusing file = await Deno.open(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = await file.write(data); // 11\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "I/O"
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "write",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "p",
                        "optional": false,
                        "tsType": {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1674,
                    "col": 4,
                    "byteIndex": 51256
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously write the contents of the array buffer (`p`) to the file.\n\nReturns the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nusing file = Deno.openSync(\"/foo/bar.txt\", { write: true });\nconst bytesWritten = file.writeSync(data); // 11\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "writeSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "p",
                        "optional": false,
                        "tsType": {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1689,
                    "col": 4,
                    "byteIndex": 51787
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Truncates (or extends) the file to reach the specified `len`. If `len`\nis not specified, then the entire file contents are truncated.\n\n### Truncate the entire file\n\n```ts\nusing file = await Deno.open(\"my_file.txt\", { write: true });\nawait file.truncate();\n```\n\n### Truncate part of the file\n\n```ts\n// if \"my_file.txt\" contains the text \"hello world\":\nusing file = await Deno.open(\"my_file.txt\", { write: true });\nawait file.truncate(7);\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconst text = new TextDecoder().decode(buf); // \"hello w\"\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "truncate",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "len",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1711,
                    "col": 4,
                    "byteIndex": 52523
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously truncates (or extends) the file to reach the specified\n`len`. If `len` is not specified, then the entire file contents are\ntruncated.\n\n### Truncate the entire file\n\n```ts\nusing file = Deno.openSync(\"my_file.txt\", { write: true });\nfile.truncateSync();\n```\n\n### Truncate part of the file\n\n```ts\n// if \"my_file.txt\" contains the text \"hello world\":\nusing file = Deno.openSync(\"my_file.txt\", { write: true });\nfile.truncateSync(7);\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconst text = new TextDecoder().decode(buf); // \"hello w\"\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "truncateSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "len",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1734,
                    "col": 4,
                    "byteIndex": 53275
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Read the file into an array buffer (`p`).\n\nResolves to either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This\ndoes not indicate EOF.\n\n**It is not guaranteed that the full buffer will be read in a single\ncall.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nusing file = await Deno.open(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = await file.read(buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "read",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "p",
                        "optional": false,
                        "tsType": {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              },
                              {
                                "repr": "null",
                                "kind": "keyword",
                                "keyword": "null"
                              }
                            ]
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1754,
                    "col": 4,
                    "byteIndex": 54041
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously read from the file into an array buffer (`p`).\n\nReturns either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This\ndoes not indicate EOF.\n\n**It is not guaranteed that the full buffer will be read in a single\ncall.**\n\n```ts\n// if \"/foo/bar.txt\" contains the text \"hello world\":\nusing file = Deno.openSync(\"/foo/bar.txt\");\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = file.readSync(buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "readSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "p",
                        "optional": false,
                        "tsType": {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        }
                      ]
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1774,
                    "col": 4,
                    "byteIndex": 54829
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Seek to the given `offset` under mode given by `whence`. The call\nresolves to the new position within the resource (bytes from the start).\n\n```ts\n// Given the file contains \"Hello world\" text, which is 11 bytes long:\nusing file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait file.write(new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = await file.seek(6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nawait file.read(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given the file contains \"Hello world\" text, which is 11 bytes long:\nconst file = await Deno.open(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nawait file.write(new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(await file.seek(6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(await file.seek(2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(await file.seek(-2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "seek",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "bigint",
                              "kind": "keyword",
                              "keyword": "bigint"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "whence",
                        "optional": false,
                        "tsType": {
                          "repr": "SeekMode",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "SeekMode"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1812,
                    "col": 4,
                    "byteIndex": 56375
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously seek to the given `offset` under mode given by `whence`.\nThe new position within the resource (bytes from the start) is returned.\n\n```ts\nusing file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nfile.writeSync(new TextEncoder().encode(\"Hello world\"));\n\n// advance cursor 6 bytes\nconst cursorPosition = file.seekSync(6, Deno.SeekMode.Start);\nconsole.log(cursorPosition);  // 6\nconst buf = new Uint8Array(100);\nfile.readSync(buf);\nconsole.log(new TextDecoder().decode(buf)); // \"world\"\n```\n\nThe seek modes work as follows:\n\n```ts\n// Given the file contains \"Hello world\" text, which is 11 bytes long:\nusing file = Deno.openSync(\n  \"hello.txt\",\n  { read: true, write: true, truncate: true, create: true },\n);\nfile.writeSync(new TextEncoder().encode(\"Hello world\"));\n\n// Seek 6 bytes from the start of the file\nconsole.log(file.seekSync(6, Deno.SeekMode.Start)); // \"6\"\n// Seek 2 more bytes from the current position\nconsole.log(file.seekSync(2, Deno.SeekMode.Current)); // \"8\"\n// Seek backwards 2 bytes from the end of the file\nconsole.log(file.seekSync(-2, Deno.SeekMode.End)); // \"9\" (i.e. 11-2)\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "seekSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "bigint",
                              "kind": "keyword",
                              "keyword": "bigint"
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "whence",
                        "optional": false,
                        "tsType": {
                          "repr": "SeekMode",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "SeekMode"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1849,
                    "col": 4,
                    "byteIndex": 57856
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Resolves to a {@linkcode Deno.FileInfo} for the file.\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\n\nusing file = await Deno.open(\"hello.txt\");\nconst fileInfo = await file.stat();\nassert(fileInfo.isFile);\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "stat",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "FileInfo",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "FileInfo"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1860,
                    "col": 4,
                    "byteIndex": 58203
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the file.\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\n\nusing file = Deno.openSync(\"hello.txt\")\nconst fileInfo = file.statSync();\nassert(fileInfo.isFile);\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "statSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "FileInfo",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "FileInfo"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1871,
                    "col": 4,
                    "byteIndex": 58521
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Flushes any pending data and metadata operations of the given file\nstream to disk.\n\n```ts\nconst file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nawait file.write(new TextEncoder().encode(\"Hello World\"));\nawait file.truncate(1);\nawait file.sync();\nconsole.log(await Deno.readTextFile(\"my_file.txt\")); // H\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "I/O"
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "sync",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1889,
                    "col": 4,
                    "byteIndex": 59030
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously flushes any pending data and metadata operations of the given\nfile stream to disk.\n\n```ts\nconst file = Deno.openSync(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nfile.writeSync(new TextEncoder().encode(\"Hello World\"));\nfile.truncateSync(1);\nfile.syncSync();\nconsole.log(Deno.readTextFileSync(\"my_file.txt\")); // H\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "I/O"
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "syncSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1907,
                    "col": 4,
                    "byteIndex": 59544
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Flushes any pending data operations of the given file stream to disk.\n ```ts\nusing file = await Deno.open(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nawait file.write(new TextEncoder().encode(\"Hello World\"));\nawait file.syncData();\nconsole.log(await Deno.readTextFile(\"my_file.txt\")); // Hello World\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "I/O"
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "syncData",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1922,
                    "col": 4,
                    "byteIndex": 60006
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously flushes any pending data operations of the given file stream\nto disk.\n\n ```ts\nusing file = Deno.openSync(\n  \"my_file.txt\",\n  { read: true, write: true, create: true },\n);\nfile.writeSync(new TextEncoder().encode(\"Hello World\"));\nfile.syncDataSync();\nconsole.log(Deno.readTextFileSync(\"my_file.txt\")); // Hello World\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "I/O"
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "syncDataSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1939,
                    "col": 4,
                    "byteIndex": 60497
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Changes the access (`atime`) and modification (`mtime`) times of the\nfile stream resource. Given times are either in seconds (UNIX epoch\ntime) or as `Date` objects.\n\n```ts\nusing file = await Deno.open(\"file.txt\", { create: true, write: true });\nawait file.utime(1556495550, new Date());\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "File System"
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "utime",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "atime",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "Date",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Date"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "mtime",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "Date",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Date"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1952,
                    "col": 4,
                    "byteIndex": 60921
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously changes the access (`atime`) and modification (`mtime`)\ntimes of the file stream resource. Given times are either in seconds\n(UNIX epoch time) or as `Date` objects.\n\n```ts\nusing file = Deno.openSync(\"file.txt\", { create: true, write: true });\nfile.utime(1556495550, new Date());\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "File System"
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "utimeSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "atime",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "Date",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Date"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "mtime",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "Date",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Date"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1965,
                    "col": 4,
                    "byteIndex": 61395
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Checks if the file resource is a TTY (terminal).\n\n```ts\n// This example is system and context specific\nusing file = await Deno.open(\"/dev/tty6\");\nfile.isTerminal(); // true\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "isTerminal",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1976,
                    "col": 4,
                    "byteIndex": 61763
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Set TTY to be under raw mode or not. In raw mode, characters are read and\nreturned as is, without being processed. All special processing of\ncharacters by the terminal is disabled, including echoing input\ncharacters. Reading from a TTY device in raw mode is faster than reading\nfrom a TTY device in canonical mode.\n\n```ts\nusing file = await Deno.open(\"/dev/tty6\");\nfile.setRaw(true, { cbreak: true });\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "setRaw",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "mode",
                        "optional": false,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "SetRawOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "SetRawOptions"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1990,
                    "col": 4,
                    "byteIndex": 62361
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Acquire an advisory file-system lock for the file.\n",
                    "tags": [
                      {
                        "kind": "param",
                        "name": "exclusive",
                        "default": "false"
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "lock",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "exclusive",
                        "optional": true,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 1996,
                    "col": 4,
                    "byteIndex": 62532
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously acquire an advisory file-system lock synchronously for the file.\n",
                    "tags": [
                      {
                        "kind": "param",
                        "name": "exclusive",
                        "default": "false"
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "lockSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "exclusive",
                        "optional": true,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2002,
                    "col": 4,
                    "byteIndex": 62719
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Release an advisory file-system lock for the file."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "unlock",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2006,
                    "col": 4,
                    "byteIndex": 62834
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously release an advisory file-system lock for the file."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "unlockSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2010,
                    "col": 4,
                    "byteIndex": 62951
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Close the file. Closing a file when you are finished with it is\nimportant to avoid leaking resources.\n\n```ts\nusing file = await Deno.open(\"my_file.txt\");\n// do work with \"file\" object\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "close",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2019,
                    "col": 4,
                    "byteIndex": 63220
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "[Symbol.dispose]",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2021,
                    "col": 4,
                    "byteIndex": 63240
                  }
                }
              ],
              "extends": null,
              "implements": [
                {
                  "repr": "Disposable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Disposable"
                  }
                }
              ],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "consoleSize",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2036,
              "col": 2,
              "byteIndex": 63658
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Gets the size of the console as columns/rows.\n\n```ts\nconst { columns, rows } = Deno.consoleSize();\n```\n\nThis returns the size of the console window as reported by the operating\nsystem. It's not a reflection of how many characters will fit within the\nconsole window, but can be used as part of that calculation.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "I/O"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "columns",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2037,
                        "col": 4,
                        "byteIndex": 63695
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "rows",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2038,
                        "col": 4,
                        "byteIndex": 63716
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "SetRawOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2042,
              "col": 2,
              "byteIndex": 63761
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "I/O"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "cbreak",
                  "jsDoc": {
                    "doc": "The `cbreak` option can be used to indicate that characters that\ncorrespond to a signal should still be generated. When disabling raw\nmode, this option is ignored. This functionality currently only works on\nLinux and Mac OS."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2049,
                    "col": 4,
                    "byteIndex": 64067
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "stdin",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2072,
              "col": 15,
              "byteIndex": 64808
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A reference to `stdin` which can be used to read directly from `stdin`.\n\nIt implements the Deno specific\n{@linkcode https://jsr.io/@std/io/doc/types/~/Reader | Reader},\n{@linkcode https://jsr.io/@std/io/doc/types/~/ReaderSync | ReaderSync},\nand {@linkcode https://jsr.io/@std/io/doc/types/~/Closer | Closer}\ninterfaces as well as provides a {@linkcode ReadableStream} interface.\n\n### Reading chunks from the readable stream\n\n```ts\nconst decoder = new TextDecoder();\nfor await (const chunk of Deno.stdin.readable) {\n  const text = decoder.decode(chunk);\n  // do something with the text\n}\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "I/O"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [
                    {
                      "name": "read",
                      "jsDoc": {
                        "doc": "Read the incoming data from `stdin` into an array buffer (`p`).\n\nResolves to either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This\ndoes not indicate EOF.\n\n**It is not guaranteed that the full buffer will be read in a single\ncall.**\n\n```ts\n// If the text \"hello world\" is piped into the script:\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = await Deno.stdin.read(buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\n```\n",
                        "tags": [
                          {
                            "kind": "category",
                            "doc": "I/O"
                          }
                        ]
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2093,
                        "col": 4,
                        "byteIndex": 65553
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "p",
                          "optional": false,
                          "tsType": {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        }
                      ],
                      "optional": false,
                      "returnType": {
                        "repr": "Promise",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "number",
                                  "kind": "keyword",
                                  "keyword": "number"
                                },
                                {
                                  "repr": "null",
                                  "kind": "keyword",
                                  "keyword": "null"
                                }
                              ]
                            }
                          ],
                          "typeName": "Promise"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "readSync",
                      "jsDoc": {
                        "doc": "Synchronously read from the incoming data from `stdin` into an array\nbuffer (`p`).\n\nReturns either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This\ndoes not indicate EOF.\n\n**It is not guaranteed that the full buffer will be read in a single\ncall.**\n\n```ts\n// If the text \"hello world\" is piped into the script:\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = Deno.stdin.readSync(buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\n```\n",
                        "tags": [
                          {
                            "kind": "category",
                            "doc": "I/O"
                          }
                        ]
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2115,
                        "col": 4,
                        "byteIndex": 66354
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "p",
                          "optional": false,
                          "tsType": {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        }
                      ],
                      "optional": false,
                      "returnType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      },
                      "typeParams": []
                    },
                    {
                      "name": "close",
                      "jsDoc": {
                        "doc": "Closes `stdin`, freeing the resource.\n\n```ts\nDeno.stdin.close();\n```"
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2122,
                        "col": 4,
                        "byteIndex": 66510
                      },
                      "params": [],
                      "optional": false,
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "setRaw",
                      "jsDoc": {
                        "doc": "Set TTY to be under raw mode or not. In raw mode, characters are read and\nreturned as is, without being processed. All special processing of\ncharacters by the terminal is disabled, including echoing input\ncharacters. Reading from a TTY device in raw mode is faster than reading\nfrom a TTY device in canonical mode.\n\n```ts\nDeno.stdin.setRaw(true, { cbreak: true });\n```\n",
                        "tags": [
                          {
                            "kind": "category",
                            "doc": "I/O"
                          }
                        ]
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2138,
                        "col": 4,
                        "byteIndex": 67106
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "mode",
                          "optional": false,
                          "tsType": {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          }
                        },
                        {
                          "kind": "identifier",
                          "name": "options",
                          "optional": true,
                          "tsType": {
                            "repr": "SetRawOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "SetRawOptions"
                            }
                          }
                        }
                      ],
                      "optional": false,
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "isTerminal",
                      "jsDoc": {
                        "doc": "Checks if `stdin` is a TTY (terminal).\n\n```ts\n// This example is system and context specific\nDeno.stdin.isTerminal(); // true\n```\n",
                        "tags": [
                          {
                            "kind": "category",
                            "doc": "I/O"
                          }
                        ]
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2149,
                        "col": 4,
                        "byteIndex": 67379
                      },
                      "params": [],
                      "optional": false,
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "typeParams": []
                    }
                  ],
                  "properties": [
                    {
                      "name": "readable",
                      "jsDoc": {
                        "doc": "A readable stream interface to `stdin`."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2124,
                        "col": 4,
                        "byteIndex": 66580
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "ReadableStream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Uint8Array",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Uint8Array"
                              }
                            }
                          ],
                          "typeName": "ReadableStream"
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "stdout",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2163,
              "col": 15,
              "byteIndex": 68018
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A reference to `stdout` which can be used to write directly to `stdout`.\nIt implements the Deno specific\n{@linkcode https://jsr.io/@std/io/doc/types/~/Writer | Writer},\n{@linkcode https://jsr.io/@std/io/doc/types/~/WriterSync | WriterSync},\nand {@linkcode https://jsr.io/@std/io/doc/types/~/Closer | Closer} interfaces as well as provides a\n{@linkcode WritableStream} interface.\n\nThese are low level constructs, and the {@linkcode console} interface is a\nmore straight forward way to interact with `stdout` and `stderr`.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "I/O"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [
                    {
                      "name": "write",
                      "jsDoc": {
                        "doc": "Write the contents of the array buffer (`p`) to `stdout`.\n\nResolves to the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst bytesWritten = await Deno.stdout.write(data); // 11\n```\n",
                        "tags": [
                          {
                            "kind": "category",
                            "doc": "I/O"
                          }
                        ]
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2179,
                        "col": 4,
                        "byteIndex": 68479
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "p",
                          "optional": false,
                          "tsType": {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        }
                      ],
                      "optional": false,
                      "returnType": {
                        "repr": "Promise",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            }
                          ],
                          "typeName": "Promise"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "writeSync",
                      "jsDoc": {
                        "doc": "Synchronously write the contents of the array buffer (`p`) to `stdout`.\n\nReturns the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst bytesWritten = Deno.stdout.writeSync(data); // 11\n```"
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2193,
                        "col": 4,
                        "byteIndex": 68949
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "p",
                          "optional": false,
                          "tsType": {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        }
                      ],
                      "optional": false,
                      "returnType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "close",
                      "jsDoc": {
                        "doc": "Closes `stdout`, freeing the resource.\n\n```ts\nDeno.stdout.close();\n```"
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2200,
                        "col": 4,
                        "byteIndex": 69101
                      },
                      "params": [],
                      "optional": false,
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "isTerminal",
                      "jsDoc": {
                        "doc": "Checks if `stdout` is a TTY (terminal).\n\n```ts\n// This example is system and context specific\nDeno.stdout.isTerminal(); // true\n```\n",
                        "tags": [
                          {
                            "kind": "category",
                            "doc": "I/O"
                          }
                        ]
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2213,
                        "col": 4,
                        "byteIndex": 69440
                      },
                      "params": [],
                      "optional": false,
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "typeParams": []
                    }
                  ],
                  "properties": [
                    {
                      "name": "writable",
                      "jsDoc": {
                        "doc": "A writable stream interface to `stdout`."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2202,
                        "col": 4,
                        "byteIndex": 69172
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "WritableStream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Uint8Array",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Uint8Array"
                              }
                            }
                          ],
                          "typeName": "WritableStream"
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "stderr",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2227,
              "col": 15,
              "byteIndex": 70079
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A reference to `stderr` which can be used to write directly to `stderr`.\nIt implements the Deno specific\n{@linkcode https://jsr.io/@std/io/doc/types/~/Writer | Writer},\n{@linkcode https://jsr.io/@std/io/doc/types/~/WriterSync | WriterSync},\nand {@linkcode https://jsr.io/@std/io/doc/types/~/Closer | Closer} interfaces as well as provides a\n{@linkcode WritableStream} interface.\n\nThese are low level constructs, and the {@linkcode console} interface is a\nmore straight forward way to interact with `stdout` and `stderr`.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "I/O"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [
                    {
                      "name": "write",
                      "jsDoc": {
                        "doc": "Write the contents of the array buffer (`p`) to `stderr`.\n\nResolves to the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst bytesWritten = await Deno.stderr.write(data); // 11\n```\n",
                        "tags": [
                          {
                            "kind": "category",
                            "doc": "I/O"
                          }
                        ]
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2243,
                        "col": 4,
                        "byteIndex": 70540
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "p",
                          "optional": false,
                          "tsType": {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        }
                      ],
                      "optional": false,
                      "returnType": {
                        "repr": "Promise",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            }
                          ],
                          "typeName": "Promise"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "writeSync",
                      "jsDoc": {
                        "doc": "Synchronously write the contents of the array buffer (`p`) to `stderr`.\n\nReturns the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst bytesWritten = Deno.stderr.writeSync(data); // 11\n```"
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2257,
                        "col": 4,
                        "byteIndex": 71010
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "p",
                          "optional": false,
                          "tsType": {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        }
                      ],
                      "optional": false,
                      "returnType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "close",
                      "jsDoc": {
                        "doc": "Closes `stderr`, freeing the resource.\n\n```ts\nDeno.stderr.close();\n```"
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2264,
                        "col": 4,
                        "byteIndex": 71162
                      },
                      "params": [],
                      "optional": false,
                      "returnType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "isTerminal",
                      "jsDoc": {
                        "doc": "Checks if `stderr` is a TTY (terminal).\n\n```ts\n// This example is system and context specific\nDeno.stderr.isTerminal(); // true\n```\n",
                        "tags": [
                          {
                            "kind": "category",
                            "doc": "I/O"
                          }
                        ]
                      },
                      "kind": "method",
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2277,
                        "col": 4,
                        "byteIndex": 71501
                      },
                      "params": [],
                      "optional": false,
                      "returnType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      "typeParams": []
                    }
                  ],
                  "properties": [
                    {
                      "name": "writable",
                      "jsDoc": {
                        "doc": "A writable stream interface to `stderr`."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 2266,
                        "col": 4,
                        "byteIndex": 71233
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "WritableStream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Uint8Array",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Uint8Array"
                              }
                            }
                          ],
                          "typeName": "WritableStream"
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "OpenOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2285,
              "col": 2,
              "byteIndex": 71672
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when doing {@linkcode Deno.open} and\n{@linkcode Deno.openSync}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "read",
                  "jsDoc": {
                    "doc": "Sets the option for read access. This option, when `true`, means that\nthe file should be read-able if opened.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2290,
                    "col": 4,
                    "byteIndex": 71865
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "write",
                  "jsDoc": {
                    "doc": "Sets the option for write access. This option, when `true`, means that\nthe file should be write-able if opened. If the file already exists,\nany write calls on it will overwrite its contents, by default without\ntruncating it.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2297,
                    "col": 4,
                    "byteIndex": 72173
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "append",
                  "jsDoc": {
                    "doc": "Sets the option for the append mode. This option, when `true`, means\nthat writes will append to a file instead of overwriting previous\ncontents.\n\nNote that setting `{ write: true, append: true }` has the same effect as\nsetting only `{ append: true }`.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2306,
                    "col": 4,
                    "byteIndex": 72522
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "truncate",
                  "jsDoc": {
                    "doc": "Sets the option for truncating a previous file. If a file is\nsuccessfully opened with this option set it will truncate the file to `0`\nsize if it already exists. The file must be opened with write access\nfor truncate to work.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2313,
                    "col": 4,
                    "byteIndex": 72833
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "create",
                  "jsDoc": {
                    "doc": "Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path. Requires write or append access to be\nused.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2319,
                    "col": 4,
                    "byteIndex": 73055
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "createNew",
                  "jsDoc": {
                    "doc": "If set to `true`, no file, directory, or symlink is allowed to exist at\nthe target location. Requires write or append access to be used. When\ncreateNew is set to `true`, create and truncate are ignored.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2325,
                    "col": 4,
                    "byteIndex": 73336
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "mode",
                  "jsDoc": {
                    "doc": "Permissions to use if creating the file (defaults to `0o666`, before\nthe process's umask).\n\nIgnored on Windows."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2330,
                    "col": 4,
                    "byteIndex": 73504
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "ReadFileOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2338,
              "col": 2,
              "byteIndex": 73673
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when using {@linkcode Deno.readFile} or\n{@linkcode Deno.readFileSync}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "signal",
                  "jsDoc": {
                    "doc": "An abort signal to allow cancellation of the file read operation.\nIf the signal becomes aborted the readFile operation will be stopped\nand the promise returned will be rejected with an AbortError."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2344,
                    "col": 4,
                    "byteIndex": 73946
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "AbortSignal",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "AbortSignal"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "MkdirOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2352,
              "col": 2,
              "byteIndex": 74117
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when using {@linkcode Deno.mkdir} and\n{@linkcode Deno.mkdirSync}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "recursive",
                  "jsDoc": {
                    "doc": "If set to `true`, means that any intermediate directories will also be\ncreated (as with the shell command `mkdir -p`).\n\nIntermediate directories are created with the same permissions.\n\nWhen recursive is set to `true`, succeeds silently (without changing any\npermissions) if a directory already exists at the path, or if the path\nis a symlink to an existing directory.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2363,
                    "col": 4,
                    "byteIndex": 74610
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "mode",
                  "jsDoc": {
                    "doc": "Permissions to use when creating the directory (defaults to `0o777`,\nbefore the process's umask).\n\nIgnored on Windows."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2368,
                    "col": 4,
                    "byteIndex": 74785
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "mkdir",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2386,
              "col": 2,
              "byteIndex": 75228
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates a new directory with the specified path.\n\n```ts\nawait Deno.mkdir(\"new_dir\");\nawait Deno.mkdir(\"nested/directories\", { recursive: true });\nawait Deno.mkdir(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "MkdirOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MkdirOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "mkdirSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2406,
              "col": 2,
              "byteIndex": 75755
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously creates a new directory with the specified path.\n\n```ts\nDeno.mkdirSync(\"new_dir\");\nDeno.mkdirSync(\"nested/directories\", { recursive: true });\nDeno.mkdirSync(\"restricted_access_dir\", { mode: 0o700 });\n```\n\nDefaults to throwing error if the directory already exists.\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "MkdirOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MkdirOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "MakeTempOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2414,
              "col": 2,
              "byteIndex": 76061
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when using {@linkcode Deno.makeTempDir},\n{@linkcode Deno.makeTempDirSync}, {@linkcode Deno.makeTempFile}, and\n{@linkcode Deno.makeTempFileSync}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "dir",
                  "jsDoc": {
                    "doc": "Directory where the temporary directory should be created (defaults to\nthe env variable `TMPDIR`, or the system's default, usually `/tmp`).\n\nNote that if the passed `dir` is relative, the path returned by\n`makeTempFile()` and `makeTempDir()` will also be relative. Be mindful of\nthis when changing working directory."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2421,
                    "col": 4,
                    "byteIndex": 76462
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "prefix",
                  "jsDoc": {
                    "doc": "String that should precede the random portion of the temporary\ndirectory's name."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2424,
                    "col": 4,
                    "byteIndex": 76579
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "suffix",
                  "jsDoc": {
                    "doc": "String that should follow the random portion of the temporary\ndirectory's name."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2427,
                    "col": 4,
                    "byteIndex": 76698
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "makeTempDir",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2452,
              "col": 2,
              "byteIndex": 77583
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates a new temporary directory in the default directory for temporary\nfiles, unless `dir` is specified. Other optional options include\nprefixing and suffixing the directory name with `prefix` and `suffix`\nrespectively.\n\nThis call resolves to the full path to the newly created directory.\n\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n```ts\nconst tempDirName0 = await Deno.makeTempDir();  // e.g. /tmp/2894ea76\nconst tempDirName1 = await Deno.makeTempDir({ prefix: 'my_temp' }); // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "MakeTempOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MakeTempOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "makeTempDirSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2476,
              "col": 2,
              "byteIndex": 78521
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously creates a new temporary directory in the default directory\nfor temporary files, unless `dir` is specified. Other optional options\ninclude prefixing and suffixing the directory name with `prefix` and\n`suffix` respectively.\n\nThe full path to the newly created directory is returned.\n\nMultiple programs calling this function simultaneously will create different\ndirectories. It is the caller's responsibility to remove the directory when\nno longer needed.\n\n```ts\nconst tempDirName0 = Deno.makeTempDirSync();  // e.g. /tmp/2894ea76\nconst tempDirName1 = Deno.makeTempDirSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp339c944d\n```\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "MakeTempOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MakeTempOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "makeTempFile",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2500,
              "col": 2,
              "byteIndex": 79390
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates a new temporary file in the default directory for temporary\nfiles, unless `dir` is specified.\n\nOther options include prefixing and suffixing the directory name with\n`prefix` and `suffix` respectively.\n\nThis call resolves to the full path to the newly created file.\n\nMultiple programs calling this function simultaneously will create\ndifferent files. It is the caller's responsibility to remove the file when\nno longer needed.\n\n```ts\nconst tmpFileName0 = await Deno.makeTempFile();  // e.g. /tmp/419e0bf2\nconst tmpFileName1 = await Deno.makeTempFile({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "MakeTempOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MakeTempOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "makeTempFileSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2524,
              "col": 2,
              "byteIndex": 80266
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously creates a new temporary file in the default directory for\ntemporary files, unless `dir` is specified.\n\nOther options include prefixing and suffixing the directory name with\n`prefix` and `suffix` respectively.\n\nThe full path to the newly created file is returned.\n\nMultiple programs calling this function simultaneously will create\ndifferent files. It is the caller's responsibility to remove the file when\nno longer needed.\n\n```ts\nconst tempFileName0 = Deno.makeTempFileSync(); // e.g. /tmp/419e0bf2\nconst tempFileName1 = Deno.makeTempFileSync({ prefix: 'my_temp' });  // e.g. /tmp/my_temp754d3098\n```\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "MakeTempOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "MakeTempOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "chmod",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2558,
              "col": 2,
              "byteIndex": 81421
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Changes the permission of a specific file/directory of specified path.\nIgnores the process's umask.\n\n```ts\nawait Deno.chmod(\"/path/to/file\", 0o666);\n```\n\nThe mode is a sequence of 3 octal numbers. The first/left-most number\nspecifies the permissions for the owner. The second number specifies the\npermissions for the group. The last/right-most number specifies the\npermissions for others. For example, with a mode of 0o764, the owner (7)\ncan read/write/execute, the group (6) can read/write and everyone else (4)\ncan read only.\n\n| Number | Description |\n| ------ | ----------- |\n| 7      | read, write, and execute |\n| 6      | read and write |\n| 5      | read and execute |\n| 4      | read only |\n| 3      | write and execute |\n| 2      | write only |\n| 1      | execute only |\n| 0      | no permission |\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "mode",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "chmodSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2576,
              "col": 2,
              "byteIndex": 81912
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously changes the permission of a specific file/directory of\nspecified path. Ignores the process's umask.\n\n```ts\nDeno.chmodSync(\"/path/to/file\", 0o666);\n```\n\nFor a full description, see {@linkcode Deno.chmod}.\n\nNOTE: This API currently throws on Windows\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "mode",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "chown",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2597,
              "col": 2,
              "byteIndex": 82520
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Change owner of a regular file or directory.\n\nThis functionality is not available on Windows.\n\n```ts\nawait Deno.chown(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System\n"
                },
                {
                  "kind": "param",
                  "name": "path",
                  "doc": "path to the file"
                },
                {
                  "kind": "param",
                  "name": "uid",
                  "doc": "user id (UID) of the new owner, or `null` for no change"
                },
                {
                  "kind": "param",
                  "name": "gid",
                  "doc": "group id (GID) of the new owner, or `null` for no change"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "uid",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "gid",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "chownSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2622,
              "col": 2,
              "byteIndex": 83188
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously change owner of a regular file or directory.\n\nThis functionality is not available on Windows.\n\n```ts\nDeno.chownSync(\"myFile.txt\", 1000, 1002);\n```\n\nRequires `allow-write` permission.\n\nThrows Error (not implemented) if executed on Windows.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System\n"
                },
                {
                  "kind": "param",
                  "name": "path",
                  "doc": "path to the file"
                },
                {
                  "kind": "param",
                  "name": "uid",
                  "doc": "user id (UID) of the new owner, or `null` for no change"
                },
                {
                  "kind": "param",
                  "name": "gid",
                  "doc": "group id (GID) of the new owner, or `null` for no change"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "uid",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "gid",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "RemoveOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2633,
              "col": 2,
              "byteIndex": 83445
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when using {@linkcode Deno.remove} and\n{@linkcode Deno.removeSync}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "recursive",
                  "jsDoc": {
                    "doc": "If set to `true`, path will be removed even if it's a non-empty directory.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2637,
                    "col": 4,
                    "byteIndex": 83599
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "remove",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2655,
              "col": 2,
              "byteIndex": 84081
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Removes the named file or directory.\n\n```ts\nawait Deno.remove(\"/path/to/empty_dir/or/file\");\nawait Deno.remove(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty\ndirectory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "RemoveOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RemoveOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "removeSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2675,
              "col": 2,
              "byteIndex": 84645
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously removes the named file or directory.\n\n```ts\nDeno.removeSync(\"/path/to/empty_dir/or/file\");\nDeno.removeSync(\"/path/to/populated_dir/or/file\", { recursive: true });\n```\n\nThrows error if permission denied, path not found, or path is a non-empty\ndirectory and the `recursive` option isn't set to `true`.\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "RemoveOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RemoveOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "renameSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2696,
              "col": 2,
              "byteIndex": 85471
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously renames (moves) `oldpath` to `newpath`. Paths may be files or\ndirectories. If `newpath` already exists and is not a directory,\n`renameSync()` replaces it. OS-specific restrictions may apply when\n`oldpath` and `newpath` are in different directories.\n\n```ts\nDeno.renameSync(\"old/path\", \"new/path\");\n```\n\nOn Unix-like OSes, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so what\nthey are. It's always an error to rename anything to a non-empty directory.\n\nRequires `allow-read` and `allow-write` permissions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "oldpath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "newpath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "rename",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2721,
              "col": 2,
              "byteIndex": 86300
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Renames (moves) `oldpath` to `newpath`. Paths may be files or directories.\nIf `newpath` already exists and is not a directory, `rename()` replaces it.\nOS-specific restrictions may apply when `oldpath` and `newpath` are in\ndifferent directories.\n\n```ts\nawait Deno.rename(\"old/path\", \"new/path\");\n```\n\nOn Unix-like OSes, this operation does not follow symlinks at either path.\n\nIt varies between platforms when the operation throws errors, and if so\nwhat they are. It's always an error to rename anything to a non-empty\ndirectory.\n\nRequires `allow-read` and `allow-write` permissions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "oldpath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "newpath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "readTextFile",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2739,
              "col": 2,
              "byteIndex": 86750
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Asynchronously reads and returns the entire contents of a file as an UTF-8\n decoded string. Reading a directory throws an error.\n\n```ts\nconst data = await Deno.readTextFile(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ReadFileOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ReadFileOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "readTextFileSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2757,
              "col": 2,
              "byteIndex": 87206
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously reads and returns the entire contents of a file as an UTF-8\n decoded string. Reading a directory throws an error.\n\n```ts\nconst data = Deno.readTextFileSync(\"hello.txt\");\nconsole.log(data);\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "readFile",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2774,
              "col": 2,
              "byteIndex": 87750
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Reads and resolves to the entire contents of a file as an array of bytes.\n`TextDecoder` can be used to transform the bytes to string if required.\nReading a directory returns an empty data array.\n\n```ts\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = await Deno.readFile(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ReadFileOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ReadFileOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Uint8Array",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Uint8Array"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "readFileSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2794,
              "col": 2,
              "byteIndex": 88347
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously reads and returns the entire contents of a file as an array\nof bytes. `TextDecoder` can be used to transform the bytes to string if\nrequired. Reading a directory returns an empty data array.\n\n```ts\nconst decoder = new TextDecoder(\"utf-8\");\nconst data = Deno.readFileSync(\"hello.txt\");\nconsole.log(decoder.decode(data));\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Uint8Array",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Uint8Array"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "FileInfo",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2803,
              "col": 2,
              "byteIndex": 88711
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Provides information about a file and is returned by\n{@linkcode Deno.stat}, {@linkcode Deno.lstat}, {@linkcode Deno.statSync},\nand {@linkcode Deno.lstatSync} or from calling `stat()` and `statSync()`\non an {@linkcode Deno.FsFile} instance.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "isFile",
                  "jsDoc": {
                    "doc": "True if this is info for a regular file. Mutually exclusive to\n`FileInfo.isDirectory` and `FileInfo.isSymlink`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2806,
                    "col": 4,
                    "byteIndex": 88873
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "isDirectory",
                  "jsDoc": {
                    "doc": "True if this is info for a regular directory. Mutually exclusive to\n`FileInfo.isFile` and `FileInfo.isSymlink`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2809,
                    "col": 4,
                    "byteIndex": 89024
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "isSymlink",
                  "jsDoc": {
                    "doc": "True if this is info for a symlink. Mutually exclusive to\n`FileInfo.isFile` and `FileInfo.isDirectory`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2812,
                    "col": 4,
                    "byteIndex": 89172
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "size",
                  "jsDoc": {
                    "doc": "The size of the file, in bytes."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2814,
                    "col": 4,
                    "byteIndex": 89239
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "mtime",
                  "jsDoc": {
                    "doc": "The last modification time of the file. This corresponds to the `mtime`\nfield from `stat` on Linux/Mac OS and `ftLastWriteTime` on Windows. This\nmay not be available on all platforms."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2818,
                    "col": 4,
                    "byteIndex": 89466
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Date",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Date"
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "atime",
                  "jsDoc": {
                    "doc": "The last access time of the file. This corresponds to the `atime`\nfield from `stat` on Unix and `ftLastAccessTime` on Windows. This may not\nbe available on all platforms."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2822,
                    "col": 4,
                    "byteIndex": 89686
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Date",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Date"
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "birthtime",
                  "jsDoc": {
                    "doc": "The creation time of the file. This corresponds to the `birthtime`\nfield from `stat` on Mac/BSD and `ftCreationTime` on Windows. This may\nnot be available on all platforms."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2826,
                    "col": 4,
                    "byteIndex": 89908
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Date",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Date"
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "dev",
                  "jsDoc": {
                    "doc": "ID of the device containing the file."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2828,
                    "col": 4,
                    "byteIndex": 89985
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "ino",
                  "jsDoc": {
                    "doc": "Inode number.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2832,
                    "col": 4,
                    "byteIndex": 90062
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "mode",
                  "jsDoc": {
                    "doc": "The underlying raw `st_mode` bits that contain the standard Unix\npermissions for this file/directory.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2837,
                    "col": 4,
                    "byteIndex": 90241
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "nlink",
                  "jsDoc": {
                    "doc": "Number of hard links pointing to this file.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2841,
                    "col": 4,
                    "byteIndex": 90356
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "uid",
                  "jsDoc": {
                    "doc": "User ID of the owner of this file.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2845,
                    "col": 4,
                    "byteIndex": 90463
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "gid",
                  "jsDoc": {
                    "doc": "Group ID of the owner of this file.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2849,
                    "col": 4,
                    "byteIndex": 90569
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "rdev",
                  "jsDoc": {
                    "doc": "Device ID of this file.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2853,
                    "col": 4,
                    "byteIndex": 90663
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "blksize",
                  "jsDoc": {
                    "doc": "Blocksize for filesystem I/O.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2857,
                    "col": 4,
                    "byteIndex": 90764
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "blocks",
                  "jsDoc": {
                    "doc": "Number of blocks allocated to the file, in 512-byte units.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2861,
                    "col": 4,
                    "byteIndex": 90897
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "isBlockDevice",
                  "jsDoc": {
                    "doc": "True if this is info for a block device.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2865,
                    "col": 4,
                    "byteIndex": 91012
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "isCharDevice",
                  "jsDoc": {
                    "doc": "True if this is info for a char device.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2869,
                    "col": 4,
                    "byteIndex": 91134
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "isFifo",
                  "jsDoc": {
                    "doc": "True if this is info for a fifo.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2873,
                    "col": 4,
                    "byteIndex": 91248
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "isSocket",
                  "jsDoc": {
                    "doc": "True if this is info for a socket.\n\n_Linux/Mac OS only._"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2877,
                    "col": 4,
                    "byteIndex": 91358
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "realPath",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2899,
              "col": 2,
              "byteIndex": 92110
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Resolves to the absolute normalized path, with symbolic links resolved.\n\n```ts\n// e.g. given /home/alice/file.txt and current directory /home/alice\nawait Deno.symlink(\"file.txt\", \"symlink_file.txt\");\nconst realPath = await Deno.realPath(\"./file.txt\");\nconst realSymLinkPath = await Deno.realPath(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\n\nAlso requires `allow-read` permission for the `CWD` if the target path is\nrelative.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "realPathSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2921,
              "col": 2,
              "byteIndex": 92900
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously returns absolute normalized path, with symbolic links\nresolved.\n\n```ts\n// e.g. given /home/alice/file.txt and current directory /home/alice\nDeno.symlinkSync(\"file.txt\", \"symlink_file.txt\");\nconst realPath = Deno.realPathSync(\"./file.txt\");\nconst realSymLinkPath = Deno.realPathSync(\"./symlink_file.txt\");\nconsole.log(realPath);  // outputs \"/home/alice/file.txt\"\nconsole.log(realSymLinkPath);  // outputs \"/home/alice/file.txt\"\n```\n\nRequires `allow-read` permission for the target path.\n\nAlso requires `allow-read` permission for the `CWD` if the target path is\nrelative.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "DirEntry",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2928,
              "col": 2,
              "byteIndex": 93121
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Information about a directory entry returned from {@linkcode Deno.readDir}\nand {@linkcode Deno.readDirSync}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "jsDoc": {
                    "doc": "The file name of the entry. It is just the entity name and does not\ninclude the full path."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2931,
                    "col": 4,
                    "byteIndex": 93262
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "isFile",
                  "jsDoc": {
                    "doc": "True if this is info for a regular file. Mutually exclusive to\n`DirEntry.isDirectory` and `DirEntry.isSymlink`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2934,
                    "col": 4,
                    "byteIndex": 93410
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "isDirectory",
                  "jsDoc": {
                    "doc": "True if this is info for a regular directory. Mutually exclusive to\n`DirEntry.isFile` and `DirEntry.isSymlink`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2937,
                    "col": 4,
                    "byteIndex": 93561
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "isSymlink",
                  "jsDoc": {
                    "doc": "True if this is info for a symlink. Mutually exclusive to\n`DirEntry.isFile` and `DirEntry.isDirectory`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 2940,
                    "col": 4,
                    "byteIndex": 93709
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "readDir",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2959,
              "col": 2,
              "byteIndex": 94162
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Reads the directory given by `path` and returns an async iterable of\n{@linkcode Deno.DirEntry}. The order of entries is not guaranteed.\n\n```ts\nfor await (const dirEntry of Deno.readDir(\"/\")) {\n  console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "AsyncIterable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "DirEntry",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "DirEntry"
                      }
                    }
                  ],
                  "typeName": "AsyncIterable"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "readDirSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2977,
              "col": 2,
              "byteIndex": 94667
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously reads the directory given by `path` and returns an iterable\nof {@linkcode Deno.DirEntry}. The order of entries is not guaranteed.\n\n```ts\nfor (const dirEntry of Deno.readDirSync(\"/\")) {\n  console.log(dirEntry.name);\n}\n```\n\nThrows error if `path` is not a directory.\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Iterable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "DirEntry",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "DirEntry"
                      }
                    }
                  ],
                  "typeName": "Iterable"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "copyFile",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 2994,
              "col": 2,
              "byteIndex": 95205
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Copies the contents and permissions of one file to another specified path,\nby default creating a new file if needed, else overwriting. Fails if target\npath is a directory or is unwritable.\n\n```ts\nawait Deno.copyFile(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on `fromPath`.\n\nRequires `allow-write` permission on `toPath`.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "fromPath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "toPath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "copyFileSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3014,
              "col": 2,
              "byteIndex": 95786
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously copies the contents and permissions of one file to another\nspecified path, by default creating a new file if needed, else overwriting.\nFails if target path is a directory or is unwritable.\n\n```ts\nDeno.copyFileSync(\"from.txt\", \"to.txt\");\n```\n\nRequires `allow-read` permission on `fromPath`.\n\nRequires `allow-write` permission on `toPath`.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "fromPath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "toPath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "readLink",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3033,
              "col": 2,
              "byteIndex": 96285
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Resolves to the full path destination of the named symbolic link.\n\n```ts\nawait Deno.symlink(\"./test.txt\", \"./test_link.txt\");\nconst target = await Deno.readLink(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link.\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "readLinkSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3050,
              "col": 2,
              "byteIndex": 96763
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously returns the full path destination of the named symbolic\nlink.\n\n```ts\nDeno.symlinkSync(\"./test.txt\", \"./test_link.txt\");\nconst target = Deno.readLinkSync(\"./test_link.txt\"); // full path of ./test.txt\n```\n\nThrows TypeError if called with a hard link.\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "lstat",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3067,
              "col": 2,
              "byteIndex": 97264
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. If\n`path` is a symlink, information for the symlink will be returned instead\nof what it points to.\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\nconst fileInfo = await Deno.lstat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "FileInfo",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "FileInfo"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "lstatSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3084,
              "col": 2,
              "byteIndex": 97777
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n`path`. If `path` is a symlink, information for the symlink will be\nreturned instead of what it points to.\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\nconst fileInfo = Deno.lstatSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "FileInfo",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FileInfo"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "stat",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3100,
              "col": 2,
              "byteIndex": 98201
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Resolves to a {@linkcode Deno.FileInfo} for the specified `path`. Will\nalways follow symlinks.\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\nconst fileInfo = await Deno.stat(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "FileInfo",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "FileInfo"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "statSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3116,
              "col": 2,
              "byteIndex": 98637
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously returns a {@linkcode Deno.FileInfo} for the specified\n`path`. Will always follow symlinks.\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\nconst fileInfo = Deno.statSync(\"hello.txt\");\nassert(fileInfo.isFile);\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "FileInfo",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FileInfo"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "WriteFileOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3122,
              "col": 2,
              "byteIndex": 98771
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options for writing to a file.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "append",
                  "jsDoc": {
                    "doc": "If set to `true`, will append to a file instead of overwriting previous\ncontents.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3127,
                    "col": 4,
                    "byteIndex": 98942
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "create",
                  "jsDoc": {
                    "doc": "Sets the option to allow creating a new file, if one doesn't already\nexist at the specified path.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3132,
                    "col": 4,
                    "byteIndex": 99110
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "createNew",
                  "jsDoc": {
                    "doc": "If set to `true`, no file, directory, or symlink is allowed to exist at\nthe target location. When createNew is set to `true`, `create` is ignored.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3137,
                    "col": 4,
                    "byteIndex": 99328
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "mode",
                  "jsDoc": {
                    "doc": "Permissions always applied to file."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3139,
                    "col": 4,
                    "byteIndex": 99400
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "signal",
                  "jsDoc": {
                    "doc": "An abort signal to allow cancellation of the file write operation.\n\nIf the signal becomes aborted the write file operation will be stopped\nand the promise returned will be rejected with an {@linkcode AbortError}."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3145,
                    "col": 4,
                    "byteIndex": 99668
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "AbortSignal",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "AbortSignal"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "writeFile",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3166,
              "col": 2,
              "byteIndex": 100478
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Write `data` to the given `path`, by default creating a new file if\nneeded, else overwriting.\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nawait Deno.writeFile(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nawait Deno.writeFile(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\nawait Deno.writeFile(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\nawait Deno.writeFile(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "data",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      },
                      {
                        "repr": "ReadableStream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Uint8Array",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Uint8Array"
                              }
                            }
                          ],
                          "typeName": "ReadableStream"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "WriteFileOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WriteFileOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "writeFileSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3190,
              "col": 2,
              "byteIndex": 101422
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously write `data` to the given `path`, by default creating a new\nfile if needed, else overwriting.\n\n```ts\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\\n\");\nDeno.writeFileSync(\"hello1.txt\", data);  // overwrite \"hello1.txt\" or create it\nDeno.writeFileSync(\"hello2.txt\", data, { create: false });  // only works if \"hello2.txt\" exists\nDeno.writeFileSync(\"hello3.txt\", data, { mode: 0o777 });  // set permissions on new file\nDeno.writeFileSync(\"hello4.txt\", data, { append: true });  // add data to the end of the file\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "data",
                  "optional": false,
                  "tsType": {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "WriteFileOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WriteFileOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "writeTextFile",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3209,
              "col": 2,
              "byteIndex": 101956
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Write string `data` to the given `path`, by default creating a new file if\nneeded, else overwriting.\n\n```ts\nawait Deno.writeTextFile(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "data",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "ReadableStream",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          ],
                          "typeName": "ReadableStream"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "WriteFileOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WriteFileOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "writeTextFileSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3228,
              "col": 2,
              "byteIndex": 102532
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously write string `data` to the given `path`, by default creating\na new file if needed, else overwriting.\n\n```ts\nDeno.writeTextFileSync(\"hello1.txt\", \"Hello world\\n\");  // overwrite \"hello1.txt\" or create it\n```\n\nRequires `allow-write` permission, and `allow-read` if `options.create` is\n`false`.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "data",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "WriteFileOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WriteFileOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "truncate",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3257,
              "col": 2,
              "byteIndex": 103322
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Truncates (or extends) the specified file, to reach the specified `len`.\nIf `len` is not specified then the entire file contents are truncated.\n\n### Truncate the entire file\n```ts\nawait Deno.truncate(\"my_file.txt\");\n```\n\n### Truncate part of the file\n\n```ts\nconst file = await Deno.makeTempFile();\nawait Deno.writeTextFile(file, \"Hello World\");\nawait Deno.truncate(file, 7);\nconst data = await Deno.readFile(file);\nconsole.log(new TextDecoder().decode(data));  // \"Hello W\"\n```\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "len",
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "truncateSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3284,
              "col": 2,
              "byteIndex": 104083
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously truncates (or extends) the specified file, to reach the\nspecified `len`. If `len` is not specified then the entire file contents\nare truncated.\n\n### Truncate the entire file\n\n```ts\nDeno.truncateSync(\"my_file.txt\");\n```\n\n### Truncate part of the file\n\n```ts\nconst file = Deno.makeTempFileSync();\nDeno.writeFileSync(file, new TextEncoder().encode(\"Hello World\"));\nDeno.truncateSync(file, 7);\nconst data = Deno.readFileSync(file);\nconsole.log(new TextDecoder().decode(data));\n```\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "len",
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "OpMetrics",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3290,
              "col": 2,
              "byteIndex": 104236
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime\n"
                },
                {
                  "kind": "deprecated",
                  "doc": "This will be removed in Deno 2.0."
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "opsDispatched",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3291,
                    "col": 4,
                    "byteIndex": 104269
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "opsDispatchedSync",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3292,
                    "col": 4,
                    "byteIndex": 104296
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "opsDispatchedAsync",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3293,
                    "col": 4,
                    "byteIndex": 104327
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "opsDispatchedAsyncUnref",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3294,
                    "col": 4,
                    "byteIndex": 104359
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "opsCompleted",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3295,
                    "col": 4,
                    "byteIndex": 104396
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "opsCompletedSync",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3296,
                    "col": 4,
                    "byteIndex": 104422
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "opsCompletedAsync",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3297,
                    "col": 4,
                    "byteIndex": 104452
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "opsCompletedAsyncUnref",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3298,
                    "col": 4,
                    "byteIndex": 104483
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "bytesSentControl",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3299,
                    "col": 4,
                    "byteIndex": 104519
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "bytesSentData",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3300,
                    "col": 4,
                    "byteIndex": 104549
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "bytesReceived",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3301,
                    "col": 4,
                    "byteIndex": 104576
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "FsEventFlag",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3317,
              "col": 2,
              "byteIndex": 105223
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Additional information for FsEvent objects with the \"other\" kind.\n\n- `\"rescan\"`: rescan notices indicate either a lapse in the events or a\n   change in the filesystem such that events received so far can no longer\n   be relied on to represent the state of the filesystem now. An\n   application that simply reacts to file changes may not care about this.\n   An application that keeps an in-memory representation of the filesystem\n   will need to care, and will need to refresh that representation directly\n   from the filesystem.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "rescan",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "rescan"
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "FsEvent",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3324,
              "col": 2,
              "byteIndex": 105392
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Represents a unique file system event yielded by a\n{@linkcode Deno.FsWatcher}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "kind",
                  "jsDoc": {
                    "doc": "The kind/type of the file system event."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3326,
                    "col": 4,
                    "byteIndex": 105474
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "any",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "any"
                        }
                      },
                      {
                        "repr": "access",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "access"
                        }
                      },
                      {
                        "repr": "create",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "create"
                        }
                      },
                      {
                        "repr": "modify",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "modify"
                        }
                      },
                      {
                        "repr": "rename",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "rename"
                        }
                      },
                      {
                        "repr": "remove",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "remove"
                        }
                      },
                      {
                        "repr": "other",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "other"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "paths",
                  "jsDoc": {
                    "doc": "An array of paths that are associated with the file system event."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3335,
                    "col": 4,
                    "byteIndex": 105677
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "flag",
                  "jsDoc": {
                    "doc": "Any additional flags associated with the event."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3337,
                    "col": 4,
                    "byteIndex": 105757
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "FsEventFlag",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FsEventFlag"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "FsWatcher",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3347,
              "col": 2,
              "byteIndex": 105995
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returned by {@linkcode Deno.watchFs}. It is an async iterator yielding up\nsystem events. To stop watching the file system by calling `.close()`\nmethod.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "AsyncIterable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "FsEvent",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "FsEvent"
                        }
                      }
                    ],
                    "typeName": "AsyncIterable"
                  }
                },
                {
                  "repr": "Disposable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Disposable"
                  }
                }
              ],
              "constructors": [],
              "methods": [
                {
                  "name": "close",
                  "jsDoc": {
                    "doc": "Stops watching the file system and closes the watcher resource."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3349,
                    "col": 4,
                    "byteIndex": 106146
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "return",
                  "jsDoc": {
                    "doc": "Stops watching the file system and closes the watcher resource."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3353,
                    "col": 4,
                    "byteIndex": 106252
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "value",
                      "optional": true,
                      "tsType": {
                        "repr": "any",
                        "kind": "keyword",
                        "keyword": "any"
                      }
                    }
                  ],
                  "optional": true,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "IteratorResult",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "FsEvent",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "FsEvent"
                                }
                              }
                            ],
                            "typeName": "IteratorResult"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "[Symbol.asyncIterator]",
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3354,
                    "col": 4,
                    "byteIndex": 106312
                  },
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "returnType": {
                    "repr": "AsyncIterableIterator",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "FsEvent",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "FsEvent"
                          }
                        }
                      ],
                      "typeName": "AsyncIterableIterator"
                    }
                  },
                  "typeParams": []
                }
              ],
              "properties": [],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "watchFs",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3396,
              "col": 2,
              "byteIndex": 107549
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Watch for file system events against one or more `paths`, which can be\nfiles or directories. These paths must exist already. One user action (e.g.\n`touch test.file`) can generate multiple file system events. Likewise,\none user action can result in multiple file paths in one event (e.g. `mv\nold_name.txt new_name.txt`).\n\nThe recursive option is `true` by default and, for directories, will watch\nthe specified directory and all sub directories.\n\nNote that the exact ordering of the events can vary between operating\nsystems.\n\n```ts\nconst watcher = Deno.watchFs(\"/\");\nfor await (const event of watcher) {\n   console.log(\">>>> event\", event);\n   // { kind: \"create\", paths: [ \"/foo.txt\" ] }\n}\n```\n\nCall `watcher.close()` to stop watching.\n\n```ts\nconst watcher = Deno.watchFs(\"/\");\n\nsetTimeout(() => {\n  watcher.close();\n}, 5000);\n\nfor await (const event of watcher) {\n   console.log(\">>>> event\", event);\n}\n```\n\nRequires `allow-read` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "paths",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "recursive",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 3398,
                            "col": 16,
                            "byteIndex": 107620
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "FsWatcher",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FsWatcher"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "Signal",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3405,
              "col": 2,
              "byteIndex": 107838
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Operating signals which can be listened for or sent to sub-processes. What\nsignals and what their standard behaviors are OS dependent.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "SIGABRT",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGABRT"
                    }
                  },
                  {
                    "repr": "SIGALRM",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGALRM"
                    }
                  },
                  {
                    "repr": "SIGBREAK",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGBREAK"
                    }
                  },
                  {
                    "repr": "SIGBUS",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGBUS"
                    }
                  },
                  {
                    "repr": "SIGCHLD",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGCHLD"
                    }
                  },
                  {
                    "repr": "SIGCONT",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGCONT"
                    }
                  },
                  {
                    "repr": "SIGEMT",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGEMT"
                    }
                  },
                  {
                    "repr": "SIGFPE",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGFPE"
                    }
                  },
                  {
                    "repr": "SIGHUP",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGHUP"
                    }
                  },
                  {
                    "repr": "SIGILL",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGILL"
                    }
                  },
                  {
                    "repr": "SIGINFO",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGINFO"
                    }
                  },
                  {
                    "repr": "SIGINT",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGINT"
                    }
                  },
                  {
                    "repr": "SIGIO",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGIO"
                    }
                  },
                  {
                    "repr": "SIGPOLL",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGPOLL"
                    }
                  },
                  {
                    "repr": "SIGUNUSED",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGUNUSED"
                    }
                  },
                  {
                    "repr": "SIGKILL",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGKILL"
                    }
                  },
                  {
                    "repr": "SIGPIPE",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGPIPE"
                    }
                  },
                  {
                    "repr": "SIGPROF",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGPROF"
                    }
                  },
                  {
                    "repr": "SIGPWR",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGPWR"
                    }
                  },
                  {
                    "repr": "SIGQUIT",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGQUIT"
                    }
                  },
                  {
                    "repr": "SIGSEGV",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGSEGV"
                    }
                  },
                  {
                    "repr": "SIGSTKFLT",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGSTKFLT"
                    }
                  },
                  {
                    "repr": "SIGSTOP",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGSTOP"
                    }
                  },
                  {
                    "repr": "SIGSYS",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGSYS"
                    }
                  },
                  {
                    "repr": "SIGTERM",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGTERM"
                    }
                  },
                  {
                    "repr": "SIGTRAP",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGTRAP"
                    }
                  },
                  {
                    "repr": "SIGTSTP",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGTSTP"
                    }
                  },
                  {
                    "repr": "SIGTTIN",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGTTIN"
                    }
                  },
                  {
                    "repr": "SIGTTOU",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGTTOU"
                    }
                  },
                  {
                    "repr": "SIGURG",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGURG"
                    }
                  },
                  {
                    "repr": "SIGUSR1",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGUSR1"
                    }
                  },
                  {
                    "repr": "SIGUSR2",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGUSR2"
                    }
                  },
                  {
                    "repr": "SIGVTALRM",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGVTALRM"
                    }
                  },
                  {
                    "repr": "SIGWINCH",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGWINCH"
                    }
                  },
                  {
                    "repr": "SIGXCPU",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGXCPU"
                    }
                  },
                  {
                    "repr": "SIGXFSZ",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SIGXFSZ"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "addSignalListener",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3459,
              "col": 2,
              "byteIndex": 108787
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Registers the given function as a listener of the given signal event.\n\n```ts\nDeno.addSignalListener(\n  \"SIGTERM\",\n  () => {\n    console.log(\"SIGTERM!\")\n  }\n);\n```\n\n_Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\nare supported.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "signal",
                  "optional": false,
                  "tsType": {
                    "repr": "Signal",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Signal"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "handler",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "params": [],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "removeSignalListener",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3477,
              "col": 2,
              "byteIndex": 109314
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Removes the given signal listener that has been registered with\n{@linkcode Deno.addSignalListener}.\n\n```ts\nconst listener = () => {\n  console.log(\"SIGTERM!\")\n};\nDeno.addSignalListener(\"SIGTERM\", listener);\nDeno.removeSignalListener(\"SIGTERM\", listener);\n```\n\n_Note_: On Windows only `\"SIGINT\"` (CTRL+C) and `\"SIGBREAK\"` (CTRL+Break)\nare supported.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "signal",
                  "optional": false,
                  "tsType": {
                    "repr": "Signal",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Signal"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "handler",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "params": [],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "Command",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3549,
              "col": 2,
              "byteIndex": 111490
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Create a child process.\n\nIf any stdio options are not set to `\"piped\"`, accessing the corresponding\nfield on the `Command` or its `CommandOutput` will throw a `TypeError`.\n\nIf `stdin` is set to `\"piped\"`, the `stdin` {@linkcode WritableStream}\nneeds to be closed manually.\n\n`Command` acts as a builder. Each call to {@linkcode Command.spawn} or\n{@linkcode Command.output} will spawn a new subprocess.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Spawn a subprocess and pipe the output to a file\n\n```ts\nconst command = new Deno.Command(Deno.execPath(), {\n  args: [\n    \"eval\",\n    \"console.log('Hello World')\",\n  ],\n  stdin: \"piped\",\n  stdout: \"piped\",\n});\nconst child = command.spawn();\n\n// open a file and pipe the subprocess output to it.\nchild.stdout.pipeTo(\n  Deno.openSync(\"output\", { write: true, create: true }).writable,\n);\n\n// manually close stdin\nchild.stdin.close();\nconst status = await child.status;\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Spawn a subprocess and collect its output\n\n```ts\nconst command = new Deno.Command(Deno.execPath(), {\n  args: [\n    \"eval\",\n    \"console.log('hello'); console.error('world')\",\n  ],\n});\nconst { code, stdout, stderr } = await command.output();\nconsole.assert(code === 0);\nconsole.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\nconsole.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Spawn a subprocess and collect its output synchronously\n\n```ts\nconst command = new Deno.Command(Deno.execPath(), {\n  args: [\n    \"eval\",\n    \"console.log('hello'); console.error('world')\",\n  ],\n});\nconst { code, stdout, stderr } = command.outputSync();\nconsole.assert(code === 0);\nconsole.assert(\"hello\\n\" === new TextDecoder().decode(stdout));\nconsole.assert(\"world\\n\" === new TextDecoder().decode(stderr));\n```\n"
                },
                {
                  "kind": "tags",
                  "tags": [
                    "allow-run"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Subprocess"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [
                {
                  "accessibility": null,
                  "name": "constructor",
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "command",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "URL",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "URL"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": true,
                      "tsType": {
                        "repr": "CommandOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "CommandOptions"
                        }
                      }
                    }
                  ],
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3550,
                    "col": 4,
                    "byteIndex": 111517
                  }
                }
              ],
              "properties": [],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Executes the {@linkcode Deno.Command}, waiting for it to finish and\ncollecting all of its output.\n\nWill throw an error if `stdin: \"piped\"` is set.\n\nIf options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\ncorresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "output",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "CommandOutput",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "CommandOutput"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3560,
                    "col": 4,
                    "byteIndex": 111946
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Synchronously executes the {@linkcode Deno.Command}, waiting for it to\nfinish and collecting all of its output.\n\nWill throw an error if `stdin: \"piped\"` is set.\n\nIf options `stdout` or `stderr` are not set to `\"piped\"`, accessing the\ncorresponding field on {@linkcode Deno.CommandOutput} will throw a `TypeError`."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "outputSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "CommandOutput",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "CommandOutput"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3570,
                    "col": 4,
                    "byteIndex": 112361
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Spawns a streamable subprocess, allowing to use the other methods."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "spawn",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "ChildProcess",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ChildProcess"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3574,
                    "col": 4,
                    "byteIndex": 112484
                  }
                }
              ],
              "extends": null,
              "implements": [],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "ChildProcess",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3583,
              "col": 2,
              "byteIndex": 112656
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The interface for handling a child process returned from\n{@linkcode Deno.Command.spawn}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Subprocess"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [],
              "properties": [
                {
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "pid",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3587,
                    "col": 4,
                    "byteIndex": 112852
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Get the status of the child."
                  },
                  "tsType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "CommandStatus",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "CommandStatus"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "status",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3589,
                    "col": 4,
                    "byteIndex": 112918
                  }
                }
              ],
              "indexSignatures": [],
              "methods": [
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "stdin",
                  "kind": "getter",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "WritableStream",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        ],
                        "typeName": "WritableStream"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3584,
                    "col": 4,
                    "byteIndex": 112715
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "stdout",
                  "kind": "getter",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "ReadableStream",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        ],
                        "typeName": "ReadableStream"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3585,
                    "col": 4,
                    "byteIndex": 112760
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "stderr",
                  "kind": "getter",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "ReadableStream",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          }
                        ],
                        "typeName": "ReadableStream"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3586,
                    "col": 4,
                    "byteIndex": 112806
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Waits for the child to exit completely, returning all its output and\nstatus."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "output",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "CommandOutput",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "CommandOutput"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3593,
                    "col": 4,
                    "byteIndex": 113059
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Kills the process with given {@linkcode Deno.Signal}.\n\nDefaults to `SIGTERM` if no signal is provided.\n",
                    "tags": [
                      {
                        "kind": "param",
                        "name": "signo",
                        "default": "\"SIGTERM\""
                      }
                    ]
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "kill",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "signo",
                        "optional": true,
                        "tsType": {
                          "repr": "Signal",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Signal"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3600,
                    "col": 4,
                    "byteIndex": 113268
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Ensure that the status of the child process prevents the Deno process\nfrom exiting."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "ref",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3604,
                    "col": 4,
                    "byteIndex": 113403
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Ensure that the status of the child process does not block the Deno\nprocess from exiting."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "unref",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3607,
                    "col": 4,
                    "byteIndex": 113528
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "[Symbol.asyncDispose]",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3609,
                    "col": 4,
                    "byteIndex": 113548
                  }
                }
              ],
              "extends": null,
              "implements": [
                {
                  "repr": "AsyncDisposable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AsyncDisposable"
                  }
                }
              ],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "CommandOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3617,
              "col": 2,
              "byteIndex": 113707
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when calling {@linkcode Deno.Command}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Subprocess"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "args",
                  "jsDoc": {
                    "doc": "Arguments to pass to the process."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3619,
                    "col": 4,
                    "byteIndex": 113790
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "cwd",
                  "jsDoc": {
                    "doc": "The working directory of the process.\n\nIf not specified, the `cwd` of the parent process is used."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3625,
                    "col": 4,
                    "byteIndex": 113945
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "clearEnv",
                  "jsDoc": {
                    "doc": "Clear environmental variables from parent process.\n\nDoesn't guarantee that only `env` variables are present, as the OS may\nset environmental variables for processes.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3634,
                    "col": 4,
                    "byteIndex": 114209
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "env",
                  "jsDoc": {
                    "doc": "Environmental variables to pass to the subprocess."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3636,
                    "col": 4,
                    "byteIndex": 114295
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "uid",
                  "jsDoc": {
                    "doc": "Sets the child process’s user ID. This translates to a setuid call in the\nchild process. Failure in the set uid call will cause the spawn to fail."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3641,
                    "col": 4,
                    "byteIndex": 114508
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "gid",
                  "jsDoc": {
                    "doc": "Similar to `uid`, but sets the group ID of the child process."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3643,
                    "col": 4,
                    "byteIndex": 114599
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "signal",
                  "jsDoc": {
                    "doc": "An {@linkcode AbortSignal} that allows closing the process using the\ncorresponding {@linkcode AbortController} by sending the process a\nSIGTERM signal.\n\nNot supported in {@linkcode Deno.Command.outputSync}."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3651,
                    "col": 4,
                    "byteIndex": 114874
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "AbortSignal",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "AbortSignal"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "stdin",
                  "jsDoc": {
                    "doc": "How `stdin` of the spawned process should be handled.\n\nDefaults to `\"inherit\"` for `output` & `outputSync`,\nand `\"inherit\"` for `spawn`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3657,
                    "col": 4,
                    "byteIndex": 115069
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "piped",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "piped"
                        }
                      },
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "null"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "stdout",
                  "jsDoc": {
                    "doc": "How `stdout` of the spawned process should be handled.\n\nDefaults to `\"piped\"` for `output` & `outputSync`,\nand `\"inherit\"` for `spawn`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3662,
                    "col": 4,
                    "byteIndex": 115278
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "piped",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "piped"
                        }
                      },
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "null"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "stderr",
                  "jsDoc": {
                    "doc": "How `stderr` of the spawned process should be handled.\n\nDefaults to `\"piped\"` for `output` & `outputSync`,\nand `\"inherit\"` for `spawn`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3667,
                    "col": 4,
                    "byteIndex": 115488
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "piped",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "piped"
                        }
                      },
                      {
                        "repr": "inherit",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "inherit"
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "null"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "windowsRawArguments",
                  "jsDoc": {
                    "doc": "Skips quoting and escaping of the arguments on windows. This option\nis ignored on non-windows platforms.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3673,
                    "col": 4,
                    "byteIndex": 115686
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "CommandStatus",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3679,
              "col": 2,
              "byteIndex": 115762
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Subprocess"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "success",
                  "jsDoc": {
                    "doc": "If the child process exits with a 0 status code, `success` will be set\nto `true`, otherwise `false`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3682,
                    "col": 4,
                    "byteIndex": 115918
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "code",
                  "jsDoc": {
                    "doc": "The exit code of the child process."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3684,
                    "col": 4,
                    "byteIndex": 115987
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "signal",
                  "jsDoc": {
                    "doc": "The signal associated with the child process."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3686,
                    "col": 4,
                    "byteIndex": 116062
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Signal",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Signal"
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "CommandOutput",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3696,
              "col": 2,
              "byteIndex": 116316
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The interface returned from calling {@linkcode Deno.Command.output} or\n{@linkcode Deno.Command.outputSync} which represents the result of spawning the\nchild process.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Subprocess"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "CommandStatus",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "CommandStatus"
                  }
                }
              ],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "stdout",
                  "jsDoc": {
                    "doc": "The buffered output from the child process' `stdout`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3698,
                    "col": 4,
                    "byteIndex": 116440
                  },
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "stderr",
                  "jsDoc": {
                    "doc": "The buffered output from the child process' `stderr`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3700,
                    "col": 4,
                    "byteIndex": 116538
                  },
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "InspectOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3706,
              "col": 2,
              "byteIndex": 116679
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Option which can be specified when performing {@linkcode Deno.inspect}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "I/O"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "colors",
                  "jsDoc": {
                    "doc": "Stylize output with ANSI colors.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3710,
                    "col": 4,
                    "byteIndex": 116792
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "compact",
                  "jsDoc": {
                    "doc": "Try to fit more than one entry of a collection on the same line.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3714,
                    "col": 4,
                    "byteIndex": 116920
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "depth",
                  "jsDoc": {
                    "doc": "Traversal depth for nested objects.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "4"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3718,
                    "col": 4,
                    "byteIndex": 117017
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "breakLength",
                  "jsDoc": {
                    "doc": "The maximum length for an inspection to take up a single line.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "80"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3722,
                    "col": 4,
                    "byteIndex": 117139
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "escapeSequences",
                  "jsDoc": {
                    "doc": "Whether or not to escape sequences.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3726,
                    "col": 4,
                    "byteIndex": 117242
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "iterableLimit",
                  "jsDoc": {
                    "doc": "The maximum number of iterable entries to print.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "100"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3730,
                    "col": 4,
                    "byteIndex": 117362
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "showProxy",
                  "jsDoc": {
                    "doc": "Show a Proxy's target and handler.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3734,
                    "col": 4,
                    "byteIndex": 117467
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "sorted",
                  "jsDoc": {
                    "doc": "Sort Object, Set and Map entries by key.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3738,
                    "col": 4,
                    "byteIndex": 117575
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "trailingComma",
                  "jsDoc": {
                    "doc": "Add a trailing comma for multiline collections.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3742,
                    "col": 4,
                    "byteIndex": 117687
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "getters",
                  "jsDoc": {
                    "doc": "Evaluate the result of calling getters.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3746,
                    "col": 4,
                    "byteIndex": 117798
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "showHidden",
                  "jsDoc": {
                    "doc": "Show an object's non-enumerable properties.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3750,
                    "col": 4,
                    "byteIndex": 117907
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "strAbbreviateSize",
                  "jsDoc": {
                    "doc": "The maximum length of a string before it is truncated with an\nellipsis."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3753,
                    "col": 4,
                    "byteIndex": 118023
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "inspect",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3793,
              "col": 2,
              "byteIndex": 119134
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Converts the input into a string that has the same format as printed by\n`console.log()`.\n\n```ts\nconst obj = {\n  a: 10,\n  b: \"hello\",\n};\nconst objAsString = Deno.inspect(obj); // { a: 10, b: \"hello\" }\nconsole.log(obj);  // prints same value as objAsString, e.g. { a: 10, b: \"hello\" }\n```\n\nA custom inspect functions can be registered on objects, via the symbol\n`Symbol.for(\"Deno.customInspect\")`, to control and customize the output\nof `inspect()` or when using `console` logging:\n\n```ts\nclass A {\n  x = 10;\n  y = \"hello\";\n  [Symbol.for(\"Deno.customInspect\")]() {\n    return `x=${this.x}, y=${this.y}`;\n  }\n}\n\nconst inStringFormat = Deno.inspect(new A()); // \"x=10, y=hello\"\nconsole.log(inStringFormat);  // prints \"x=10, y=hello\"\n```\n\nA depth can be specified by using the `depth` option:\n\n```ts\nDeno.inspect({a: {b: {c: {d: 'hello'}}}}, {depth: 2}); // { a: { b: [Object] } }\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "I/O"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "value",
                  "optional": false,
                  "tsType": {
                    "repr": "unknown",
                    "kind": "keyword",
                    "keyword": "unknown"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "InspectOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "InspectOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "PermissionName",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3799,
              "col": 2,
              "byteIndex": 119313
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The name of a privileged feature which needs permission.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "run",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "run"
                    }
                  },
                  {
                    "repr": "read",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "read"
                    }
                  },
                  {
                    "repr": "write",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "write"
                    }
                  },
                  {
                    "repr": "net",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "net"
                    }
                  },
                  {
                    "repr": "env",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "env"
                    }
                  },
                  {
                    "repr": "sys",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "sys"
                    }
                  },
                  {
                    "repr": "ffi",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "ffi"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "PermissionState",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3816,
              "col": 2,
              "byteIndex": 119711
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The current status of the permission:\n\n- `\"granted\"` - the permission has been granted.\n- `\"denied\"` - the permission has been explicitly denied.\n- `\"prompt\"` - the permission has not explicitly granted nor denied.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "granted",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "granted"
                    }
                  },
                  {
                    "repr": "denied",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "denied"
                    }
                  },
                  {
                    "repr": "prompt",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "prompt"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "RunPermissionDescriptor",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3827,
              "col": 2,
              "byteIndex": 120224
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The permission descriptor for the `allow-run` and `deny-run` permissions, which controls\naccess to what sub-processes can be executed by Deno. The option `command`\nallows scoping the permission to a specific executable.\n\n**Warning, in practice, `allow-run` is effectively the same as `allow-all`\nin the sense that malicious code could execute any arbitrary code on the\nhost.**\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3828,
                    "col": 4,
                    "byteIndex": 120271
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "run",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "run"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "command",
                  "jsDoc": {
                    "doc": "An `allow-run` or `deny-run` permission can be scoped to a specific executable,\nwhich would be relative to the start-up CWD of the Deno CLI."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3831,
                    "col": 4,
                    "byteIndex": 120447
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "ReadPermissionDescriptor",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3843,
              "col": 2,
              "byteIndex": 120953
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The permission descriptor for the `allow-read` and `deny-read` permissions, which controls\naccess to reading resources from the local host. The option `path` allows\nscoping the permission to a specific path (and if the path is a directory\nany sub paths).\n\nPermission granted under `allow-read` only allows runtime code to attempt\nto read, the underlying operating system may apply additional permissions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3844,
                    "col": 4,
                    "byteIndex": 121001
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "read",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "read"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "path",
                  "jsDoc": {
                    "doc": "An `allow-read` or `deny-read` permission can be scoped to a specific path (and if\nthe path is a directory, any sub paths)."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3847,
                    "col": 4,
                    "byteIndex": 121161
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "WritePermissionDescriptor",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3859,
              "col": 2,
              "byteIndex": 121670
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The permission descriptor for the `allow-write` and `deny-write` permissions, which\ncontrols access to writing to resources from the local host. The option\n`path` allow scoping the permission to a specific path (and if the path is\na directory any sub paths).\n\nPermission granted under `allow-write` only allows runtime code to attempt\nto write, the underlying operating system may apply additional permissions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3860,
                    "col": 4,
                    "byteIndex": 121719
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "write",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "write"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "path",
                  "jsDoc": {
                    "doc": "An `allow-write` or `deny-write` permission can be scoped to a specific path (and if\nthe path is a directory, any sub paths)."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3863,
                    "col": 4,
                    "byteIndex": 121882
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "NetPermissionDescriptor",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3872,
              "col": 2,
              "byteIndex": 122236
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The permission descriptor for the `allow-net` and `deny-net` permissions, which controls\naccess to opening network ports and connecting to remote hosts via the\nnetwork. The option `host` allows scoping the permission for outbound\nconnection to a specific host and port.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3873,
                    "col": 4,
                    "byteIndex": 122283
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "net",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "net"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "host",
                  "jsDoc": {
                    "doc": "Optional host string of the form `\"<hostname>[:<port>]\"`. Examples:\n\n     \"github.com\"\n     \"deno.land:8080\""
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3879,
                    "col": 4,
                    "byteIndex": 122445
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "EnvPermissionDescriptor",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3889,
              "col": 2,
              "byteIndex": 122840
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The permission descriptor for the `allow-env` and `deny-env` permissions, which controls\naccess to being able to read and write to the process environment variables\nas well as access other information about the environment. The option\n`variable` allows scoping the permission to a specific environment\nvariable.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3890,
                    "col": 4,
                    "byteIndex": 122887
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "env",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "env"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "variable",
                  "jsDoc": {
                    "doc": "Optional environment variable name (e.g. `PATH`)."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3892,
                    "col": 4,
                    "byteIndex": 122965
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "SysPermissionDescriptor",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3901,
              "col": 2,
              "byteIndex": 123312
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The permission descriptor for the `allow-sys` and `deny-sys` permissions, which controls\naccess to sensitive host system information, which malicious code might\nattempt to exploit. The option `kind` allows scoping the permission to a\nspecific piece of information.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3902,
                    "col": 4,
                    "byteIndex": 123359
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "sys",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "sys"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "kind",
                  "jsDoc": {
                    "doc": "The specific information to scope the permission to."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3904,
                    "col": 4,
                    "byteIndex": 123440
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "loadavg",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "loadavg"
                        }
                      },
                      {
                        "repr": "hostname",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "hostname"
                        }
                      },
                      {
                        "repr": "systemMemoryInfo",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "systemMemoryInfo"
                        }
                      },
                      {
                        "repr": "networkInterfaces",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "networkInterfaces"
                        }
                      },
                      {
                        "repr": "osRelease",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "osRelease"
                        }
                      },
                      {
                        "repr": "osUptime",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "osUptime"
                        }
                      },
                      {
                        "repr": "uid",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "uid"
                        }
                      },
                      {
                        "repr": "gid",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "gid"
                        }
                      },
                      {
                        "repr": "username",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "username"
                        }
                      },
                      {
                        "repr": "cpus",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "cpus"
                        }
                      },
                      {
                        "repr": "homedir",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "homedir"
                        }
                      },
                      {
                        "repr": "statfs",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "statfs"
                        }
                      },
                      {
                        "repr": "getPriority",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "getPriority"
                        }
                      },
                      {
                        "repr": "setPriority",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "setPriority"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "FfiPermissionDescriptor",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3928,
              "col": 2,
              "byteIndex": 124129
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The permission descriptor for the `allow-ffi` and `deny-ffi` permissions, which controls\naccess to loading _foreign_ code and interfacing with it via the\n[Foreign Function Interface API](https://docs.deno.com/runtime/manual/runtime/ffi_api)\navailable in Deno.  The option `path` allows scoping the permission to a\nspecific path on the host.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3929,
                    "col": 4,
                    "byteIndex": 124176
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "ffi",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "ffi"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "path",
                  "jsDoc": {
                    "doc": "Optional path on the local host to scope the permission to."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3931,
                    "col": 4,
                    "byteIndex": 124264
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "PermissionDescriptor",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3942,
              "col": 2,
              "byteIndex": 124546
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Permission descriptors which define a permission and can be queried,\nrequested, or revoked.\n\nView the specifics of the individual descriptors for more information about\neach permission kind.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "RunPermissionDescriptor",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RunPermissionDescriptor"
                    }
                  },
                  {
                    "repr": "ReadPermissionDescriptor",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ReadPermissionDescriptor"
                    }
                  },
                  {
                    "repr": "WritePermissionDescriptor",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WritePermissionDescriptor"
                    }
                  },
                  {
                    "repr": "NetPermissionDescriptor",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NetPermissionDescriptor"
                    }
                  },
                  {
                    "repr": "EnvPermissionDescriptor",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnvPermissionDescriptor"
                    }
                  },
                  {
                    "repr": "SysPermissionDescriptor",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "SysPermissionDescriptor"
                    }
                  },
                  {
                    "repr": "FfiPermissionDescriptor",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FfiPermissionDescriptor"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "PermissionStatusEventMap",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3955,
              "col": 2,
              "byteIndex": 124946
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The interface which defines what event types are supported by\n{@linkcode PermissionStatus} instances.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "change",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3956,
                    "col": 4,
                    "byteIndex": 124994
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Event",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Event"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "PermissionStatus",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 3963,
              "col": 2,
              "byteIndex": 125206
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An {@linkcode EventTarget} returned from the {@linkcode Deno.permissions}\nAPI which can provide updates to any state changes of the permission.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [],
              "properties": [
                {
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "any",
                              "kind": "keyword",
                              "keyword": "any"
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "this",
                                "optional": false,
                                "tsType": {
                                  "repr": "PermissionStatus",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "PermissionStatus"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "ev",
                                "optional": false,
                                "tsType": {
                                  "repr": "Event",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "Event"
                                  }
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "readonly": false,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "onchange",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3965,
                    "col": 4,
                    "byteIndex": 125302
                  }
                },
                {
                  "tsType": {
                    "repr": "PermissionState",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PermissionState"
                    }
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "state",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3966,
                    "col": 4,
                    "byteIndex": 125369
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Describes if permission is only granted partially, eg. an access\nmight be granted to \"/foo\" directory, but denied for \"/foo/bar\".\nIn such case this field will be set to `true` when querying for\nread permissions of \"/foo\" directory."
                  },
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "partial",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3973,
                    "col": 4,
                    "byteIndex": 125682
                  }
                }
              ],
              "indexSignatures": [],
              "methods": [
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "addEventListener",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "type",
                        "optional": false,
                        "tsType": {
                          "repr": "K",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "K"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "listener",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "any",
                              "kind": "keyword",
                              "keyword": "any"
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "this",
                                "optional": false,
                                "tsType": {
                                  "repr": "PermissionStatus",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "PermissionStatus"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "ev",
                                "optional": false,
                                "tsType": {
                                  "repr": "",
                                  "kind": "indexedAccess",
                                  "indexedAccess": {
                                    "readonly": false,
                                    "objType": {
                                      "repr": "PermissionStatusEventMap",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "PermissionStatusEventMap"
                                      }
                                    },
                                    "indexType": {
                                      "repr": "K",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "K"
                                      }
                                    }
                                  }
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "boolean",
                              "kind": "keyword",
                              "keyword": "boolean"
                            },
                            {
                              "repr": "AddEventListenerOptions",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "AddEventListenerOptions"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "K",
                        "constraint": {
                          "repr": "",
                          "kind": "typeOperator",
                          "typeOperator": {
                            "operator": "keyof",
                            "tsType": {
                              "repr": "PermissionStatusEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "PermissionStatusEventMap"
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3974,
                    "col": 4,
                    "byteIndex": 125713
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "addEventListener",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "type",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "listener",
                        "optional": false,
                        "tsType": {
                          "repr": "EventListenerOrEventListenerObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EventListenerOrEventListenerObject"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "boolean",
                              "kind": "keyword",
                              "keyword": "boolean"
                            },
                            {
                              "repr": "AddEventListenerOptions",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "AddEventListenerOptions"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3982,
                    "col": 4,
                    "byteIndex": 125963
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "removeEventListener",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "type",
                        "optional": false,
                        "tsType": {
                          "repr": "K",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "K"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "listener",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "any",
                              "kind": "keyword",
                              "keyword": "any"
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "this",
                                "optional": false,
                                "tsType": {
                                  "repr": "PermissionStatus",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "PermissionStatus"
                                  }
                                }
                              },
                              {
                                "kind": "identifier",
                                "name": "ev",
                                "optional": false,
                                "tsType": {
                                  "repr": "",
                                  "kind": "indexedAccess",
                                  "indexedAccess": {
                                    "readonly": false,
                                    "objType": {
                                      "repr": "PermissionStatusEventMap",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "PermissionStatusEventMap"
                                      }
                                    },
                                    "indexType": {
                                      "repr": "K",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "K"
                                      }
                                    }
                                  }
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "boolean",
                              "kind": "keyword",
                              "keyword": "boolean"
                            },
                            {
                              "repr": "EventListenerOptions",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "EventListenerOptions"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "K",
                        "constraint": {
                          "repr": "",
                          "kind": "typeOperator",
                          "typeOperator": {
                            "operator": "keyof",
                            "tsType": {
                              "repr": "PermissionStatusEventMap",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "PermissionStatusEventMap"
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3987,
                    "col": 4,
                    "byteIndex": 126121
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "removeEventListener",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "type",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "listener",
                        "optional": false,
                        "tsType": {
                          "repr": "EventListenerOrEventListenerObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EventListenerOrEventListenerObject"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "boolean",
                              "kind": "keyword",
                              "keyword": "boolean"
                            },
                            {
                              "repr": "EventListenerOptions",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "EventListenerOptions"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 3995,
                    "col": 4,
                    "byteIndex": 126371
                  }
                }
              ],
              "extends": "EventTarget",
              "implements": [],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "Permissions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4023,
              "col": 2,
              "byteIndex": 127666
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Deno's permission management API.\n\nThe class which provides the interface for the {@linkcode Deno.permissions}\nglobal instance and is based on the web platform\n[Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\nthough some proposed parts of the API which are useful in a server side\nruntime context were removed or abandoned in the web platform specification\nwhich is why it was chosen to locate it in the {@linkcode Deno} namespace\ninstead.\n\nBy default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\nsend and receive text), then the CLI will prompt the user to grant\npermission when an un-granted permission is requested. This behavior can\nbe changed by using the `--no-prompt` command at startup. When prompting\nthe CLI will request the narrowest permission possible, potentially making\nit annoying to the user. The permissions APIs allow the code author to\nrequest a wider set of permissions at one time in order to provide a better\nuser experience.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [],
              "properties": [],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Resolves to the current status of a permission.\n\nNote, if the permission is already granted, `request()` will not prompt\nthe user again, therefore `query()` is only necessary if you are going\nto react differently existing permissions without wanting to modify them\nor prompt the user to modify them.\n\n```ts\nconst status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "query",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "desc",
                        "optional": false,
                        "tsType": {
                          "repr": "PermissionDescriptor",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PermissionDescriptor"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "PermissionStatus",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "PermissionStatus"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4036,
                    "col": 4,
                    "byteIndex": 128196
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Returns the current status of a permission.\n\nNote, if the permission is already granted, `request()` will not prompt\nthe user again, therefore `querySync()` is only necessary if you are going\nto react differently existing permissions without wanting to modify them\nor prompt the user to modify them.\n\n```ts\nconst status = Deno.permissions.querySync({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "querySync",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "desc",
                        "optional": false,
                        "tsType": {
                          "repr": "PermissionDescriptor",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PermissionDescriptor"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "PermissionStatus",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "PermissionStatus"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4050,
                    "col": 4,
                    "byteIndex": 128760
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Revokes a permission, and resolves to the state of the permission.\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\n\nconst status = await Deno.permissions.revoke({ name: \"run\" });\nassert(status.state !== \"granted\")\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "revoke",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "desc",
                        "optional": false,
                        "tsType": {
                          "repr": "PermissionDescriptor",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PermissionDescriptor"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "PermissionStatus",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "PermissionStatus"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4061,
                    "col": 4,
                    "byteIndex": 129104
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Revokes a permission, and returns the state of the permission.\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\n\nconst status = Deno.permissions.revokeSync({ name: \"run\" });\nassert(status.state !== \"granted\")\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "revokeSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "desc",
                        "optional": false,
                        "tsType": {
                          "repr": "PermissionDescriptor",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PermissionDescriptor"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "PermissionStatus",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "PermissionStatus"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4072,
                    "col": 4,
                    "byteIndex": 129448
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Requests the permission, and resolves to the state of the permission.\n\nIf the permission is already granted, the user will not be prompted to\ngrant the permission again.\n\n```ts\nconst status = await Deno.permissions.request({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "request",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "desc",
                        "optional": false,
                        "tsType": {
                          "repr": "PermissionDescriptor",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PermissionDescriptor"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "PermissionStatus",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "PermissionStatus"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4088,
                    "col": 4,
                    "byteIndex": 129992
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Requests the permission, and returns the state of the permission.\n\nIf the permission is already granted, the user will not be prompted to\ngrant the permission again.\n\n```ts\nconst status = Deno.permissions.requestSync({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "requestSync",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "desc",
                        "optional": false,
                        "tsType": {
                          "repr": "PermissionDescriptor",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PermissionDescriptor"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "PermissionStatus",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "PermissionStatus"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4104,
                    "col": 4,
                    "byteIndex": 130536
                  }
                }
              ],
              "extends": null,
              "implements": [],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "permissions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4179,
              "col": 15,
              "byteIndex": 133075
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Deno's permission management API.\n\nIt is a singleton instance of the {@linkcode Permissions} object and is\nbased on the web platform\n[Permissions API](https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API),\nthough some proposed parts of the API which are useful in a server side\nruntime context were removed or abandoned in the web platform specification\nwhich is why it was chosen to locate it in the {@linkcode Deno} namespace\ninstead.\n\nBy default, if the `stdin`/`stdout` is TTY for the Deno CLI (meaning it can\nsend and receive text), then the CLI will prompt the user to grant\npermission when an un-granted permission is requested. This behavior can\nbe changed by using the `--no-prompt` command at startup. When prompting\nthe CLI will request the narrowest permission possible, potentially making\nit annoying to the user. The permissions APIs allow the code author to\nrequest a wider set of permissions at one time in order to provide a better\nuser experience.\n\nRequesting already granted permissions will not prompt the user and will\nreturn that the permission was granted.\n\n### Querying\n\n```ts\nconst status = await Deno.permissions.query({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```\n\n```ts\nconst status = Deno.permissions.querySync({ name: \"read\", path: \"/etc\" });\nconsole.log(status.state);\n```\n\n### Revoking\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\n\nconst status = await Deno.permissions.revoke({ name: \"run\" });\nassert(status.state !== \"granted\")\n```\n\n```ts\nimport { assert } from \"jsr:@std/assert\";\n\nconst status = Deno.permissions.revokeSync({ name: \"run\" });\nassert(status.state !== \"granted\")\n```\n\n### Requesting\n\n```ts\nconst status = await Deno.permissions.request({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```\n\n```ts\nconst status = Deno.permissions.requestSync({ name: \"env\" });\nif (status.state === \"granted\") {\n  console.log(\"'env' permission is granted.\");\n} else {\n  console.log(\"'env' permission is denied.\");\n}\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Permissions"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "Permissions",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Permissions"
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "build",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4192,
              "col": 15,
              "byteIndex": 133562
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Information related to the build of the current Deno runtime.\n\nUsers are discouraged from code branching based on this information, as\nassumptions about what is available in what build environment might change\nover time. Developers should specifically sniff out the features they\nintend to use.\n\nThe intended use for the information is for logging and debugging purposes.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "target",
                      "jsDoc": {
                        "doc": "The [LLVM](https://llvm.org/) target triple, which is the combination\nof `${arch}-${vendor}-${os}` and represent the specific build target that\nthe current runtime was built for."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 4196,
                        "col": 4,
                        "byteIndex": 133779
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "arch",
                      "jsDoc": {
                        "doc": "Instruction set architecture that the Deno CLI was built for."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 4198,
                        "col": 4,
                        "byteIndex": 133872
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "x86_64",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "x86_64"
                            }
                          },
                          {
                            "repr": "aarch64",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "aarch64"
                            }
                          }
                        ]
                      },
                      "typeParams": []
                    },
                    {
                      "name": "os",
                      "jsDoc": {
                        "doc": "The operating system that the Deno CLI was built for. `\"darwin\"` is\nalso known as OSX or MacOS."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 4201,
                        "col": 4,
                        "byteIndex": 134018
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "darwin",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "darwin"
                            }
                          },
                          {
                            "repr": "linux",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "linux"
                            }
                          },
                          {
                            "repr": "android",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "android"
                            }
                          },
                          {
                            "repr": "windows",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "windows"
                            }
                          },
                          {
                            "repr": "freebsd",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "freebsd"
                            }
                          },
                          {
                            "repr": "netbsd",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "netbsd"
                            }
                          },
                          {
                            "repr": "aix",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "aix"
                            }
                          },
                          {
                            "repr": "solaris",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "solaris"
                            }
                          },
                          {
                            "repr": "illumos",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "illumos"
                            }
                          }
                        ]
                      },
                      "typeParams": []
                    },
                    {
                      "name": "vendor",
                      "jsDoc": {
                        "doc": "The computer vendor that the Deno CLI was built for."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 4212,
                        "col": 4,
                        "byteIndex": 134245
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "env",
                      "jsDoc": {
                        "doc": "Optional environment flags that were set for this build of Deno CLI."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 4214,
                        "col": 4,
                        "byteIndex": 134345
                      },
                      "params": [],
                      "computed": false,
                      "optional": true,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "version",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4228,
              "col": 15,
              "byteIndex": 134836
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Version information related to the current Deno CLI runtime environment.\n\nUsers are discouraged from code branching based on this information, as\nassumptions about what is available in what build environment might change\nover time. Developers should specifically sniff out the features they\nintend to use.\n\nThe intended use for the information is for logging and debugging purposes.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "deno",
                      "jsDoc": {
                        "doc": "Deno CLI's version. For example: `\"1.26.0\"`."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 4230,
                        "col": 4,
                        "byteIndex": 134907
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "v8",
                      "jsDoc": {
                        "doc": "The V8 version used by Deno. For example: `\"10.7.100.0\"`.\n\nV8 is the underlying JavaScript runtime platform that Deno is built on\ntop of."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 4235,
                        "col": 4,
                        "byteIndex": 135094
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "typeParams": []
                    },
                    {
                      "name": "typescript",
                      "jsDoc": {
                        "doc": "The TypeScript version used by Deno. For example: `\"4.8.3\"`.\n\nA version of the TypeScript type checker and language server is built-in\nto the Deno CLI."
                      },
                      "location": {
                        "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                        "line": 4240,
                        "col": 4,
                        "byteIndex": 135293
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "args",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4263,
              "col": 15,
              "byteIndex": 135864
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returns the script arguments to the program.\n\nGive the following command line invocation of Deno:\n\n```sh\ndeno run --allow-read https://examples.deno.land/command-line-arguments.ts Sushi\n```\n\nThen `Deno.args` will contain:\n\n```ts\n[ \"Sushi\" ]\n```\n\nIf you are looking for a structured way to parse arguments, there is\n[`parseArgs()`](https://jsr.io/@std/cli/doc/parse-args/~/parseArgs) from\nthe Deno Standard Library.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "mainModule",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4273,
              "col": 15,
              "byteIndex": 136140
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The URL of the entrypoint module entered from the command-line. It\nrequires read permission to the CWD.\n\nAlso see {@linkcode ImportMeta} for other related information.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "kind": "const"
            }
          },
          {
            "name": "SymlinkOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4279,
              "col": 2,
              "byteIndex": 136288
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options that can be used with {@linkcode symlink} and\n{@linkcode symlinkSync}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "type",
                  "jsDoc": {
                    "doc": "Specify the symbolic link type as file, directory or NTFS junction. This\noption only applies to Windows and is ignored on other operating systems."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4282,
                    "col": 4,
                    "byteIndex": 136491
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "file",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "file"
                        }
                      },
                      {
                        "repr": "dir",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "dir"
                        }
                      },
                      {
                        "repr": "junction",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "junction"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "symlink",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4300,
              "col": 2,
              "byteIndex": 136978
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates `newpath` as a symbolic link to `oldpath`.\n\nThe `options.type` parameter can be set to `\"file\"`, `\"dir\"` or `\"junction\"`.\nThis argument is only available on Windows and ignored on other platforms.\n\n```ts\nawait Deno.symlink(\"old/name\", \"new/name\");\n```\n\nRequires full `allow-read` and `allow-write` permissions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "oldpath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "newpath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "SymlinkOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "SymlinkOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "symlinkSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4321,
              "col": 2,
              "byteIndex": 137553
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates `newpath` as a symbolic link to `oldpath`.\n\nThe `options.type` parameter can be set to `\"file\"`, `\"dir\"` or `\"junction\"`.\nThis argument is only available on Windows and ignored on other platforms.\n\n```ts\nDeno.symlinkSync(\"old/name\", \"new/name\");\n```\n\nRequires full `allow-read` and `allow-write` permissions.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "oldpath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "newpath",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "SymlinkOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "SymlinkOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "utimeSync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4341,
              "col": 2,
              "byteIndex": 138087
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Synchronously changes the access (`atime`) and modification (`mtime`) times\nof a file system object referenced by `path`. Given times are either in\nseconds (UNIX epoch time) or as `Date` objects.\n\n```ts\nDeno.utimeSync(\"myfile.txt\", 1556495550, new Date());\n```\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "atime",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "Date",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Date"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "mtime",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "Date",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Date"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "utime",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4361,
              "col": 2,
              "byteIndex": 138599
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Changes the access (`atime`) and modification (`mtime`) times of a file\nsystem object referenced by `path`. Given times are either in seconds\n(UNIX epoch time) or as `Date` objects.\n\n```ts\nawait Deno.utime(\"myfile.txt\", 1556495550, new Date());\n```\n\nRequires `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "atime",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "Date",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Date"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "mtime",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "Date",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Date"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "umask",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4383,
              "col": 2,
              "byteIndex": 139260
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Retrieve the process umask.  If `mask` is provided, sets the process umask.\nThis call always returns what the umask was before the call.\n\n```ts\nconsole.log(Deno.umask());  // e.g. 18 (0o022)\nconst prevUmaskValue = Deno.umask(0o077);  // e.g. 18 (0o022)\nconsole.log(Deno.umask());  // e.g. 63 (0o077)\n```\n\nThis API is under consideration to determine if permissions are required to\ncall it.\n\n*Note*: This API is not implemented on Windows\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "File System"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "mask",
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "returnType": {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "WebSocketUpgrade",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4389,
              "col": 2,
              "byteIndex": 139433
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The object that is returned from a {@linkcode Deno.upgradeWebSocket}\nrequest.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Web Sockets"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "response",
                  "jsDoc": {
                    "doc": "The response object that represents the HTTP response to the client,\nwhich should be used to the {@linkcode RequestEvent} `.respondWith()` for\nthe upgrade to be successful."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4393,
                    "col": 4,
                    "byteIndex": 139671
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Response",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Response"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "socket",
                  "jsDoc": {
                    "doc": "The {@linkcode WebSocket} interface to communicate to the client via a\nweb socket."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4396,
                    "col": 4,
                    "byteIndex": 139796
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "WebSocket",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "WebSocket"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "UpgradeWebSocketOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4403,
              "col": 2,
              "byteIndex": 139978
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when performing a\n{@linkcode Deno.upgradeWebSocket} upgrade of a {@linkcode Request}\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Web Sockets"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "protocol",
                  "jsDoc": {
                    "doc": "Sets the `.protocol` property on the client side web socket to the\nvalue provided here, which should be one of the strings specified in the\n`protocols` parameter when requesting the web socket. This is intended\nfor clients and servers to specify sub-protocols to use to communicate to\neach other."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4409,
                    "col": 4,
                    "byteIndex": 140361
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "idleTimeout",
                  "jsDoc": {
                    "doc": "If the client does not respond to this frame with a\n`pong` within the timeout specified, the connection is deemed\nunhealthy and is closed. The `close` and `error` event will be emitted.\n\nThe unit is seconds, with a default of 30.\nSet to `0` to disable timeouts."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4416,
                    "col": 4,
                    "byteIndex": 140691
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "upgradeWebSocket",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4452,
              "col": 2,
              "byteIndex": 141851
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Upgrade an incoming HTTP request to a WebSocket.\n\nGiven a {@linkcode Request}, returns a pair of {@linkcode WebSocket} and\n{@linkcode Response} instances. The original request must be responded to\nwith the returned response for the websocket upgrade to be successful.\n\n```ts\nDeno.serve((req) => {\n  if (req.headers.get(\"upgrade\") !== \"websocket\") {\n    return new Response(null, { status: 501 });\n  }\n  const { socket, response } = Deno.upgradeWebSocket(req);\n  socket.addEventListener(\"open\", () => {\n    console.log(\"a client connected!\");\n  });\n  socket.addEventListener(\"message\", (event) => {\n    if (event.data === \"ping\") {\n      socket.send(\"pong\");\n    }\n  });\n  return response;\n});\n```\n\nIf the request body is disturbed (read from) before the upgrade is\ncompleted, upgrading fails.\n\nThis operation does not yet consume the request or open the websocket. This\nonly happens once the returned response has been passed to `respondWith()`.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Web Sockets"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "request",
                  "optional": false,
                  "tsType": {
                    "repr": "Request",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Request"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "UpgradeWebSocketOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "UpgradeWebSocketOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "WebSocketUpgrade",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "WebSocketUpgrade"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "kill",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4481,
              "col": 2,
              "byteIndex": 142781
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Send a signal to process under given `pid`. The value and meaning of the\n`signal` to the process is operating system and process dependant.\n{@linkcode Signal} provides the most common signals. Default signal\nis `\"SIGTERM\"`.\n\nThe term `kill` is adopted from the UNIX-like command line command `kill`\nwhich also signals processes.\n\nIf `pid` is negative, the signal will be sent to the process group\nidentified by `pid`. An error will be thrown if a negative `pid` is used on\nWindows.\n\n```ts\nconst command = new Deno.Command(\"sleep\", { args: [\"10000\"] });\nconst child = command.spawn();\n\nDeno.kill(child.pid, \"SIGINT\");\n```\n\nRequires `allow-run` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-run"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Subprocess"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "pid",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "signo",
                  "optional": true,
                  "tsType": {
                    "repr": "Signal",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Signal"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "RecordType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4490,
              "col": 2,
              "byteIndex": 143029
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The type of the resource record to resolve via DNS using\n{@linkcode Deno.resolveDns}.\n\nOnly the listed types are supported currently.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "A",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "A"
                    }
                  },
                  {
                    "repr": "AAAA",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "AAAA"
                    }
                  },
                  {
                    "repr": "ANAME",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "ANAME"
                    }
                  },
                  {
                    "repr": "CAA",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "CAA"
                    }
                  },
                  {
                    "repr": "CNAME",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "CNAME"
                    }
                  },
                  {
                    "repr": "MX",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "MX"
                    }
                  },
                  {
                    "repr": "NAPTR",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "NAPTR"
                    }
                  },
                  {
                    "repr": "NS",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "NS"
                    }
                  },
                  {
                    "repr": "PTR",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "PTR"
                    }
                  },
                  {
                    "repr": "SOA",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SOA"
                    }
                  },
                  {
                    "repr": "SRV",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SRV"
                    }
                  },
                  {
                    "repr": "TXT",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "TXT"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "ResolveDnsOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4508,
              "col": 2,
              "byteIndex": 143312
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when using {@linkcode Deno.resolveDns}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "nameServer",
                  "jsDoc": {
                    "doc": "The name server to be used for lookups.\n\nIf not specified, defaults to the system configuration. For example\n`/etc/resolv.conf` on Unix-like systems."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4513,
                    "col": 4,
                    "byteIndex": 143534
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "ipAddr",
                          "jsDoc": {
                            "doc": "The IP address of the name server."
                          },
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 4515,
                            "col": 6,
                            "byteIndex": 143603
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          "typeParams": []
                        },
                        {
                          "name": "port",
                          "jsDoc": {
                            "doc": "The port number the query will be sent to.\n",
                            "tags": [
                              {
                                "kind": "default",
                                "value": "53"
                              }
                            ]
                          },
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 4519,
                            "col": 6,
                            "byteIndex": 143713
                          },
                          "params": [],
                          "computed": false,
                          "optional": true,
                          "tsType": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "signal",
                  "jsDoc": {
                    "doc": "An abort signal to allow cancellation of the DNS resolution operation.\nIf the signal becomes aborted the resolveDns operation will be stopped\nand the promise returned will be rejected with an AbortError."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4526,
                    "col": 4,
                    "byteIndex": 143980
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "AbortSignal",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "AbortSignal"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "CaaRecord",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4534,
              "col": 2,
              "byteIndex": 144193
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "If {@linkcode Deno.resolveDns} is called with `\"CAA\"` record type\nspecified, it will resolve with an array of objects with this interface.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "critical",
                  "jsDoc": {
                    "doc": "If `true`, indicates that the corresponding property tag **must** be\nunderstood if the semantics of the CAA record are to be correctly\ninterpreted by an issuer.\n\nIssuers **must not** issue certificates for a domain if the relevant CAA\nResource Record set contains unknown property tags that have `critical`\nset."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4542,
                    "col": 4,
                    "byteIndex": 144590
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "tag",
                  "jsDoc": {
                    "doc": "An string that represents the identifier of the property represented by\nthe record."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4545,
                    "col": 4,
                    "byteIndex": 144715
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "value",
                  "jsDoc": {
                    "doc": "The value associated with the tag."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4547,
                    "col": 4,
                    "byteIndex": 144778
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "MxRecord",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4554,
              "col": 2,
              "byteIndex": 144974
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "If {@linkcode Deno.resolveDns} is called with `\"MX\"` record type\nspecified, it will return an array of objects with this interface.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "preference",
                  "jsDoc": {
                    "doc": "A priority value, which is a relative value compared to the other\npreferences of MX records for the domain."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4557,
                    "col": 4,
                    "byteIndex": 145132
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "exchange",
                  "jsDoc": {
                    "doc": "The server that mail should be delivered to."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4559,
                    "col": 4,
                    "byteIndex": 145212
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "NaptrRecord",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4566,
              "col": 2,
              "byteIndex": 145414
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "If {@linkcode Deno.resolveDns} is called with `\"NAPTR\"` record type\nspecified, it will return an array of objects with this interface.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "order",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4567,
                    "col": 4,
                    "byteIndex": 145449
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "preference",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4568,
                    "col": 4,
                    "byteIndex": 145468
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "flags",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4569,
                    "col": 4,
                    "byteIndex": 145492
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "services",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4570,
                    "col": 4,
                    "byteIndex": 145511
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "regexp",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4571,
                    "col": 4,
                    "byteIndex": 145533
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "replacement",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4572,
                    "col": 4,
                    "byteIndex": 145553
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "SoaRecord",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4579,
              "col": 2,
              "byteIndex": 145756
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "If {@linkcode Deno.resolveDns} is called with `\"SOA\"` record type\nspecified, it will return an array of objects with this interface.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "mname",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4580,
                    "col": 4,
                    "byteIndex": 145789
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "rname",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4581,
                    "col": 4,
                    "byteIndex": 145808
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "serial",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4582,
                    "col": 4,
                    "byteIndex": 145827
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "refresh",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4583,
                    "col": 4,
                    "byteIndex": 145847
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "retry",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4584,
                    "col": 4,
                    "byteIndex": 145868
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "expire",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4585,
                    "col": 4,
                    "byteIndex": 145887
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "minimum",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4586,
                    "col": 4,
                    "byteIndex": 145907
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "SrvRecord",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4594,
              "col": 2,
              "byteIndex": 146109
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "If {@linkcode Deno.resolveDns} is called with `\"SRV\"` record type\nspecified, it will return an array of objects with this interface.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "priority",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4595,
                    "col": 4,
                    "byteIndex": 146142
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "weight",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4596,
                    "col": 4,
                    "byteIndex": 146164
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "port",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4597,
                    "col": 4,
                    "byteIndex": 146184
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "target",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4598,
                    "col": 4,
                    "byteIndex": 146202
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "resolveDns",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4625,
              "col": 2,
              "byteIndex": 146873
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "recordType",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "A",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "A"
                        }
                      },
                      {
                        "repr": "AAAA",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "AAAA"
                        }
                      },
                      {
                        "repr": "ANAME",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "ANAME"
                        }
                      },
                      {
                        "repr": "CNAME",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "CNAME"
                        }
                      },
                      {
                        "repr": "NS",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "NS"
                        }
                      },
                      {
                        "repr": "PTR",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "PTR"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ResolveDnsOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ResolveDnsOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "resolveDns",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4655,
              "col": 2,
              "byteIndex": 147693
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "recordType",
                  "optional": false,
                  "tsType": {
                    "repr": "CAA",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "CAA"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ResolveDnsOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ResolveDnsOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "CaaRecord",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "CaaRecord"
                        }
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "resolveDns",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4685,
              "col": 2,
              "byteIndex": 148474
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "recordType",
                  "optional": false,
                  "tsType": {
                    "repr": "MX",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "MX"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ResolveDnsOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ResolveDnsOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "MxRecord",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "MxRecord"
                        }
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "resolveDns",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4715,
              "col": 2,
              "byteIndex": 149253
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "recordType",
                  "optional": false,
                  "tsType": {
                    "repr": "NAPTR",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "NAPTR"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ResolveDnsOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ResolveDnsOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "NaptrRecord",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "NaptrRecord"
                        }
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "resolveDns",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4745,
              "col": 2,
              "byteIndex": 150038
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "recordType",
                  "optional": false,
                  "tsType": {
                    "repr": "SOA",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SOA"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ResolveDnsOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ResolveDnsOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "SoaRecord",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "SoaRecord"
                        }
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "resolveDns",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4775,
              "col": 2,
              "byteIndex": 150819
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "recordType",
                  "optional": false,
                  "tsType": {
                    "repr": "SRV",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "SRV"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ResolveDnsOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ResolveDnsOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "SrvRecord",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "SrvRecord"
                        }
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "resolveDns",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4805,
              "col": 2,
              "byteIndex": 151600
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "recordType",
                  "optional": false,
                  "tsType": {
                    "repr": "TXT",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "TXT"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ResolveDnsOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ResolveDnsOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "resolveDns",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4835,
              "col": 2,
              "byteIndex": 152380
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Performs DNS resolution against the given query, returning resolved\nrecords.\n\nFails in the cases such as:\n\n- the query is in invalid format.\n- the options have an invalid parameter. For example `nameServer.port` is\n  beyond the range of 16-bit unsigned integer.\n- the request timed out.\n\n```ts\nconst a = await Deno.resolveDns(\"example.com\", \"A\");\n\nconst aaaa = await Deno.resolveDns(\"example.com\", \"AAAA\", {\n  nameServer: { ipAddr: \"8.8.8.8\", port: 53 },\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "query",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "recordType",
                  "optional": false,
                  "tsType": {
                    "repr": "RecordType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RecordType"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ResolveDnsOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ResolveDnsOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "CaaRecord",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "CaaRecord"
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "MxRecord",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "MxRecord"
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "NaptrRecord",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "NaptrRecord"
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "SoaRecord",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "SoaRecord"
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "SrvRecord",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "SrvRecord"
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          }
                        }
                      ]
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "refTimer",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4854,
              "col": 2,
              "byteIndex": 152748
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Make the timer of the given `id` block the event loop from finishing.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "unrefTimer",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4861,
              "col": 2,
              "byteIndex": 152914
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Make the timer of the given `id` not block the event loop from finishing.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "id",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "uid",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4875,
              "col": 2,
              "byteIndex": 153207
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returns the user id of the process on POSIX platforms. Returns null on Windows.\n\n```ts\nconsole.log(Deno.uid());\n```\n\nRequires `allow-sys` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-sys"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  {
                    "repr": "null",
                    "kind": "keyword",
                    "keyword": "null"
                  }
                ]
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "gid",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4889,
              "col": 2,
              "byteIndex": 153493
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Returns the group id of the process on POSIX platforms. Returns null on windows.\n\n```ts\nconsole.log(Deno.gid());\n```\n\nRequires `allow-sys` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-sys"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Runtime"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  {
                    "repr": "null",
                    "kind": "keyword",
                    "keyword": "null"
                  }
                ]
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "ServeHandlerInfo",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4895,
              "col": 2,
              "byteIndex": 153641
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Additional information for an HTTP request and its connection.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "remoteAddr",
                  "jsDoc": {
                    "doc": "The remote address of the connection."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4897,
                    "col": 4,
                    "byteIndex": 153766
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Addr"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "completed",
                  "jsDoc": {
                    "doc": "The completion promise"
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4899,
                    "col": 4,
                    "byteIndex": 153822
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "Addr",
                  "constraint": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  },
                  "default": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "ServeHandler",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4910,
              "col": 2,
              "byteIndex": 154197
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A handler for HTTP requests. Consumes a request and returns a response.\n\nIf a handler throws, the server calling the handler will assume the impact\nof the error is isolated to the individual request. It will catch the error\nand if necessary will close the underlying connection.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "fnOrConstructor",
                "fnOrConstructor": {
                  "constructor": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Response",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Response"
                        }
                      },
                      {
                        "repr": "Promise",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Response",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Response"
                              }
                            }
                          ],
                          "typeName": "Promise"
                        }
                      }
                    ]
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "request",
                      "optional": false,
                      "tsType": {
                        "repr": "Request",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Request"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "info",
                      "optional": false,
                      "tsType": {
                        "repr": "ServeHandlerInfo",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Addr",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Addr"
                              }
                            }
                          ],
                          "typeName": "ServeHandlerInfo"
                        }
                      }
                    }
                  ],
                  "typeParams": []
                }
              },
              "typeParams": [
                {
                  "name": "Addr",
                  "constraint": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  },
                  "default": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "ServeDefaultExport",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4930,
              "col": 2,
              "byteIndex": 154792
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Interface that module run with `deno serve` subcommand must conform to.\n\nTo ensure your code is type-checked properly, make sure to add `satisfies Deno.ServeDefaultExport`\nto the `export default { ... }` like so:\n\n```ts\nexport default {\n  fetch(req) {\n    return new Response(\"Hello world\");\n  }\n} satisfies Deno.ServeDefaultExport;\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "fetch",
                  "jsDoc": {
                    "doc": "A handler for HTTP requests. Consumes a request and returns a response.\n\nIf a handler throws, the server calling the handler will assume the impact\nof the error is isolated to the individual request. It will catch the error\nand if necessary will close the underlying connection.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "HTTP Server"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4939,
                    "col": 4,
                    "byteIndex": 155192
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "ServeHandler",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ServeHandler"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "ServeOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4946,
              "col": 2,
              "byteIndex": 155326
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when calling {@linkcode Deno.serve}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "signal",
                  "jsDoc": {
                    "doc": "An {@linkcode AbortSignal} to close the server and all connections."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4948,
                    "col": 4,
                    "byteIndex": 155477
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "AbortSignal",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "AbortSignal"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "onError",
                  "jsDoc": {
                    "doc": "The handler to invoke when route handlers throw an error."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4951,
                    "col": 4,
                    "byteIndex": 155573
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "Response",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Response"
                            }
                          },
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Response",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "Response"
                                  }
                                }
                              ],
                              "typeName": "Promise"
                            }
                          }
                        ]
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "error",
                          "optional": false,
                          "tsType": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "onListen",
                  "jsDoc": {
                    "doc": "The callback which is called when the server starts listening."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4954,
                    "col": 4,
                    "byteIndex": 155712
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "void",
                        "kind": "keyword",
                        "keyword": "void"
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "localAddr",
                          "optional": false,
                          "tsType": {
                            "repr": "Addr",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Addr"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "Addr",
                  "constraint": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  },
                  "default": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "ServeTcpOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4963,
              "col": 2,
              "byteIndex": 155898
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options that can be passed to `Deno.serve` to create a server listening on\na TCP port.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "ServeOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Deno.NetAddr",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Deno.NetAddr"
                        }
                      }
                    ],
                    "typeName": "ServeOptions"
                  }
                }
              ],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "transport",
                  "jsDoc": {
                    "doc": "The transport to use."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4965,
                    "col": 4,
                    "byteIndex": 156005
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "tcp",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "tcp"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "port",
                  "jsDoc": {
                    "doc": "The port to listen on.\n\nSet to `0` to listen on any available port.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "8000"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4972,
                    "col": 4,
                    "byteIndex": 156151
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "hostname",
                  "jsDoc": {
                    "doc": "A literal IP address or host name that can be resolved to an IP address.\n\n__Note about `0.0.0.0`__ While listening `0.0.0.0` works on all platforms,\nthe browsers on Windows don't work with the address `0.0.0.0`.\nYou should show the message like `server running on localhost:8080` instead of\n`server running on 0.0.0.0:8080` if your program supports Windows.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "\"0.0.0.0\""
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4982,
                    "col": 4,
                    "byteIndex": 156609
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "reusePort",
                  "jsDoc": {
                    "doc": "Sets `SO_REUSEPORT` on POSIX systems."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4985,
                    "col": 4,
                    "byteIndex": 156682
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "ServeUnixOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 4994,
              "col": 2,
              "byteIndex": 156861
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options that can be passed to `Deno.serve` to create a server listening on\na Unix domain socket.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "ServeOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Deno.UnixAddr",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Deno.UnixAddr"
                        }
                      }
                    ],
                    "typeName": "ServeOptions"
                  }
                }
              ],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "transport",
                  "jsDoc": {
                    "doc": "The transport to use."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4996,
                    "col": 4,
                    "byteIndex": 156970
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "unix",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "unix"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "path",
                  "jsDoc": {
                    "doc": "The unix domain socket path to listen on."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 4999,
                    "col": 4,
                    "byteIndex": 157048
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "ServeInit",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5005,
              "col": 2,
              "byteIndex": 157108
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "handler",
                  "jsDoc": {
                    "doc": "The handler to invoke to process each incoming request."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5007,
                    "col": 4,
                    "byteIndex": 157244
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "ServeHandler",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Addr",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Addr"
                          }
                        }
                      ],
                      "typeName": "ServeHandler"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "Addr",
                  "constraint": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  },
                  "default": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "HttpServer",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5014,
              "col": 2,
              "byteIndex": 157384
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An instance of the server created using `Deno.serve()` API.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "AsyncDisposable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AsyncDisposable"
                  }
                }
              ],
              "constructors": [],
              "methods": [
                {
                  "name": "ref",
                  "jsDoc": {
                    "doc": "Make the server block the event loop from finishing.\n\nNote: the server blocks the event loop from finishing by default.\nThis method is only meaningful after `.unref()` is called."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5030,
                    "col": 4,
                    "byteIndex": 157956
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "unref",
                  "jsDoc": {
                    "doc": "Make the server not block the event loop from finishing."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5033,
                    "col": 4,
                    "byteIndex": 158042
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "shutdown",
                  "jsDoc": {
                    "doc": "Gracefully close the server. No more new connections will be accepted,\nwhile pending requests will be allowed to finish."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5038,
                    "col": 4,
                    "byteIndex": 158206
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                }
              ],
              "properties": [
                {
                  "name": "finished",
                  "jsDoc": {
                    "doc": "A promise that resolves once server finishes - eg. when aborted using\nthe signal passed to {@linkcode ServeOptions.signal}."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5019,
                    "col": 4,
                    "byteIndex": 157629
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "addr",
                  "jsDoc": {
                    "doc": "The local address this server is listening on."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5022,
                    "col": 4,
                    "byteIndex": 157717
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Addr"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "Addr",
                  "constraint": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  },
                  "default": {
                    "repr": "Deno.Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Deno.Addr"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "serve",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5051,
              "col": 2,
              "byteIndex": 158494
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Serves HTTP requests with the given handler.\n\nThe below example serves with the port `8000` on hostname `\"127.0.0.1\"`.\n\n```ts\nDeno.serve((_req) => new Response(\"Hello, world\"));\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "handler",
                  "optional": false,
                  "tsType": {
                    "repr": "ServeHandler",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Deno.NetAddr",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Deno.NetAddr"
                          }
                        }
                      ],
                      "typeName": "ServeHandler"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "HttpServer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Deno.NetAddr",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Deno.NetAddr"
                      }
                    }
                  ],
                  "typeName": "HttpServer"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "serve",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5099,
              "col": 2,
              "byteIndex": 159978
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Serves HTTP requests with the given option bag and handler.\n\nYou can specify the socket path with `path` option.\n\n```ts\nDeno.serve(\n  { path: \"path/to/socket\" },\n  (_req) => new Response(\"Hello, world\")\n);\n```\n\nYou can stop the server with an {@linkcode AbortSignal}. The abort signal\nneeds to be passed as the `signal` option in the options bag. The server\naborts when the abort signal is aborted. To wait for the server to close,\nawait the promise returned from the `Deno.serve` API.\n\n```ts\nconst ac = new AbortController();\n\nconst server = Deno.serve(\n   { signal: ac.signal, path: \"path/to/socket\" },\n   (_req) => new Response(\"Hello, world\")\n);\nserver.finished.then(() => console.log(\"Server closed\"));\n\nconsole.log(\"Closing server...\");\nac.abort();\n```\n\nBy default `Deno.serve` prints the message\n`Listening on path/to/socket` on listening. If you like to\nchange this behavior, you can specify a custom `onListen` callback.\n\n```ts\nDeno.serve({\n  onListen({ path }) {\n    console.log(`Server started at ${path}`);\n    // ... more info specific to your server ..\n  },\n  path: \"path/to/socket\",\n}, (_req) => new Response(\"Hello, world\"));\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ServeUnixOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ServeUnixOptions"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "handler",
                  "optional": false,
                  "tsType": {
                    "repr": "ServeHandler",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Deno.UnixAddr",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Deno.UnixAddr"
                          }
                        }
                      ],
                      "typeName": "ServeHandler"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "HttpServer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Deno.UnixAddr",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Deno.UnixAddr"
                      }
                    }
                  ],
                  "typeName": "HttpServer"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "serve",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5159,
              "col": 2,
              "byteIndex": 162087
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Serves HTTP requests with the given option bag and handler.\n\nYou can specify an object with a port and hostname option, which is the\naddress to listen on. The default is port `8000` on hostname `\"0.0.0.0\"`.\n\nYou can change the address to listen on using the `hostname` and `port`\noptions. The below example serves on port `3000` and hostname `\"127.0.0.1\"`.\n\n```ts\nDeno.serve(\n  { port: 3000, hostname: \"127.0.0.1\" },\n  (_req) => new Response(\"Hello, world\")\n);\n```\n\nYou can stop the server with an {@linkcode AbortSignal}. The abort signal\nneeds to be passed as the `signal` option in the options bag. The server\naborts when the abort signal is aborted. To wait for the server to close,\nawait the promise returned from the `Deno.serve` API.\n\n```ts\nconst ac = new AbortController();\n\nconst server = Deno.serve(\n   { signal: ac.signal },\n   (_req) => new Response(\"Hello, world\")\n);\nserver.finished.then(() => console.log(\"Server closed\"));\n\nconsole.log(\"Closing server...\");\nac.abort();\n```\n\nBy default `Deno.serve` prints the message\n`Listening on http://<hostname>:<port>/` on listening. If you like to\nchange this behavior, you can specify a custom `onListen` callback.\n\n```ts\nDeno.serve({\n  onListen({ port, hostname }) {\n    console.log(`Server started at http://${hostname}:${port}`);\n    // ... more info specific to your server ..\n  },\n}, (_req) => new Response(\"Hello, world\"));\n```\n\nTo enable TLS you must specify the `key` and `cert` options.\n\n```ts\nconst cert = \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\\n\";\nconst key = \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\";\nDeno.serve({ cert, key }, (_req) => new Response(\"Hello, world\"));\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "ServeTcpOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ServeTcpOptions"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "intersection",
                          "intersection": [
                            {
                              "repr": "ServeTcpOptions",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ServeTcpOptions"
                              }
                            },
                            {
                              "repr": "TlsCertifiedKeyPem",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TlsCertifiedKeyPem"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "handler",
                  "optional": false,
                  "tsType": {
                    "repr": "ServeHandler",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Deno.NetAddr",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Deno.NetAddr"
                          }
                        }
                      ],
                      "typeName": "ServeHandler"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "HttpServer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Deno.NetAddr",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Deno.NetAddr"
                      }
                    }
                  ],
                  "typeName": "HttpServer"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "serve",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5187,
              "col": 2,
              "byteIndex": 162893
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Serves HTTP requests with the given option bag.\n\nYou can specify an object with the path option, which is the\nunix domain socket to listen on.\n\n```ts\nconst ac = new AbortController();\n\nconst server = Deno.serve({\n  path: \"path/to/socket\",\n  handler: (_req) => new Response(\"Hello, world\"),\n  signal: ac.signal,\n  onListen({ path }) {\n    console.log(`Server started at ${path}`);\n  },\n});\nserver.finished.then(() => console.log(\"Server closed\"));\n\nconsole.log(\"Closing server...\");\nac.abort();\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "intersection",
                    "intersection": [
                      {
                        "repr": "ServeUnixOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ServeUnixOptions"
                        }
                      },
                      {
                        "repr": "ServeInit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Deno.UnixAddr",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Deno.UnixAddr"
                              }
                            }
                          ],
                          "typeName": "ServeInit"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "HttpServer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Deno.UnixAddr",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Deno.UnixAddr"
                      }
                    }
                  ],
                  "typeName": "HttpServer"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "serve",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5215,
              "col": 2,
              "byteIndex": 163745
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Serves HTTP requests with the given option bag.\n\nYou can specify an object with a port and hostname option, which is the\naddress to listen on. The default is port `8000` on hostname `\"0.0.0.0\"`.\n\n```ts\nconst ac = new AbortController();\n\nconst server = Deno.serve({\n  port: 3000,\n  hostname: \"127.0.0.1\",\n  handler: (_req) => new Response(\"Hello, world\"),\n  signal: ac.signal,\n  onListen({ port, hostname }) {\n    console.log(`Server started at http://${hostname}:${port}`);\n  },\n});\nserver.finished.then(() => console.log(\"Server closed\"));\n\nconsole.log(\"Closing server...\");\nac.abort();\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "HTTP Server"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "intersection",
                    "intersection": [
                      {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "ServeTcpOptions",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ServeTcpOptions"
                              }
                            },
                            {
                              "repr": "",
                              "kind": "parenthesized",
                              "parenthesized": {
                                "repr": "",
                                "kind": "intersection",
                                "intersection": [
                                  {
                                    "repr": "ServeTcpOptions",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "ServeTcpOptions"
                                    }
                                  },
                                  {
                                    "repr": "TlsCertifiedKeyPem",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "TlsCertifiedKeyPem"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "repr": "ServeInit",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Deno.NetAddr",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Deno.NetAddr"
                              }
                            }
                          ],
                          "typeName": "ServeInit"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "HttpServer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Deno.NetAddr",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Deno.NetAddr"
                      }
                    }
                  ],
                  "typeName": "HttpServer"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "NativeNumberType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5225,
              "col": 2,
              "byteIndex": 164014
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "All plain number types for interfacing with foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "u8",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "u8"
                    }
                  },
                  {
                    "repr": "i8",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "i8"
                    }
                  },
                  {
                    "repr": "u16",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "u16"
                    }
                  },
                  {
                    "repr": "i16",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "i16"
                    }
                  },
                  {
                    "repr": "u32",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "u32"
                    }
                  },
                  {
                    "repr": "i32",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "i32"
                    }
                  },
                  {
                    "repr": "f32",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "f32"
                    }
                  },
                  {
                    "repr": "f64",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "f64"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "NativeBigIntType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5239,
              "col": 2,
              "byteIndex": 164243
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "All BigInt number types for interfacing with foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "u64",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "u64"
                    }
                  },
                  {
                    "repr": "i64",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "i64"
                    }
                  },
                  {
                    "repr": "usize",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "usize"
                    }
                  },
                  {
                    "repr": "isize",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "isize"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "NativeBooleanType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5245,
              "col": 2,
              "byteIndex": 164410
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The native boolean type for interfacing to foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "bool",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "bool"
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "NativePointerType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5251,
              "col": 2,
              "byteIndex": 164551
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The native pointer type for interfacing to foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "pointer",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "pointer"
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "NativeBufferType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5257,
              "col": 2,
              "byteIndex": 164694
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The native buffer type for interfacing to foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "buffer",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "buffer"
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "NativeFunctionType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5263,
              "col": 2,
              "byteIndex": 164839
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The native function type for interfacing with foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "function",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "function"
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "NativeVoidType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5269,
              "col": 2,
              "byteIndex": 164984
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The native void type for interfacing with foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "void",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "void"
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "NativeStructType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5275,
              "col": 2,
              "byteIndex": 165123
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The native struct type for interfacing with foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "struct",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5276,
                    "col": 4,
                    "byteIndex": 165163
                  },
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NativeType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NativeType"
                          }
                        }
                      }
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "brand",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5282,
              "col": 15,
              "byteIndex": 165254
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "variable",
            "variableDef": {
              "tsType": {
                "repr": "",
                "kind": "typeOperator",
                "typeOperator": {
                  "operator": "unique",
                  "tsType": {
                    "repr": "symbol",
                    "kind": "keyword",
                    "keyword": "symbol"
                  }
                }
              },
              "kind": "const"
            }
          },
          {
            "name": "NativeU8Enum",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5287,
              "col": 2,
              "byteIndex": 165310
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "intersection",
                "intersection": [
                  {
                    "repr": "u8",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "u8"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "brand",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 5287,
                            "col": 56,
                            "byteIndex": 165364
                          },
                          "params": [],
                          "computed": true,
                          "optional": false,
                          "tsType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ]
            }
          },
          {
            "name": "NativeI8Enum",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5291,
              "col": 2,
              "byteIndex": 165411
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "intersection",
                "intersection": [
                  {
                    "repr": "i8",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "i8"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "brand",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 5291,
                            "col": 56,
                            "byteIndex": 165465
                          },
                          "params": [],
                          "computed": true,
                          "optional": false,
                          "tsType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ]
            }
          },
          {
            "name": "NativeU16Enum",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5295,
              "col": 2,
              "byteIndex": 165512
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "intersection",
                "intersection": [
                  {
                    "repr": "u16",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "u16"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "brand",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 5295,
                            "col": 58,
                            "byteIndex": 165568
                          },
                          "params": [],
                          "computed": true,
                          "optional": false,
                          "tsType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ]
            }
          },
          {
            "name": "NativeI16Enum",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5299,
              "col": 2,
              "byteIndex": 165615
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "intersection",
                "intersection": [
                  {
                    "repr": "i16",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "i16"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "brand",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 5299,
                            "col": 58,
                            "byteIndex": 165671
                          },
                          "params": [],
                          "computed": true,
                          "optional": false,
                          "tsType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ]
            }
          },
          {
            "name": "NativeU32Enum",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5303,
              "col": 2,
              "byteIndex": 165718
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "intersection",
                "intersection": [
                  {
                    "repr": "u32",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "u32"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "brand",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 5303,
                            "col": 58,
                            "byteIndex": 165774
                          },
                          "params": [],
                          "computed": true,
                          "optional": false,
                          "tsType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ]
            }
          },
          {
            "name": "NativeI32Enum",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5307,
              "col": 2,
              "byteIndex": 165821
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "intersection",
                "intersection": [
                  {
                    "repr": "i32",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "i32"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "brand",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 5307,
                            "col": 58,
                            "byteIndex": 165877
                          },
                          "params": [],
                          "computed": true,
                          "optional": false,
                          "tsType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ]
            }
          },
          {
            "name": "NativeTypedPointer",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5311,
              "col": 2,
              "byteIndex": 165924
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "intersection",
                "intersection": [
                  {
                    "repr": "pointer",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "pointer"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "brand",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 5312,
                            "col": 4,
                            "byteIndex": 166000
                          },
                          "params": [],
                          "computed": true,
                          "optional": false,
                          "tsType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "PointerObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PointerObject"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "NativeTypedFunction",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5317,
              "col": 2,
              "byteIndex": 166050
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "intersection",
                "intersection": [
                  {
                    "repr": "function",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "function"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "brand",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 5320,
                            "col": 6,
                            "byteIndex": 166151
                          },
                          "params": [],
                          "computed": true,
                          "optional": false,
                          "tsType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "UnsafeCallbackDefinition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "UnsafeCallbackDefinition"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "NativeType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5327,
              "col": 2,
              "byteIndex": 166269
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "All supported types for interfacing with foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "NativeNumberType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeNumberType"
                    }
                  },
                  {
                    "repr": "NativeBigIntType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeBigIntType"
                    }
                  },
                  {
                    "repr": "NativeBooleanType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeBooleanType"
                    }
                  },
                  {
                    "repr": "NativePointerType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativePointerType"
                    }
                  },
                  {
                    "repr": "NativeBufferType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeBufferType"
                    }
                  },
                  {
                    "repr": "NativeFunctionType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeFunctionType"
                    }
                  },
                  {
                    "repr": "NativeStructType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeStructType"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "NativeResultType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5338,
              "col": 2,
              "byteIndex": 166489
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "NativeType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeType"
                    }
                  },
                  {
                    "repr": "NativeVoidType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeVoidType"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "ToNativeType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5345,
              "col": 2,
              "byteIndex": 166673
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Type conversion for foreign symbol parameters and unsafe callback return\ntypes.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  },
                  "extendsType": {
                    "repr": "NativeStructType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeStructType"
                    }
                  },
                  "trueType": {
                    "repr": "BufferSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BufferSource"
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "extendsType": {
                        "repr": "NativeNumberType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "NativeNumberType"
                        }
                      },
                      "trueType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "NativeU8Enum",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "",
                                  "kind": "infer",
                                  "infer": {
                                    "typeParam": {
                                      "name": "U"
                                    }
                                  }
                                }
                              ],
                              "typeName": "NativeU8Enum"
                            }
                          },
                          "trueType": {
                            "repr": "U",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "U"
                            }
                          },
                          "falseType": {
                            "repr": "",
                            "kind": "conditional",
                            "conditionalType": {
                              "checkType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "extendsType": {
                                "repr": "NativeI8Enum",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "infer",
                                      "infer": {
                                        "typeParam": {
                                          "name": "U"
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "NativeI8Enum"
                                }
                              },
                              "trueType": {
                                "repr": "U",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "U"
                                }
                              },
                              "falseType": {
                                "repr": "",
                                "kind": "conditional",
                                "conditionalType": {
                                  "checkType": {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  },
                                  "extendsType": {
                                    "repr": "NativeU16Enum",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "",
                                          "kind": "infer",
                                          "infer": {
                                            "typeParam": {
                                              "name": "U"
                                            }
                                          }
                                        }
                                      ],
                                      "typeName": "NativeU16Enum"
                                    }
                                  },
                                  "trueType": {
                                    "repr": "U",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "U"
                                    }
                                  },
                                  "falseType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeI16Enum",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "",
                                              "kind": "infer",
                                              "infer": {
                                                "typeParam": {
                                                  "name": "U"
                                                }
                                              }
                                            }
                                          ],
                                          "typeName": "NativeI16Enum"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "U",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "U"
                                        }
                                      },
                                      "falseType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeU32Enum",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": [
                                                {
                                                  "repr": "",
                                                  "kind": "infer",
                                                  "infer": {
                                                    "typeParam": {
                                                      "name": "U"
                                                    }
                                                  }
                                                }
                                              ],
                                              "typeName": "NativeU32Enum"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "U",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "U"
                                            }
                                          },
                                          "falseType": {
                                            "repr": "",
                                            "kind": "conditional",
                                            "conditionalType": {
                                              "checkType": {
                                                "repr": "T",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "T"
                                                }
                                              },
                                              "extendsType": {
                                                "repr": "NativeI32Enum",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": [
                                                    {
                                                      "repr": "",
                                                      "kind": "infer",
                                                      "infer": {
                                                        "typeParam": {
                                                          "name": "U"
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "typeName": "NativeI32Enum"
                                                }
                                              },
                                              "trueType": {
                                                "repr": "U",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "U"
                                                }
                                              },
                                              "falseType": {
                                                "repr": "number",
                                                "kind": "keyword",
                                                "keyword": "number"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "falseType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "NativeBigIntType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "NativeBigIntType"
                            }
                          },
                          "trueType": {
                            "repr": "bigint",
                            "kind": "keyword",
                            "keyword": "bigint"
                          },
                          "falseType": {
                            "repr": "",
                            "kind": "conditional",
                            "conditionalType": {
                              "checkType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "extendsType": {
                                "repr": "NativeBooleanType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "NativeBooleanType"
                                }
                              },
                              "trueType": {
                                "repr": "boolean",
                                "kind": "keyword",
                                "keyword": "boolean"
                              },
                              "falseType": {
                                "repr": "",
                                "kind": "conditional",
                                "conditionalType": {
                                  "checkType": {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  },
                                  "extendsType": {
                                    "repr": "NativePointerType",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "NativePointerType"
                                    }
                                  },
                                  "trueType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeTypedPointer",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "",
                                              "kind": "infer",
                                              "infer": {
                                                "typeParam": {
                                                  "name": "U"
                                                }
                                              }
                                            }
                                          ],
                                          "typeName": "NativeTypedPointer"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "",
                                        "kind": "union",
                                        "union": [
                                          {
                                            "repr": "U",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "U"
                                            }
                                          },
                                          {
                                            "repr": "null",
                                            "kind": "keyword",
                                            "keyword": "null"
                                          }
                                        ]
                                      },
                                      "falseType": {
                                        "repr": "PointerValue",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "PointerValue"
                                        }
                                      }
                                    }
                                  },
                                  "falseType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeFunctionType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "NativeFunctionType"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeTypedFunction",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": [
                                                {
                                                  "repr": "",
                                                  "kind": "infer",
                                                  "infer": {
                                                    "typeParam": {
                                                      "name": "U"
                                                    }
                                                  }
                                                }
                                              ],
                                              "typeName": "NativeTypedFunction"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "",
                                            "kind": "union",
                                            "union": [
                                              {
                                                "repr": "PointerValue",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": [
                                                    {
                                                      "repr": "U",
                                                      "kind": "typeRef",
                                                      "typeRef": {
                                                        "typeParams": null,
                                                        "typeName": "U"
                                                      }
                                                    }
                                                  ],
                                                  "typeName": "PointerValue"
                                                }
                                              },
                                              {
                                                "repr": "null",
                                                "kind": "keyword",
                                                "keyword": "null"
                                              }
                                            ]
                                          },
                                          "falseType": {
                                            "repr": "PointerValue",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "PointerValue"
                                            }
                                          }
                                        }
                                      },
                                      "falseType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeBufferType",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "NativeBufferType"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "",
                                            "kind": "union",
                                            "union": [
                                              {
                                                "repr": "BufferSource",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "BufferSource"
                                                }
                                              },
                                              {
                                                "repr": "null",
                                                "kind": "keyword",
                                                "keyword": "null"
                                              }
                                            ]
                                          },
                                          "falseType": {
                                            "repr": "never",
                                            "kind": "keyword",
                                            "keyword": "never"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "NativeType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeType"
                    }
                  },
                  "default": {
                    "repr": "NativeType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeType"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "ToNativeResultType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5369,
              "col": 2,
              "byteIndex": 167574
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Type conversion for unsafe callback return types.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  },
                  "extendsType": {
                    "repr": "NativeStructType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeStructType"
                    }
                  },
                  "trueType": {
                    "repr": "BufferSource",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BufferSource"
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "extendsType": {
                        "repr": "NativeNumberType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "NativeNumberType"
                        }
                      },
                      "trueType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "NativeU8Enum",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "",
                                  "kind": "infer",
                                  "infer": {
                                    "typeParam": {
                                      "name": "U"
                                    }
                                  }
                                }
                              ],
                              "typeName": "NativeU8Enum"
                            }
                          },
                          "trueType": {
                            "repr": "U",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "U"
                            }
                          },
                          "falseType": {
                            "repr": "",
                            "kind": "conditional",
                            "conditionalType": {
                              "checkType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "extendsType": {
                                "repr": "NativeI8Enum",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "infer",
                                      "infer": {
                                        "typeParam": {
                                          "name": "U"
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "NativeI8Enum"
                                }
                              },
                              "trueType": {
                                "repr": "U",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "U"
                                }
                              },
                              "falseType": {
                                "repr": "",
                                "kind": "conditional",
                                "conditionalType": {
                                  "checkType": {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  },
                                  "extendsType": {
                                    "repr": "NativeU16Enum",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "",
                                          "kind": "infer",
                                          "infer": {
                                            "typeParam": {
                                              "name": "U"
                                            }
                                          }
                                        }
                                      ],
                                      "typeName": "NativeU16Enum"
                                    }
                                  },
                                  "trueType": {
                                    "repr": "U",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "U"
                                    }
                                  },
                                  "falseType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeI16Enum",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "",
                                              "kind": "infer",
                                              "infer": {
                                                "typeParam": {
                                                  "name": "U"
                                                }
                                              }
                                            }
                                          ],
                                          "typeName": "NativeI16Enum"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "U",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "U"
                                        }
                                      },
                                      "falseType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeU32Enum",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": [
                                                {
                                                  "repr": "",
                                                  "kind": "infer",
                                                  "infer": {
                                                    "typeParam": {
                                                      "name": "U"
                                                    }
                                                  }
                                                }
                                              ],
                                              "typeName": "NativeU32Enum"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "U",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "U"
                                            }
                                          },
                                          "falseType": {
                                            "repr": "",
                                            "kind": "conditional",
                                            "conditionalType": {
                                              "checkType": {
                                                "repr": "T",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "T"
                                                }
                                              },
                                              "extendsType": {
                                                "repr": "NativeI32Enum",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": [
                                                    {
                                                      "repr": "",
                                                      "kind": "infer",
                                                      "infer": {
                                                        "typeParam": {
                                                          "name": "U"
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "typeName": "NativeI32Enum"
                                                }
                                              },
                                              "trueType": {
                                                "repr": "U",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "U"
                                                }
                                              },
                                              "falseType": {
                                                "repr": "number",
                                                "kind": "keyword",
                                                "keyword": "number"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "falseType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "NativeBigIntType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "NativeBigIntType"
                            }
                          },
                          "trueType": {
                            "repr": "bigint",
                            "kind": "keyword",
                            "keyword": "bigint"
                          },
                          "falseType": {
                            "repr": "",
                            "kind": "conditional",
                            "conditionalType": {
                              "checkType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "extendsType": {
                                "repr": "NativeBooleanType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "NativeBooleanType"
                                }
                              },
                              "trueType": {
                                "repr": "boolean",
                                "kind": "keyword",
                                "keyword": "boolean"
                              },
                              "falseType": {
                                "repr": "",
                                "kind": "conditional",
                                "conditionalType": {
                                  "checkType": {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  },
                                  "extendsType": {
                                    "repr": "NativePointerType",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "NativePointerType"
                                    }
                                  },
                                  "trueType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeTypedPointer",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "",
                                              "kind": "infer",
                                              "infer": {
                                                "typeParam": {
                                                  "name": "U"
                                                }
                                              }
                                            }
                                          ],
                                          "typeName": "NativeTypedPointer"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "",
                                        "kind": "union",
                                        "union": [
                                          {
                                            "repr": "U",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "U"
                                            }
                                          },
                                          {
                                            "repr": "null",
                                            "kind": "keyword",
                                            "keyword": "null"
                                          }
                                        ]
                                      },
                                      "falseType": {
                                        "repr": "PointerValue",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "PointerValue"
                                        }
                                      }
                                    }
                                  },
                                  "falseType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeFunctionType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "NativeFunctionType"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeTypedFunction",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": [
                                                {
                                                  "repr": "",
                                                  "kind": "infer",
                                                  "infer": {
                                                    "typeParam": {
                                                      "name": "U"
                                                    }
                                                  }
                                                }
                                              ],
                                              "typeName": "NativeTypedFunction"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "",
                                            "kind": "union",
                                            "union": [
                                              {
                                                "repr": "PointerObject",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": [
                                                    {
                                                      "repr": "U",
                                                      "kind": "typeRef",
                                                      "typeRef": {
                                                        "typeParams": null,
                                                        "typeName": "U"
                                                      }
                                                    }
                                                  ],
                                                  "typeName": "PointerObject"
                                                }
                                              },
                                              {
                                                "repr": "null",
                                                "kind": "keyword",
                                                "keyword": "null"
                                              }
                                            ]
                                          },
                                          "falseType": {
                                            "repr": "PointerValue",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "PointerValue"
                                            }
                                          }
                                        }
                                      },
                                      "falseType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeBufferType",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "NativeBufferType"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "",
                                            "kind": "union",
                                            "union": [
                                              {
                                                "repr": "BufferSource",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "BufferSource"
                                                }
                                              },
                                              {
                                                "repr": "null",
                                                "kind": "keyword",
                                                "keyword": "null"
                                              }
                                            ]
                                          },
                                          "falseType": {
                                            "repr": "",
                                            "kind": "conditional",
                                            "conditionalType": {
                                              "checkType": {
                                                "repr": "T",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "T"
                                                }
                                              },
                                              "extendsType": {
                                                "repr": "NativeVoidType",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "NativeVoidType"
                                                }
                                              },
                                              "trueType": {
                                                "repr": "void",
                                                "kind": "keyword",
                                                "keyword": "void"
                                              },
                                              "falseType": {
                                                "repr": "never",
                                                "kind": "keyword",
                                                "keyword": "never"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  },
                  "default": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "ToNativeParameterTypes",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5395,
              "col": 2,
              "byteIndex": 168558
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A utility type for conversion of parameter types of foreign functions.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "T",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "T"
                              }
                            },
                            "indexType": {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "extendsType": {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ]
                  },
                  "trueType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "ToNativeType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "indexType": {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              }
                            }
                          }
                        ],
                        "typeName": "ToNativeType"
                      }
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": [
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "readonly",
                              "tsType": {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "",
                                  "kind": "indexedAccess",
                                  "indexedAccess": {
                                    "readonly": false,
                                    "objType": {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    },
                                    "indexType": {
                                      "repr": "number",
                                      "kind": "keyword",
                                      "keyword": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "extendsType": {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ]
                      },
                      "trueType": {
                        "repr": "",
                        "kind": "typeOperator",
                        "typeOperator": {
                          "operator": "readonly",
                          "tsType": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "ToNativeType",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "",
                                    "kind": "indexedAccess",
                                    "indexedAccess": {
                                      "readonly": false,
                                      "objType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "indexType": {
                                        "repr": "number",
                                        "kind": "keyword",
                                        "keyword": "number"
                                      }
                                    }
                                  }
                                ],
                                "typeName": "ToNativeType"
                              }
                            }
                          }
                        }
                      },
                      "falseType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "readonly",
                              "tsType": {
                                "repr": "",
                                "kind": "tuple",
                                "tuple": [
                                  {
                                    "repr": "",
                                    "kind": "rest",
                                    "rest": {
                                      "repr": "",
                                      "kind": "array",
                                      "array": {
                                        "repr": "NativeType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "NativeType"
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "mapped",
                            "mappedType": {
                              "typeParam": {
                                "name": "K",
                                "constraint": {
                                  "repr": "",
                                  "kind": "typeOperator",
                                  "typeOperator": {
                                    "operator": "keyof",
                                    "tsType": {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    }
                                  }
                                }
                              },
                              "tsType": {
                                "repr": "ToNativeType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "indexedAccess",
                                      "indexedAccess": {
                                        "readonly": false,
                                        "objType": {
                                          "repr": "T",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "T"
                                          }
                                        },
                                        "indexType": {
                                          "repr": "K",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "K"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "ToNativeType"
                                }
                              }
                            }
                          },
                          "falseType": {
                            "repr": "never",
                            "kind": "keyword",
                            "keyword": "never"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NativeType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NativeType"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "FromNativeType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5409,
              "col": 2,
              "byteIndex": 169017
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Type conversion for foreign symbol return types and unsafe callback\nparameters.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  },
                  "extendsType": {
                    "repr": "NativeStructType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeStructType"
                    }
                  },
                  "trueType": {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "extendsType": {
                        "repr": "NativeNumberType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "NativeNumberType"
                        }
                      },
                      "trueType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "NativeU8Enum",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "",
                                  "kind": "infer",
                                  "infer": {
                                    "typeParam": {
                                      "name": "U"
                                    }
                                  }
                                }
                              ],
                              "typeName": "NativeU8Enum"
                            }
                          },
                          "trueType": {
                            "repr": "U",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "U"
                            }
                          },
                          "falseType": {
                            "repr": "",
                            "kind": "conditional",
                            "conditionalType": {
                              "checkType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "extendsType": {
                                "repr": "NativeI8Enum",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "infer",
                                      "infer": {
                                        "typeParam": {
                                          "name": "U"
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "NativeI8Enum"
                                }
                              },
                              "trueType": {
                                "repr": "U",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "U"
                                }
                              },
                              "falseType": {
                                "repr": "",
                                "kind": "conditional",
                                "conditionalType": {
                                  "checkType": {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  },
                                  "extendsType": {
                                    "repr": "NativeU16Enum",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "",
                                          "kind": "infer",
                                          "infer": {
                                            "typeParam": {
                                              "name": "U"
                                            }
                                          }
                                        }
                                      ],
                                      "typeName": "NativeU16Enum"
                                    }
                                  },
                                  "trueType": {
                                    "repr": "U",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "U"
                                    }
                                  },
                                  "falseType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeI16Enum",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "",
                                              "kind": "infer",
                                              "infer": {
                                                "typeParam": {
                                                  "name": "U"
                                                }
                                              }
                                            }
                                          ],
                                          "typeName": "NativeI16Enum"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "U",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "U"
                                        }
                                      },
                                      "falseType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeU32Enum",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": [
                                                {
                                                  "repr": "",
                                                  "kind": "infer",
                                                  "infer": {
                                                    "typeParam": {
                                                      "name": "U"
                                                    }
                                                  }
                                                }
                                              ],
                                              "typeName": "NativeU32Enum"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "U",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "U"
                                            }
                                          },
                                          "falseType": {
                                            "repr": "",
                                            "kind": "conditional",
                                            "conditionalType": {
                                              "checkType": {
                                                "repr": "T",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "T"
                                                }
                                              },
                                              "extendsType": {
                                                "repr": "NativeI32Enum",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": [
                                                    {
                                                      "repr": "",
                                                      "kind": "infer",
                                                      "infer": {
                                                        "typeParam": {
                                                          "name": "U"
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "typeName": "NativeI32Enum"
                                                }
                                              },
                                              "trueType": {
                                                "repr": "U",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "U"
                                                }
                                              },
                                              "falseType": {
                                                "repr": "number",
                                                "kind": "keyword",
                                                "keyword": "number"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "falseType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "NativeBigIntType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "NativeBigIntType"
                            }
                          },
                          "trueType": {
                            "repr": "bigint",
                            "kind": "keyword",
                            "keyword": "bigint"
                          },
                          "falseType": {
                            "repr": "",
                            "kind": "conditional",
                            "conditionalType": {
                              "checkType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "extendsType": {
                                "repr": "NativeBooleanType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "NativeBooleanType"
                                }
                              },
                              "trueType": {
                                "repr": "boolean",
                                "kind": "keyword",
                                "keyword": "boolean"
                              },
                              "falseType": {
                                "repr": "",
                                "kind": "conditional",
                                "conditionalType": {
                                  "checkType": {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  },
                                  "extendsType": {
                                    "repr": "NativePointerType",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "NativePointerType"
                                    }
                                  },
                                  "trueType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeTypedPointer",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "",
                                              "kind": "infer",
                                              "infer": {
                                                "typeParam": {
                                                  "name": "U"
                                                }
                                              }
                                            }
                                          ],
                                          "typeName": "NativeTypedPointer"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "",
                                        "kind": "union",
                                        "union": [
                                          {
                                            "repr": "U",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "U"
                                            }
                                          },
                                          {
                                            "repr": "null",
                                            "kind": "keyword",
                                            "keyword": "null"
                                          }
                                        ]
                                      },
                                      "falseType": {
                                        "repr": "PointerValue",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "PointerValue"
                                        }
                                      }
                                    }
                                  },
                                  "falseType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeBufferType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "NativeBufferType"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "PointerValue",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "PointerValue"
                                        }
                                      },
                                      "falseType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeFunctionType",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "NativeFunctionType"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "",
                                            "kind": "conditional",
                                            "conditionalType": {
                                              "checkType": {
                                                "repr": "T",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "T"
                                                }
                                              },
                                              "extendsType": {
                                                "repr": "NativeTypedFunction",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": [
                                                    {
                                                      "repr": "",
                                                      "kind": "infer",
                                                      "infer": {
                                                        "typeParam": {
                                                          "name": "U"
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "typeName": "NativeTypedFunction"
                                                }
                                              },
                                              "trueType": {
                                                "repr": "",
                                                "kind": "union",
                                                "union": [
                                                  {
                                                    "repr": "PointerObject",
                                                    "kind": "typeRef",
                                                    "typeRef": {
                                                      "typeParams": [
                                                        {
                                                          "repr": "U",
                                                          "kind": "typeRef",
                                                          "typeRef": {
                                                            "typeParams": null,
                                                            "typeName": "U"
                                                          }
                                                        }
                                                      ],
                                                      "typeName": "PointerObject"
                                                    }
                                                  },
                                                  {
                                                    "repr": "null",
                                                    "kind": "keyword",
                                                    "keyword": "null"
                                                  }
                                                ]
                                              },
                                              "falseType": {
                                                "repr": "PointerValue",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "PointerValue"
                                                }
                                              }
                                            }
                                          },
                                          "falseType": {
                                            "repr": "never",
                                            "kind": "keyword",
                                            "keyword": "never"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "NativeType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeType"
                    }
                  },
                  "default": {
                    "repr": "NativeType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeType"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "FromNativeResultType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5433,
              "col": 2,
              "byteIndex": 169911
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Type conversion for foreign symbol return types.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  },
                  "extendsType": {
                    "repr": "NativeStructType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeStructType"
                    }
                  },
                  "trueType": {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "extendsType": {
                        "repr": "NativeNumberType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "NativeNumberType"
                        }
                      },
                      "trueType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "NativeU8Enum",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "",
                                  "kind": "infer",
                                  "infer": {
                                    "typeParam": {
                                      "name": "U"
                                    }
                                  }
                                }
                              ],
                              "typeName": "NativeU8Enum"
                            }
                          },
                          "trueType": {
                            "repr": "U",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "U"
                            }
                          },
                          "falseType": {
                            "repr": "",
                            "kind": "conditional",
                            "conditionalType": {
                              "checkType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "extendsType": {
                                "repr": "NativeI8Enum",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "infer",
                                      "infer": {
                                        "typeParam": {
                                          "name": "U"
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "NativeI8Enum"
                                }
                              },
                              "trueType": {
                                "repr": "U",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "U"
                                }
                              },
                              "falseType": {
                                "repr": "",
                                "kind": "conditional",
                                "conditionalType": {
                                  "checkType": {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  },
                                  "extendsType": {
                                    "repr": "NativeU16Enum",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "",
                                          "kind": "infer",
                                          "infer": {
                                            "typeParam": {
                                              "name": "U"
                                            }
                                          }
                                        }
                                      ],
                                      "typeName": "NativeU16Enum"
                                    }
                                  },
                                  "trueType": {
                                    "repr": "U",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "U"
                                    }
                                  },
                                  "falseType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeI16Enum",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "",
                                              "kind": "infer",
                                              "infer": {
                                                "typeParam": {
                                                  "name": "U"
                                                }
                                              }
                                            }
                                          ],
                                          "typeName": "NativeI16Enum"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "U",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "U"
                                        }
                                      },
                                      "falseType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeU32Enum",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": [
                                                {
                                                  "repr": "",
                                                  "kind": "infer",
                                                  "infer": {
                                                    "typeParam": {
                                                      "name": "U"
                                                    }
                                                  }
                                                }
                                              ],
                                              "typeName": "NativeU32Enum"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "U",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "U"
                                            }
                                          },
                                          "falseType": {
                                            "repr": "",
                                            "kind": "conditional",
                                            "conditionalType": {
                                              "checkType": {
                                                "repr": "T",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "T"
                                                }
                                              },
                                              "extendsType": {
                                                "repr": "NativeI32Enum",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": [
                                                    {
                                                      "repr": "",
                                                      "kind": "infer",
                                                      "infer": {
                                                        "typeParam": {
                                                          "name": "U"
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "typeName": "NativeI32Enum"
                                                }
                                              },
                                              "trueType": {
                                                "repr": "U",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "U"
                                                }
                                              },
                                              "falseType": {
                                                "repr": "number",
                                                "kind": "keyword",
                                                "keyword": "number"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "falseType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "NativeBigIntType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "NativeBigIntType"
                            }
                          },
                          "trueType": {
                            "repr": "bigint",
                            "kind": "keyword",
                            "keyword": "bigint"
                          },
                          "falseType": {
                            "repr": "",
                            "kind": "conditional",
                            "conditionalType": {
                              "checkType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "extendsType": {
                                "repr": "NativeBooleanType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "NativeBooleanType"
                                }
                              },
                              "trueType": {
                                "repr": "boolean",
                                "kind": "keyword",
                                "keyword": "boolean"
                              },
                              "falseType": {
                                "repr": "",
                                "kind": "conditional",
                                "conditionalType": {
                                  "checkType": {
                                    "repr": "T",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "T"
                                    }
                                  },
                                  "extendsType": {
                                    "repr": "NativePointerType",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "NativePointerType"
                                    }
                                  },
                                  "trueType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeTypedPointer",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": [
                                            {
                                              "repr": "",
                                              "kind": "infer",
                                              "infer": {
                                                "typeParam": {
                                                  "name": "U"
                                                }
                                              }
                                            }
                                          ],
                                          "typeName": "NativeTypedPointer"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "",
                                        "kind": "union",
                                        "union": [
                                          {
                                            "repr": "U",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "U"
                                            }
                                          },
                                          {
                                            "repr": "null",
                                            "kind": "keyword",
                                            "keyword": "null"
                                          }
                                        ]
                                      },
                                      "falseType": {
                                        "repr": "PointerValue",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "PointerValue"
                                        }
                                      }
                                    }
                                  },
                                  "falseType": {
                                    "repr": "",
                                    "kind": "conditional",
                                    "conditionalType": {
                                      "checkType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "extendsType": {
                                        "repr": "NativeBufferType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "NativeBufferType"
                                        }
                                      },
                                      "trueType": {
                                        "repr": "PointerValue",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "PointerValue"
                                        }
                                      },
                                      "falseType": {
                                        "repr": "",
                                        "kind": "conditional",
                                        "conditionalType": {
                                          "checkType": {
                                            "repr": "T",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "T"
                                            }
                                          },
                                          "extendsType": {
                                            "repr": "NativeFunctionType",
                                            "kind": "typeRef",
                                            "typeRef": {
                                              "typeParams": null,
                                              "typeName": "NativeFunctionType"
                                            }
                                          },
                                          "trueType": {
                                            "repr": "",
                                            "kind": "conditional",
                                            "conditionalType": {
                                              "checkType": {
                                                "repr": "T",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "T"
                                                }
                                              },
                                              "extendsType": {
                                                "repr": "NativeTypedFunction",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": [
                                                    {
                                                      "repr": "",
                                                      "kind": "infer",
                                                      "infer": {
                                                        "typeParam": {
                                                          "name": "U"
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "typeName": "NativeTypedFunction"
                                                }
                                              },
                                              "trueType": {
                                                "repr": "",
                                                "kind": "union",
                                                "union": [
                                                  {
                                                    "repr": "PointerObject",
                                                    "kind": "typeRef",
                                                    "typeRef": {
                                                      "typeParams": [
                                                        {
                                                          "repr": "U",
                                                          "kind": "typeRef",
                                                          "typeRef": {
                                                            "typeParams": null,
                                                            "typeName": "U"
                                                          }
                                                        }
                                                      ],
                                                      "typeName": "PointerObject"
                                                    }
                                                  },
                                                  {
                                                    "repr": "null",
                                                    "kind": "keyword",
                                                    "keyword": "null"
                                                  }
                                                ]
                                              },
                                              "falseType": {
                                                "repr": "PointerValue",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "PointerValue"
                                                }
                                              }
                                            }
                                          },
                                          "falseType": {
                                            "repr": "",
                                            "kind": "conditional",
                                            "conditionalType": {
                                              "checkType": {
                                                "repr": "T",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "T"
                                                }
                                              },
                                              "extendsType": {
                                                "repr": "NativeVoidType",
                                                "kind": "typeRef",
                                                "typeRef": {
                                                  "typeParams": null,
                                                  "typeName": "NativeVoidType"
                                                }
                                              },
                                              "trueType": {
                                                "repr": "void",
                                                "kind": "keyword",
                                                "keyword": "void"
                                              },
                                              "falseType": {
                                                "repr": "never",
                                                "kind": "keyword",
                                                "keyword": "never"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  },
                  "default": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "FromNativeParameterTypes",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5457,
              "col": 2,
              "byteIndex": 170807
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "T",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "T"
                              }
                            },
                            "indexType": {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "extendsType": {
                    "repr": "",
                    "kind": "tuple",
                    "tuple": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ]
                  },
                  "trueType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "FromNativeType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "indexType": {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              }
                            }
                          }
                        ],
                        "typeName": "FromNativeType"
                      }
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": [
                          {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "readonly",
                              "tsType": {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "",
                                  "kind": "indexedAccess",
                                  "indexedAccess": {
                                    "readonly": false,
                                    "objType": {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    },
                                    "indexType": {
                                      "repr": "number",
                                      "kind": "keyword",
                                      "keyword": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "extendsType": {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ]
                      },
                      "trueType": {
                        "repr": "",
                        "kind": "typeOperator",
                        "typeOperator": {
                          "operator": "readonly",
                          "tsType": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "FromNativeType",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "",
                                    "kind": "indexedAccess",
                                    "indexedAccess": {
                                      "readonly": false,
                                      "objType": {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      },
                                      "indexType": {
                                        "repr": "number",
                                        "kind": "keyword",
                                        "keyword": "number"
                                      }
                                    }
                                  }
                                ],
                                "typeName": "FromNativeType"
                              }
                            }
                          }
                        }
                      },
                      "falseType": {
                        "repr": "",
                        "kind": "conditional",
                        "conditionalType": {
                          "checkType": {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          },
                          "extendsType": {
                            "repr": "",
                            "kind": "typeOperator",
                            "typeOperator": {
                              "operator": "readonly",
                              "tsType": {
                                "repr": "",
                                "kind": "tuple",
                                "tuple": [
                                  {
                                    "repr": "",
                                    "kind": "rest",
                                    "rest": {
                                      "repr": "",
                                      "kind": "array",
                                      "array": {
                                        "repr": "NativeType",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "NativeType"
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          "trueType": {
                            "repr": "",
                            "kind": "mapped",
                            "mappedType": {
                              "typeParam": {
                                "name": "K",
                                "constraint": {
                                  "repr": "",
                                  "kind": "typeOperator",
                                  "typeOperator": {
                                    "operator": "keyof",
                                    "tsType": {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    }
                                  }
                                }
                              },
                              "tsType": {
                                "repr": "FromNativeType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "indexedAccess",
                                      "indexedAccess": {
                                        "readonly": false,
                                        "objType": {
                                          "repr": "T",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "T"
                                          }
                                        },
                                        "indexType": {
                                          "repr": "K",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "K"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "FromNativeType"
                                }
                              }
                            }
                          },
                          "falseType": {
                            "repr": "never",
                            "kind": "keyword",
                            "keyword": "never"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NativeType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NativeType"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "ForeignFunction",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5472,
              "col": 2,
              "byteIndex": 171285
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The interface for a foreign function as defined by its parameter and result\ntypes.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "jsDoc": {
                    "doc": "Name of the symbol.\n\nDefaults to the key name in symbols object."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5480,
                    "col": 4,
                    "byteIndex": 171587
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "parameters",
                  "jsDoc": {
                    "doc": "The parameters of the foreign function."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5482,
                    "col": 4,
                    "byteIndex": 171657
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Parameters",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Parameters"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "result",
                  "jsDoc": {
                    "doc": "The result (return value) of the foreign function."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5484,
                    "col": 4,
                    "byteIndex": 171747
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Result",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Result"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "nonblocking",
                  "jsDoc": {
                    "doc": "When `true`, function calls will run on a dedicated blocking thread and\nwill return a `Promise` resolving to the `result`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5487,
                    "col": 4,
                    "byteIndex": 171908
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "NonBlocking",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NonBlocking"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "optional",
                  "jsDoc": {
                    "doc": "When `true`, dlopen will not fail if the symbol is not found.\nInstead, the symbol will be set to `null`.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5492,
                    "col": 4,
                    "byteIndex": 172093
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "Parameters",
                  "constraint": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NativeType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NativeType"
                          }
                        }
                      }
                    }
                  },
                  "default": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NativeType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NativeType"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "name": "Result",
                  "constraint": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  },
                  "default": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  }
                },
                {
                  "name": "NonBlocking",
                  "constraint": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "default": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  }
                }
              ]
            }
          },
          {
            "name": "ForeignStatic",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5497,
              "col": 2,
              "byteIndex": 172146
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "name",
                  "jsDoc": {
                    "doc": "Name of the symbol, defaults to the key name in symbols object."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5499,
                    "col": 4,
                    "byteIndex": 172296
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "type",
                  "jsDoc": {
                    "doc": "The type of the foreign static value."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5501,
                    "col": 4,
                    "byteIndex": 172364
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Type",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Type"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "optional",
                  "jsDoc": {
                    "doc": "When `true`, dlopen will not fail if the symbol is not found.\nInstead, the symbol will be set to `null`.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5506,
                    "col": 4,
                    "byteIndex": 172534
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "Type",
                  "constraint": {
                    "repr": "NativeType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeType"
                    }
                  },
                  "default": {
                    "repr": "NativeType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeType"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "ForeignLibraryInterface",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5513,
              "col": 2,
              "byteIndex": 172637
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A foreign library interface descriptor.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [],
              "callSignatures": [],
              "indexSignatures": [
                {
                  "readonly": false,
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "name",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "ForeignFunction",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ForeignFunction"
                        }
                      },
                      {
                        "repr": "ForeignStatic",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ForeignStatic"
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5514,
                    "col": 4,
                    "byteIndex": 172684
                  }
                }
              ],
              "typeParams": []
            }
          },
          {
            "name": "StaticForeignSymbol",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5521,
              "col": 2,
              "byteIndex": 172821
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A utility type that infers a foreign symbol.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  },
                  "extendsType": {
                    "repr": "ForeignFunction",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ForeignFunction"
                    }
                  },
                  "trueType": {
                    "repr": "FromForeignFunction",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "FromForeignFunction"
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "extendsType": {
                        "repr": "ForeignStatic",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ForeignStatic"
                        }
                      },
                      "trueType": {
                        "repr": "FromNativeType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "T",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "T"
                                  }
                                },
                                "indexType": {
                                  "repr": "type",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "type"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "FromNativeType"
                        }
                      },
                      "falseType": {
                        "repr": "never",
                        "kind": "keyword",
                        "keyword": "never"
                      }
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "ForeignFunction",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ForeignFunction"
                        }
                      },
                      {
                        "repr": "ForeignStatic",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ForeignStatic"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "FromForeignFunction",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5528,
              "col": 2,
              "byteIndex": 173058
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "",
                    "kind": "indexedAccess",
                    "indexedAccess": {
                      "readonly": false,
                      "objType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "indexType": {
                        "repr": "parameters",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "parameters"
                        }
                      }
                    }
                  },
                  "extendsType": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": []
                      }
                    }
                  },
                  "trueType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "StaticForeignSymbolReturnType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "T",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "T"
                              }
                            }
                          ],
                          "typeName": "StaticForeignSymbolReturnType"
                        }
                      },
                      "params": [],
                      "typeParams": []
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "StaticForeignSymbolReturnType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "T",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "T"
                              }
                            }
                          ],
                          "typeName": "StaticForeignSymbolReturnType"
                        }
                      },
                      "params": [
                        {
                          "kind": "rest",
                          "arg": {
                            "kind": "identifier",
                            "name": "args",
                            "optional": false,
                            "tsType": null
                          },
                          "tsType": {
                            "repr": "ToNativeParameterTypes",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "",
                                  "kind": "indexedAccess",
                                  "indexedAccess": {
                                    "readonly": false,
                                    "objType": {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    },
                                    "indexType": {
                                      "repr": "parameters",
                                      "kind": "literal",
                                      "literal": {
                                        "kind": "string",
                                        "string": "parameters"
                                      }
                                    }
                                  }
                                }
                              ],
                              "typeName": "ToNativeParameterTypes"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "ForeignFunction",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ForeignFunction"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "StaticForeignSymbolReturnType",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5536,
              "col": 2,
              "byteIndex": 173341
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "ConditionalAsync",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "",
                      "kind": "indexedAccess",
                      "indexedAccess": {
                        "readonly": false,
                        "objType": {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        "indexType": {
                          "repr": "nonblocking",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "nonblocking"
                          }
                        }
                      }
                    },
                    {
                      "repr": "FromNativeResultType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "indexType": {
                                "repr": "result",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "result"
                                }
                              }
                            }
                          }
                        ],
                        "typeName": "FromNativeResultType"
                      }
                    }
                  ],
                  "typeName": "ConditionalAsync"
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "ForeignFunction",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ForeignFunction"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "ConditionalAsync",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5541,
              "col": 2,
              "byteIndex": 173516
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "IsAsync",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "IsAsync"
                    }
                  },
                  "extendsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "trueType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "falseType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "IsAsync",
                  "constraint": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      },
                      {
                        "repr": "undefined",
                        "kind": "keyword",
                        "keyword": "undefined"
                      }
                    ]
                  }
                },
                {
                  "name": "T"
                }
              ]
            }
          },
          {
            "name": "StaticForeignLibraryInterface",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5550,
              "col": 2,
              "byteIndex": 173734
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A utility type that infers a foreign library interface.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "mapped",
                "mappedType": {
                  "typeParam": {
                    "name": "K",
                    "constraint": {
                      "repr": "",
                      "kind": "typeOperator",
                      "typeOperator": {
                        "operator": "keyof",
                        "tsType": {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      }
                    }
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "conditional",
                    "conditionalType": {
                      "checkType": {
                        "repr": "",
                        "kind": "indexedAccess",
                        "indexedAccess": {
                          "readonly": false,
                          "objType": {
                            "repr": "",
                            "kind": "indexedAccess",
                            "indexedAccess": {
                              "readonly": false,
                              "objType": {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              },
                              "indexType": {
                                "repr": "K",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "K"
                                }
                              }
                            }
                          },
                          "indexType": {
                            "repr": "optional",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "optional"
                            }
                          }
                        }
                      },
                      "extendsType": {
                        "repr": "true",
                        "kind": "literal",
                        "literal": {
                          "kind": "boolean",
                          "boolean": true
                        }
                      },
                      "trueType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "StaticForeignSymbol",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "",
                                  "kind": "indexedAccess",
                                  "indexedAccess": {
                                    "readonly": false,
                                    "objType": {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    },
                                    "indexType": {
                                      "repr": "K",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "K"
                                      }
                                    }
                                  }
                                }
                              ],
                              "typeName": "StaticForeignSymbol"
                            }
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      },
                      "falseType": {
                        "repr": "StaticForeignSymbol",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "T",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "T"
                                  }
                                },
                                "indexType": {
                                  "repr": "K",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "K"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "StaticForeignSymbol"
                        }
                      }
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "ForeignLibraryInterface",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ForeignLibraryInterface"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "PointerObject",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5570,
              "col": 2,
              "byteIndex": 174449
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A non-null pointer, represented as an object\nat runtime. The object's prototype is `null`\nand cannot be changed. The object cannot be\nassigned to either and is thus entirely read-only.\n\nTo interact with memory through a pointer use the\n{@linkcode UnsafePointerView} class. To create a\npointer from an address or the get the address of\na pointer use the static methods of the\n{@linkcode UnsafePointer} class.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "brand",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5571,
                    "col": 4,
                    "byteIndex": 174499
                  },
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "tsType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "T",
                  "default": {
                    "repr": "unknown",
                    "kind": "keyword",
                    "keyword": "unknown"
                  }
                }
              ]
            }
          },
          {
            "name": "PointerValue",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5579,
              "col": 2,
              "byteIndex": 174667
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Pointers are represented either with a {@linkcode PointerObject}\nobject or a `null` if the pointer is null.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "null",
                    "kind": "keyword",
                    "keyword": "null"
                  },
                  {
                    "repr": "PointerObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "PointerObject"
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T",
                  "default": {
                    "repr": "unknown",
                    "kind": "keyword",
                    "keyword": "unknown"
                  }
                }
              ]
            }
          },
          {
            "name": "UnsafePointer",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5585,
              "col": 2,
              "byteIndex": 174842
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A collection of static functions for interacting with pointer objects.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [],
              "properties": [],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Create a pointer from a numeric value. This one is <i>really</i> dangerous!"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": true,
                  "name": "create",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "bigint",
                          "kind": "keyword",
                          "keyword": "bigint"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "PointerValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "PointerValue"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "T",
                        "default": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5587,
                    "col": 4,
                    "byteIndex": 174962
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Returns `true` if the two pointers point to the same address."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": true,
                  "name": "equals",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "a",
                        "optional": false,
                        "tsType": {
                          "repr": "PointerValue",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              }
                            ],
                            "typeName": "PointerValue"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "b",
                        "optional": false,
                        "tsType": {
                          "repr": "PointerValue",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              }
                            ],
                            "typeName": "PointerValue"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "T",
                        "default": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5589,
                    "col": 4,
                    "byteIndex": 175099
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Return the direct memory pointer to the typed array in memory."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": true,
                  "name": "of",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Deno.UnsafeCallback",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Deno.UnsafeCallback"
                              }
                            },
                            {
                              "repr": "BufferSource",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "BufferSource"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "PointerValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "PointerValue"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "T",
                        "default": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5591,
                    "col": 4,
                    "byteIndex": 175254
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Return a new pointer offset from the original by `offset` bytes."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": true,
                  "name": "offset",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "PointerObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PointerObject"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "PointerValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "PointerValue"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "T",
                        "default": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5595,
                    "col": 4,
                    "byteIndex": 175431
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Get the numeric value of a pointer"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": true,
                  "name": "value",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "PointerValue",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PointerValue"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "bigint",
                      "kind": "keyword",
                      "keyword": "bigint"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5600,
                    "col": 4,
                    "byteIndex": 175583
                  }
                }
              ],
              "extends": null,
              "implements": [],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "UnsafePointerView",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5610,
              "col": 2,
              "byteIndex": 175945
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An unsafe pointer view to a memory location as specified by the `pointer`\nvalue. The `UnsafePointerView` API follows the standard built in interface\n{@linkcode DataView} for accessing the underlying types at an memory\nlocation (numbers, strings and raw bytes).\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [
                {
                  "accessibility": null,
                  "name": "constructor",
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "pointer",
                      "optional": false,
                      "tsType": {
                        "repr": "PointerObject",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "PointerObject"
                        }
                      }
                    }
                  ],
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5611,
                    "col": 4,
                    "byteIndex": 175982
                  }
                }
              ],
              "properties": [
                {
                  "tsType": {
                    "repr": "PointerObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PointerObject"
                    }
                  },
                  "readonly": false,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "pointer",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5613,
                    "col": 4,
                    "byteIndex": 176024
                  }
                }
              ],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Gets a boolean at the specified byte offset from the pointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getBool",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5616,
                    "col": 4,
                    "byteIndex": 176126
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets an unsigned 8-bit integer at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getUint8",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5619,
                    "col": 4,
                    "byteIndex": 176261
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets a signed 8-bit integer at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getInt8",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5622,
                    "col": 4,
                    "byteIndex": 176393
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets an unsigned 16-bit integer at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getUint16",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5625,
                    "col": 4,
                    "byteIndex": 176528
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets a signed 16-bit integer at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getInt16",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5628,
                    "col": 4,
                    "byteIndex": 176662
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets an unsigned 32-bit integer at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getUint32",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5631,
                    "col": 4,
                    "byteIndex": 176798
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets a signed 32-bit integer at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getInt32",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5634,
                    "col": 4,
                    "byteIndex": 176932
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets an unsigned 64-bit integer at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getBigUint64",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "bigint",
                      "kind": "keyword",
                      "keyword": "bigint"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5637,
                    "col": 4,
                    "byteIndex": 177068
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets a signed 64-bit integer at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getBigInt64",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "bigint",
                      "kind": "keyword",
                      "keyword": "bigint"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5640,
                    "col": 4,
                    "byteIndex": 177205
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets a signed 32-bit float at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getFloat32",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5643,
                    "col": 4,
                    "byteIndex": 177339
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets a signed 64-bit float at the specified byte offset from the\npointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getFloat64",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5646,
                    "col": 4,
                    "byteIndex": 177472
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets a pointer at the specified byte offset from the pointer"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getPointer",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "PointerValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "PointerValue"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "T",
                        "default": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5648,
                    "col": 4,
                    "byteIndex": 177585
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets a C string (`null` terminated string) at the specified byte offset\nfrom the pointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getCString",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5651,
                    "col": 4,
                    "byteIndex": 177756
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets a C string (`null` terminated string) at the specified byte offset\nfrom the specified pointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": true,
                  "name": "getCString",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "pointer",
                        "optional": false,
                        "tsType": {
                          "repr": "PointerObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PointerObject"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5654,
                    "col": 4,
                    "byteIndex": 177915
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets an `ArrayBuffer` of length `byteLength` at the specified byte\noffset from the pointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getArrayBuffer",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "byteLength",
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "ArrayBuffer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBuffer"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5657,
                    "col": 4,
                    "byteIndex": 178097
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Gets an `ArrayBuffer` of length `byteLength` at the specified byte\noffset from the specified pointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": true,
                  "name": "getArrayBuffer",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "pointer",
                        "optional": false,
                        "tsType": {
                          "repr": "PointerObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PointerObject"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "byteLength",
                        "optional": false,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "ArrayBuffer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ArrayBuffer"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5660,
                    "col": 4,
                    "byteIndex": 178287
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Copies the memory of the pointer into a typed array.\n\nLength is determined from the typed array's `byteLength`.\n\nAlso takes optional byte offset from the pointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "copyInto",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "destination",
                        "optional": false,
                        "tsType": {
                          "repr": "BufferSource",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "BufferSource"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5670,
                    "col": 4,
                    "byteIndex": 178613
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Copies the memory of the specified pointer into a typed array.\n\nLength is determined from the typed array's `byteLength`.\n\nAlso takes optional byte offset from the pointer."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": true,
                  "name": "copyInto",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "pointer",
                        "optional": false,
                        "tsType": {
                          "repr": "PointerObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PointerObject"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "destination",
                        "optional": false,
                        "tsType": {
                          "repr": "BufferSource",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "BufferSource"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "offset",
                        "optional": true,
                        "tsType": {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5676,
                    "col": 4,
                    "byteIndex": 178887
                  }
                }
              ],
              "extends": null,
              "implements": [],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "UnsafeFnPointer",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5688,
              "col": 2,
              "byteIndex": 179139
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An unsafe pointer to a function, for calling functions that are not present\nas symbols.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [
                {
                  "accessibility": null,
                  "name": "constructor",
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "pointer",
                      "optional": false,
                      "tsType": {
                        "repr": "PointerObject",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "NoInfer",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "Omit",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": [
                                        {
                                          "repr": "Fn",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "Fn"
                                          }
                                        },
                                        {
                                          "repr": "nonblocking",
                                          "kind": "literal",
                                          "literal": {
                                            "kind": "string",
                                            "string": "nonblocking"
                                          }
                                        }
                                      ],
                                      "typeName": "Omit"
                                    }
                                  }
                                ],
                                "typeName": "NoInfer"
                              }
                            }
                          ],
                          "typeName": "PointerObject"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "definition",
                      "optional": false,
                      "tsType": {
                        "repr": "Fn",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Fn"
                        }
                      }
                    }
                  ],
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5694,
                    "col": 4,
                    "byteIndex": 179344
                  }
                }
              ],
              "properties": [
                {
                  "jsDoc": {
                    "doc": "The pointer to the function."
                  },
                  "tsType": {
                    "repr": "PointerObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Fn",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Fn"
                          }
                        }
                      ],
                      "typeName": "PointerObject"
                    }
                  },
                  "readonly": false,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "pointer",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5690,
                    "col": 4,
                    "byteIndex": 179248
                  }
                },
                {
                  "jsDoc": {
                    "doc": "The definition of the function."
                  },
                  "tsType": {
                    "repr": "Fn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Fn"
                    }
                  },
                  "readonly": false,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "definition",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5692,
                    "col": 4,
                    "byteIndex": 179323
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Call the foreign function."
                  },
                  "tsType": {
                    "repr": "FromForeignFunction",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Fn",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Fn"
                          }
                        }
                      ],
                      "typeName": "FromForeignFunction"
                    }
                  },
                  "readonly": false,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "call",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5700,
                    "col": 4,
                    "byteIndex": 179493
                  }
                }
              ],
              "indexSignatures": [],
              "methods": [],
              "extends": null,
              "implements": [],
              "typeParams": [
                {
                  "name": "Fn",
                  "constraint": {
                    "repr": "ForeignFunction",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ForeignFunction"
                    }
                  }
                }
              ],
              "superTypeParams": []
            }
          },
          {
            "name": "UnsafeCallbackDefinition",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5707,
              "col": 2,
              "byteIndex": 179609
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Definition of a unsafe callback function.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "parameters",
                  "jsDoc": {
                    "doc": "The parameters of the callbacks."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5712,
                    "col": 4,
                    "byteIndex": 179832
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Parameters",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Parameters"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "result",
                  "jsDoc": {
                    "doc": "The current result of the callback."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5714,
                    "col": 4,
                    "byteIndex": 179907
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Result",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Result"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "Parameters",
                  "constraint": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NativeType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NativeType"
                          }
                        }
                      }
                    }
                  },
                  "default": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NativeType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NativeType"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "name": "Result",
                  "constraint": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  },
                  "default": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "UnsafeCallbackFunction",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5721,
              "col": 2,
              "byteIndex": 179995
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An unsafe callback function.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "Parameters",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Parameters"
                    }
                  },
                  "extendsType": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": []
                      }
                    }
                  },
                  "trueType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "ToNativeResultType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Result",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Result"
                              }
                            }
                          ],
                          "typeName": "ToNativeResultType"
                        }
                      },
                      "params": [],
                      "typeParams": []
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "ToNativeResultType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "Result",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Result"
                              }
                            }
                          ],
                          "typeName": "ToNativeResultType"
                        }
                      },
                      "params": [
                        {
                          "kind": "rest",
                          "arg": {
                            "kind": "identifier",
                            "name": "args",
                            "optional": false,
                            "tsType": null
                          },
                          "tsType": {
                            "repr": "FromNativeParameterTypes",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "Parameters",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "Parameters"
                                  }
                                }
                              ],
                              "typeName": "FromNativeParameterTypes"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  }
                }
              },
              "typeParams": [
                {
                  "name": "Parameters",
                  "constraint": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NativeType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NativeType"
                          }
                        }
                      }
                    }
                  },
                  "default": {
                    "repr": "",
                    "kind": "typeOperator",
                    "typeOperator": {
                      "operator": "readonly",
                      "tsType": {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "NativeType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "NativeType"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "name": "Result",
                  "constraint": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  },
                  "default": {
                    "repr": "NativeResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NativeResultType"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "UnsafeCallback",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5750,
              "col": 2,
              "byteIndex": 181282
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An unsafe function pointer for passing JavaScript functions as C function\npointers to foreign function calls.\n\nThe function pointer remains valid until the `close()` method is called.\n\nAll `UnsafeCallback` are always thread safe in that they can be called from\nforeign threads without crashing. However, they do not wake up the Deno event\nloop by default.\n\nIf a callback is to be called from foreign threads, use the `threadSafe()`\nstatic constructor or explicitly call `ref()` to have the callback wake up\nthe Deno event loop when called from foreign threads. This also stops\nDeno's process from exiting while the callback still exists and is not\nunref'ed.\n\nUse `deref()` to then allow Deno's process to exit. Calling `deref()` on\na ref'ed callback does not stop it from waking up the Deno event loop when\ncalled from foreign threads.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [
                {
                  "accessibility": null,
                  "name": "constructor",
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "definition",
                      "optional": false,
                      "tsType": {
                        "repr": "Definition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Definition"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "callback",
                      "optional": false,
                      "tsType": {
                        "repr": "UnsafeCallbackFunction",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "Definition",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "Definition"
                                  }
                                },
                                "indexType": {
                                  "repr": "parameters",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "parameters"
                                  }
                                }
                              }
                            },
                            {
                              "repr": "",
                              "kind": "indexedAccess",
                              "indexedAccess": {
                                "readonly": false,
                                "objType": {
                                  "repr": "Definition",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "Definition"
                                  }
                                },
                                "indexType": {
                                  "repr": "result",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "result"
                                  }
                                }
                              }
                            }
                          ],
                          "typeName": "UnsafeCallbackFunction"
                        }
                      }
                    }
                  ],
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5754,
                    "col": 4,
                    "byteIndex": 181409
                  }
                }
              ],
              "properties": [
                {
                  "jsDoc": {
                    "doc": "The pointer to the unsafe callback."
                  },
                  "tsType": {
                    "repr": "PointerObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Definition",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Definition"
                          }
                        }
                      ],
                      "typeName": "PointerObject"
                    }
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "pointer",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5763,
                    "col": 4,
                    "byteIndex": 181623
                  }
                },
                {
                  "jsDoc": {
                    "doc": "The definition of the unsafe callback."
                  },
                  "tsType": {
                    "repr": "Definition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Definition"
                    }
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "definition",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5765,
                    "col": 4,
                    "byteIndex": 181722
                  }
                },
                {
                  "jsDoc": {
                    "doc": "The callback function."
                  },
                  "tsType": {
                    "repr": "UnsafeCallbackFunction",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "Definition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Definition"
                              }
                            },
                            "indexType": {
                              "repr": "parameters",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "parameters"
                              }
                            }
                          }
                        },
                        {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "Definition",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Definition"
                              }
                            },
                            "indexType": {
                              "repr": "result",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "result"
                              }
                            }
                          }
                        }
                      ],
                      "typeName": "UnsafeCallbackFunction"
                    }
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "callback",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5767,
                    "col": 4,
                    "byteIndex": 181793
                  }
                }
              ],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Creates an {@linkcode UnsafeCallback} and calls `ref()` once to allow it to\nwake up the Deno event loop when called from foreign threads.\n\nThis also stops Deno's process from exiting while the callback still\nexists and is not unref'ed."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": true,
                  "name": "threadSafe",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "definition",
                        "optional": false,
                        "tsType": {
                          "repr": "Definition",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Definition"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "callback",
                        "optional": false,
                        "tsType": {
                          "repr": "UnsafeCallbackFunction",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "Definition",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Definition"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "parameters",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "parameters"
                                    }
                                  }
                                }
                              },
                              {
                                "repr": "",
                                "kind": "indexedAccess",
                                "indexedAccess": {
                                  "readonly": false,
                                  "objType": {
                                    "repr": "Definition",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Definition"
                                    }
                                  },
                                  "indexType": {
                                    "repr": "result",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "result"
                                    }
                                  }
                                }
                              }
                            ],
                            "typeName": "UnsafeCallbackFunction"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "UnsafeCallback",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "Definition",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Definition"
                            }
                          }
                        ],
                        "typeName": "UnsafeCallback"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "Definition",
                        "constraint": {
                          "repr": "UnsafeCallbackDefinition",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "UnsafeCallbackDefinition"
                          }
                        },
                        "default": {
                          "repr": "UnsafeCallbackDefinition",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "UnsafeCallbackDefinition"
                          }
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5779,
                    "col": 4,
                    "byteIndex": 182193
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Increments the callback's reference counting and returns the new\nreference count.\n\nAfter `ref()` has been called, the callback always wakes up the\nDeno event loop when called from foreign threads.\n\nIf the callback's reference count is non-zero, it keeps Deno's\nprocess from exiting."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "ref",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5799,
                    "col": 4,
                    "byteIndex": 182832
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Decrements the callback's reference counting and returns the new\nreference count.\n\nCalling `unref()` does not stop a callback from waking up the Deno\nevent loop when called from foreign threads.\n\nIf the callback's reference counter is zero, it no longer keeps\nDeno's process from exiting."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "unref",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5811,
                    "col": 4,
                    "byteIndex": 183211
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Removes the C function pointer associated with this instance.\n\nContinuing to use the instance or the C function pointer after closing\nthe `UnsafeCallback` will lead to errors and crashes.\n\nCalling this method sets the callback's reference counting to zero,\nstops the callback from waking up the Deno event loop when called from\nforeign threads and no longer keeps Deno's process from exiting."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "close",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5823,
                    "col": 4,
                    "byteIndex": 183696
                  }
                }
              ],
              "extends": null,
              "implements": [],
              "typeParams": [
                {
                  "name": "Definition",
                  "constraint": {
                    "repr": "UnsafeCallbackDefinition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "UnsafeCallbackDefinition"
                    }
                  },
                  "default": {
                    "repr": "UnsafeCallbackDefinition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "UnsafeCallbackDefinition"
                    }
                  }
                }
              ],
              "superTypeParams": []
            }
          },
          {
            "name": "DynamicLibrary",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5831,
              "col": 2,
              "byteIndex": 183869
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A dynamic library resource.  Use {@linkcode Deno.dlopen} to load a dynamic\nlibrary and return this interface.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [
                {
                  "name": "close",
                  "jsDoc": {
                    "doc": "Removes the pointers associated with the library symbols.\n\nContinuing to use symbols that are part of the library will lead to\nerrors and crashes.\n\nCalling this method will also immediately set any references to zero and\nwill no longer keep Deno's process from exiting."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5842,
                    "col": 4,
                    "byteIndex": 184395
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                }
              ],
              "properties": [
                {
                  "name": "symbols",
                  "jsDoc": {
                    "doc": "All of the registered library along with functions for calling them."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5833,
                    "col": 4,
                    "byteIndex": 184022
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "StaticForeignLibraryInterface",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "S",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "S"
                          }
                        }
                      ],
                      "typeName": "StaticForeignLibraryInterface"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "S",
                  "constraint": {
                    "repr": "ForeignLibraryInterface",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ForeignLibraryInterface"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "dlopen",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5889,
              "col": 2,
              "byteIndex": 185725
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Opens an external dynamic library and registers symbols, making foreign\nfunctions available to be called.\n\nRequires `allow-ffi` permission. Loading foreign dynamic libraries can in\ntheory bypass all of the sandbox permissions. While it is a separate\npermission users should acknowledge in practice that is effectively the\nsame as running with the `allow-all` permission.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "Given a C library which exports a foreign function named `add()`\n\n```ts\n// Determine library extension based on\n// your OS.\nlet libSuffix = \"\";\nswitch (Deno.build.os) {\n  case \"windows\":\n    libSuffix = \"dll\";\n    break;\n  case \"darwin\":\n    libSuffix = \"dylib\";\n    break;\n  default:\n    libSuffix = \"so\";\n    break;\n}\n\nconst libName = `./libadd.${libSuffix}`;\n// Open library and define exported symbols\nconst dylib = Deno.dlopen(\n  libName,\n  {\n    \"add\": { parameters: [\"isize\", \"isize\"], result: \"isize\" },\n  } as const,\n);\n\n// Call the symbol `add`\nconst result = dylib.symbols.add(35n, 34n); // 69n\n\nconsole.log(`Result from external addition of 35 and 34: ${result}`);\n```\n"
                },
                {
                  "kind": "tags",
                  "tags": [
                    "allow-ffi"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "FFI"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "filename",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "URL",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "URL"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "symbols",
                  "optional": false,
                  "tsType": {
                    "repr": "S",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "S"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "DynamicLibrary",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "S",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "S"
                      }
                    }
                  ],
                  "typeName": "DynamicLibrary"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "S",
                  "constraint": {
                    "repr": "ForeignLibraryInterface",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ForeignLibraryInterface"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "HttpClient",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5906,
              "col": 2,
              "byteIndex": 186281
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A custom `HttpClient` for use with {@linkcode fetch} function. This is\ndesigned to allow custom certificates or proxies to be used with `fetch()`.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "```ts\nconst caCert = await Deno.readTextFile(\"./ca.pem\");\nconst client = Deno.createHttpClient({ caCerts: [ caCert ] });\nconst req = await fetch(\"https://myserver.com\", { client });\n```\n"
                },
                {
                  "kind": "category",
                  "doc": "Fetch"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [],
              "properties": [],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Close the HTTP client."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "close",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5908,
                    "col": 4,
                    "byteIndex": 186367
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "[Symbol.dispose]",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5910,
                    "col": 4,
                    "byteIndex": 186387
                  }
                }
              ],
              "extends": null,
              "implements": [
                {
                  "repr": "Disposable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Disposable"
                  }
                }
              ],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "CreateHttpClientOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5918,
              "col": 2,
              "byteIndex": 186525
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The options used when creating a {@linkcode Deno.HttpClient}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Fetch"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "caCerts",
                  "jsDoc": {
                    "doc": "A list of root certificates that will be used in addition to the\ndefault root certificates to verify the peer's certificate.\n\nMust be in PEM format."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5923,
                    "col": 4,
                    "byteIndex": 186752
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "proxy",
                  "jsDoc": {
                    "doc": "A HTTP proxy to use for new connections."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5925,
                    "col": 4,
                    "byteIndex": 186828
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "Proxy",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Proxy"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "poolMaxIdlePerHost",
                  "jsDoc": {
                    "doc": "Sets the maximum number of idle connections per host allowed in the pool."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5927,
                    "col": 4,
                    "byteIndex": 186932
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "poolIdleTimeout",
                  "jsDoc": {
                    "doc": "Set an optional timeout for idle sockets being kept-alive.\nSet to false to disable the timeout."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5930,
                    "col": 4,
                    "byteIndex": 187079
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      },
                      {
                        "repr": "false",
                        "kind": "literal",
                        "literal": {
                          "kind": "boolean",
                          "boolean": false
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "http1",
                  "jsDoc": {
                    "doc": "Whether HTTP/1.1 is allowed or not.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5936,
                    "col": 4,
                    "byteIndex": 187206
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "http2",
                  "jsDoc": {
                    "doc": "Whether HTTP/2 is allowed or not.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "true"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5941,
                    "col": 4,
                    "byteIndex": 187307
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "allowHost",
                  "jsDoc": {
                    "doc": "Whether setting the host header is allowed or not.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5946,
                    "col": 4,
                    "byteIndex": 187426
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "Proxy",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5955,
              "col": 2,
              "byteIndex": 187586
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "The definition of a proxy when specifying\n{@linkcode Deno.CreateHttpClientOptions}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Fetch"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "url",
                  "jsDoc": {
                    "doc": "The string URL of the proxy server to use."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5957,
                    "col": 4,
                    "byteIndex": 187669
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "basicAuth",
                  "jsDoc": {
                    "doc": "The basic auth credentials to be used against the proxy server."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5959,
                    "col": 4,
                    "byteIndex": 187761
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "BasicAuth",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BasicAuth"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "BasicAuth",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 5968,
              "col": 2,
              "byteIndex": 187978
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Basic authentication credentials to be used with a {@linkcode Deno.Proxy}\nserver when specifying {@linkcode Deno.CreateHttpClientOptions}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Fetch"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "username",
                  "jsDoc": {
                    "doc": "The username to be used against the proxy server."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5970,
                    "col": 4,
                    "byteIndex": 188072
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "password",
                  "jsDoc": {
                    "doc": "The password to be used against the proxy server."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 5972,
                    "col": 4,
                    "byteIndex": 188155
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "createHttpClient",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6006,
              "col": 2,
              "byteIndex": 189395
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Create a custom HttpClient to use with {@linkcode fetch}. This is an\nextension of the web platform Fetch API which allows Deno to use custom\nTLS CA certificates and connect via a proxy while using `fetch()`.\n\nThe `cert` and `key` options can be used to specify a client certificate\nand key to use when connecting to a server that requires client\nauthentication (mutual TLS or mTLS). The `cert` and `key` options must be\nprovided in PEM format.\n",
              "tags": [
                {
                  "kind": "example",
                  "doc": "```ts\nconst caCert = await Deno.readTextFile(\"./ca.pem\");\nconst client = Deno.createHttpClient({ caCerts: [ caCert ] });\nconst response = await fetch(\"https://myserver.com\", { client });\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "```ts\nconst client = Deno.createHttpClient({\n  proxy: { url: \"http://myproxy.com:8080\" }\n});\nconst response = await fetch(\"https://myserver.com\", { client });\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "```ts\nconst key = \"----BEGIN PRIVATE KEY----...\";\nconst cert = \"----BEGIN CERTIFICATE----...\";\nconst client = Deno.createHttpClient({ key, cert });\nconst response = await fetch(\"https://myserver.com\", { client });\n```\n"
                },
                {
                  "kind": "category",
                  "doc": "Fetch"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "CreateHttpClientOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "CreateHttpClientOptions"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "intersection",
                          "intersection": [
                            {
                              "repr": "CreateHttpClientOptions",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "CreateHttpClientOptions"
                              }
                            },
                            {
                              "repr": "TlsCertifiedKeyPem",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TlsCertifiedKeyPem"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "HttpClient",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "HttpClient"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "NetAddr",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6023,
              "col": 2,
              "byteIndex": 189831
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "transport",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6024,
                    "col": 4,
                    "byteIndex": 189862
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "tcp",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "tcp"
                        }
                      },
                      {
                        "repr": "udp",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "udp"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "hostname",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6025,
                    "col": 4,
                    "byteIndex": 189892
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "port",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6026,
                    "col": 4,
                    "byteIndex": 189914
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "UnixAddr",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6030,
              "col": 2,
              "byteIndex": 189962
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "transport",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6031,
                    "col": 4,
                    "byteIndex": 189994
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "unix",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "unix"
                        }
                      },
                      {
                        "repr": "unixpacket",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "unixpacket"
                        }
                      }
                    ]
                  },
                  "typeParams": []
                },
                {
                  "name": "path",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6032,
                    "col": 4,
                    "byteIndex": 190032
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "Addr",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6036,
              "col": 2,
              "byteIndex": 190080
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "NetAddr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "NetAddr"
                    }
                  },
                  {
                    "repr": "UnixAddr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "UnixAddr"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "Listener",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6042,
              "col": 2,
              "byteIndex": 190220
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A generic network listener for stream-oriented protocols.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "AsyncIterable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "AsyncIterable"
                  }
                },
                {
                  "repr": "Disposable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Disposable"
                  }
                }
              ],
              "constructors": [],
              "methods": [
                {
                  "name": "accept",
                  "jsDoc": {
                    "doc": "Waits for and resolves to the next connection to the `Listener`."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6045,
                    "col": 4,
                    "byteIndex": 190415
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "close",
                  "jsDoc": {
                    "doc": "Close closes the listener. Any pending accept promises will be rejected\nwith errors."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6048,
                    "col": 4,
                    "byteIndex": 190544
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "[Symbol.asyncIterator]",
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6052,
                    "col": 4,
                    "byteIndex": 190635
                  },
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "returnType": {
                    "repr": "AsyncIterableIterator",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "AsyncIterableIterator"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "ref",
                  "jsDoc": {
                    "doc": "Make the listener block the event loop from finishing.\n\nNote: the listener blocks the event loop from finishing by default.\nThis method is only meaningful after `.unref()` is called."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6060,
                    "col": 4,
                    "byteIndex": 190918
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "unref",
                  "jsDoc": {
                    "doc": "Make the listener not block the event loop from finishing."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6063,
                    "col": 4,
                    "byteIndex": 191006
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                }
              ],
              "properties": [
                {
                  "name": "addr",
                  "jsDoc": {
                    "doc": "Return the address of the `Listener`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6050,
                    "col": 4,
                    "byteIndex": 190612
                  },
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "A",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "A"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "Conn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Conn"
                    }
                  },
                  "default": {
                    "repr": "Conn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Conn"
                    }
                  }
                },
                {
                  "name": "A",
                  "constraint": {
                    "repr": "Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Addr"
                    }
                  },
                  "default": {
                    "repr": "Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Addr"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "TlsListener",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6070,
              "col": 2,
              "byteIndex": 191119
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Specialized listener that accepts TLS connections.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "Listener",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "TlsConn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TlsConn"
                      }
                    },
                    {
                      "repr": "NetAddr",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "NetAddr"
                      }
                    }
                  ],
                  "typeName": "Listener"
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "TcpListener",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6076,
              "col": 2,
              "byteIndex": 191267
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Specialized listener that accepts TCP connections.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "Listener",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "TcpConn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TcpConn"
                      }
                    },
                    {
                      "repr": "NetAddr",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "NetAddr"
                      }
                    }
                  ],
                  "typeName": "Listener"
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "UnixListener",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6082,
              "col": 2,
              "byteIndex": 191416
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Specialized listener that accepts Unix connections.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "Listener",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "UnixConn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "UnixConn"
                      }
                    },
                    {
                      "repr": "UnixAddr",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "UnixAddr"
                      }
                    }
                  ],
                  "typeName": "Listener"
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "Conn",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6085,
              "col": 2,
              "byteIndex": 191503
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "Disposable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Disposable"
                  }
                }
              ],
              "constructors": [],
              "methods": [
                {
                  "name": "read",
                  "jsDoc": {
                    "doc": "Read the incoming data from the connection into an array buffer (`p`).\n\nResolves to either the number of bytes read during the operation or EOF\n(`null`) if there was nothing more to read.\n\nIt is possible for a read to successfully return with `0` bytes. This\ndoes not indicate EOF.\n\n**It is not guaranteed that the full buffer will be read in a single\ncall.**\n\n```ts\n// If the text \"hello world\" is received by the client:\nconst conn = await Deno.connect({ hostname: \"example.com\", port: 80 });\nconst buf = new Uint8Array(100);\nconst numberOfBytesRead = await conn.read(buf); // 11 bytes\nconst text = new TextDecoder().decode(buf);  // \"hello world\"\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "I/O"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6107,
                    "col": 4,
                    "byteIndex": 192386
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "write",
                  "jsDoc": {
                    "doc": "Write the contents of the array buffer (`p`) to the connection.\n\nResolves to the number of bytes written.\n\n**It is not guaranteed that the full buffer will be written in a single\ncall.**\n\n```ts\nconst conn = await Deno.connect({ hostname: \"example.com\", port: 80 });\nconst encoder = new TextEncoder();\nconst data = encoder.encode(\"Hello world\");\nconst bytesWritten = await conn.write(data); // 11\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "I/O"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6124,
                    "col": 4,
                    "byteIndex": 192960
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "close",
                  "jsDoc": {
                    "doc": "Closes the connection, freeing the resource.\n\n```ts\nconst conn = await Deno.connect({ hostname: \"example.com\", port: 80 });\n\n// ...\n\nconn.close();\n```"
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6135,
                    "col": 4,
                    "byteIndex": 193223
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "closeWrite",
                  "jsDoc": {
                    "doc": "Shuts down (`shutdown(2)`) the write side of the connection. Most\ncallers should just use `close()`."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6142,
                    "col": 4,
                    "byteIndex": 193513
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "ref",
                  "jsDoc": {
                    "doc": "Make the connection block the event loop from finishing.\n\nNote: the connection blocks the event loop from finishing by default.\nThis method is only meaningful after `.unref()` is called."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6149,
                    "col": 4,
                    "byteIndex": 193770
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "unref",
                  "jsDoc": {
                    "doc": "Make the connection not block the event loop from finishing."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6151,
                    "col": 4,
                    "byteIndex": 193859
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                }
              ],
              "properties": [
                {
                  "name": "localAddr",
                  "jsDoc": {
                    "doc": "The local address of the connection."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6137,
                    "col": 4,
                    "byteIndex": 193290
                  },
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "A",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "A"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "remoteAddr",
                  "jsDoc": {
                    "doc": "The remote address of the connection."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6139,
                    "col": 4,
                    "byteIndex": 193366
                  },
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "A",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "A"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "readable",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6153,
                    "col": 4,
                    "byteIndex": 193879
                  },
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "ReadableStream",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "ReadableStream"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "writable",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6154,
                    "col": 4,
                    "byteIndex": 193930
                  },
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "WritableStream",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Uint8Array",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Uint8Array"
                          }
                        }
                      ],
                      "typeName": "WritableStream"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "A",
                  "constraint": {
                    "repr": "Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Addr"
                    }
                  },
                  "default": {
                    "repr": "Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Addr"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "TlsHandshakeInfo",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6158,
              "col": 2,
              "byteIndex": 194011
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "alpnProtocol",
                  "jsDoc": {
                    "doc": "Contains the ALPN protocol selected during negotiation with the server.\nIf no ALPN protocol selected, returns `null`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6163,
                    "col": 4,
                    "byteIndex": 194199
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "TlsConn",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6167,
              "col": 2,
              "byteIndex": 194262
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "Conn",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "NetAddr",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "NetAddr"
                        }
                      }
                    ],
                    "typeName": "Conn"
                  }
                }
              ],
              "constructors": [],
              "methods": [
                {
                  "name": "handshake",
                  "jsDoc": {
                    "doc": "Runs the client or server handshake protocol to completion if that has\nnot happened yet. Calling this method is optional; the TLS handshake\nwill be completed automatically as soon as data is sent or received."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6171,
                    "col": 4,
                    "byteIndex": 194549
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "TlsHandshakeInfo",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TlsHandshakeInfo"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                }
              ],
              "properties": [],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "ListenOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6175,
              "col": 2,
              "byteIndex": 194623
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "port",
                  "jsDoc": {
                    "doc": "The port to listen on.\n\nSet to `0` to listen on any available port."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6180,
                    "col": 4,
                    "byteIndex": 194757
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "hostname",
                  "jsDoc": {
                    "doc": "A literal IP address or host name that can be resolved to an IP address.\n\n__Note about `0.0.0.0`__ While listening `0.0.0.0` works on all platforms,\nthe browsers on Windows don't work with the address `0.0.0.0`.\nYou should show the message like `server running on localhost:8080` instead of\n`server running on 0.0.0.0:8080` if your program supports Windows.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "\"0.0.0.0\""
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6189,
                    "col": 4,
                    "byteIndex": 195213
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "TcpListenOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6583,
              "col": 2,
              "byteIndex": 208569
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "ListenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ListenOptions"
                  }
                }
              ],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "reusePort",
                  "jsDoc": {
                    "doc": "When `true` the SO_REUSEPORT flag will be set on the listener. This\nallows multiple processes to listen on the same address and port.\n\nOn Linux this will cause the kernel to distribute incoming connections\nacross the different processes that are listening on the same address and\nport.\n\nThis flag is only supported on Linux. It is silently ignored on other\nplatforms.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6595,
                    "col": 4,
                    "byteIndex": 209095
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "listen",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6210,
              "col": 2,
              "byteIndex": 195799
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Listen announces on the local transport address.\n\n```ts\nconst listener1 = Deno.listen({ port: 80 })\nconst listener2 = Deno.listen({ hostname: \"192.0.2.1\", port: 80 })\nconst listener3 = Deno.listen({ hostname: \"[2001:db8::1]\", port: 80 });\nconst listener4 = Deno.listen({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "intersection",
                    "intersection": [
                      {
                        "repr": "TcpListenOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TcpListenOptions"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "constructors": [],
                          "methods": [],
                          "properties": [
                            {
                              "name": "transport",
                              "location": {
                                "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                "line": 6211,
                                "col": 34,
                                "byteIndex": 195857
                              },
                              "params": [],
                              "computed": false,
                              "optional": true,
                              "tsType": {
                                "repr": "tcp",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "tcp"
                                }
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "TcpListener",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TcpListener"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "listen",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6236,
              "col": 2,
              "byteIndex": 196504
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Listen announces on the local transport address.\n\n```ts\nconst listener = Deno.listen({ path: \"/foo/bar.sock\", transport: \"unix\" })\n```\n\nRequires `allow-read` and `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "intersection",
                    "intersection": [
                      {
                        "repr": "UnixListenOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "UnixListenOptions"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "constructors": [],
                          "methods": [],
                          "properties": [
                            {
                              "name": "transport",
                              "location": {
                                "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                "line": 6237,
                                "col": 35,
                                "byteIndex": 196563
                              },
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "unix",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "unix"
                                }
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "UnixListener",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "UnixListener"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "UnixListenOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6219,
              "col": 2,
              "byteIndex": 196062
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options which can be set when opening a Unix listener via\n{@linkcode Deno.listen} or {@linkcode Deno.listenDatagram}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "path",
                  "jsDoc": {
                    "doc": "A path to the Unix Socket."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6221,
                    "col": 4,
                    "byteIndex": 196141
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "TlsCertifiedKeyPem",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6257,
              "col": 2,
              "byteIndex": 197280
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Provides certified key material from strings. The key material is provided in\n`PEM`-format (Privacy Enhanced Mail, https://www.rfc-editor.org/rfc/rfc1422) which can be identified by having\n`-----BEGIN-----` and `-----END-----` markers at the beginning and end of the strings. This type of key is not compatible\nwith `DER`-format keys which are binary.\n\nDeno supports RSA, EC, and PKCS8-format keys.\n\n```ts\nconst key = {\n key: \"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n\",\n cert: \"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\\n\" }\n};\n```\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "keyFormat",
                  "jsDoc": {
                    "doc": "The format of this key material, which must be PEM."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6259,
                    "col": 4,
                    "byteIndex": 197385
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "pem",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "pem"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "key",
                  "jsDoc": {
                    "doc": "Private key in `PEM` format. RSA, EC, and PKCS8-format keys are supported."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6261,
                    "col": 4,
                    "byteIndex": 197494
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "cert",
                  "jsDoc": {
                    "doc": "Certificate chain in `PEM` format."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6263,
                    "col": 4,
                    "byteIndex": 197557
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "ListenTlsOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6267,
              "col": 2,
              "byteIndex": 197605
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "TcpListenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TcpListenOptions"
                  }
                }
              ],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "transport",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6268,
                    "col": 4,
                    "byteIndex": 197670
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "tcp",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "tcp"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "alpnProtocols",
                  "jsDoc": {
                    "doc": "Application-Layer Protocol Negotiation (ALPN) protocols to announce to\nthe client. If not specified, no ALPN extension will be included in the\nTLS handshake."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6274,
                    "col": 4,
                    "byteIndex": 197882
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "listenTls",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6293,
              "col": 2,
              "byteIndex": 198303
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Listen announces on the local transport address over TLS (transport layer\nsecurity).\n\n```ts\nusing listener = Deno.listenTls({\n  port: 443,\n  cert: Deno.readTextFileSync(\"./server.crt\"),\n  key: Deno.readTextFileSync(\"./server.key\"),\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "intersection",
                    "intersection": [
                      {
                        "repr": "ListenTlsOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ListenTlsOptions"
                        }
                      },
                      {
                        "repr": "TlsCertifiedKeyPem",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TlsCertifiedKeyPem"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "TlsListener",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TlsListener"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "ConnectOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6298,
              "col": 2,
              "byteIndex": 198430
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "port",
                  "jsDoc": {
                    "doc": "The port to connect to."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6300,
                    "col": 4,
                    "byteIndex": 198503
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "hostname",
                  "jsDoc": {
                    "doc": "A literal IP address or host name that can be resolved to an IP address.\nIf not specified,\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "\"127.0.0.1\""
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6305,
                    "col": 4,
                    "byteIndex": 198667
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "transport",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6306,
                    "col": 4,
                    "byteIndex": 198690
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "tcp",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "tcp"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "connect",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6325,
              "col": 2,
              "byteIndex": 199312
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Connects to the hostname (default is \"127.0.0.1\") and port on the named\ntransport (default is \"tcp\"), and resolves to the connection (`Conn`).\n\n```ts\nconst conn1 = await Deno.connect({ port: 80 });\nconst conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\n```\n\nRequires `allow-net` permission for \"tcp\".\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ConnectOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ConnectOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "TcpConn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TcpConn"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "connect",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6365,
              "col": 2,
              "byteIndex": 200670
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Connects to the hostname (default is \"127.0.0.1\") and port on the named\ntransport (default is \"tcp\"), and resolves to the connection (`Conn`).\n\n```ts\nconst conn1 = await Deno.connect({ port: 80 });\nconst conn2 = await Deno.connect({ hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connect({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connect({ hostname: \"golang.org\", port: 80, transport: \"tcp\" });\nconst conn5 = await Deno.connect({ path: \"/foo/bar.sock\", transport: \"unix\" });\n```\n\nRequires `allow-net` permission for \"tcp\" and `allow-read` for \"unix\".\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net",
                    "allow-read"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "UnixConnectOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "UnixConnectOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "UnixConn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "UnixConn"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "TcpConn",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6328,
              "col": 2,
              "byteIndex": 199410
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "Conn",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "NetAddr",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "NetAddr"
                        }
                      }
                    ],
                    "typeName": "Conn"
                  }
                }
              ],
              "constructors": [],
              "methods": [
                {
                  "name": "setNoDelay",
                  "jsDoc": {
                    "doc": "Enable/disable the use of Nagle's algorithm.\n",
                    "tags": [
                      {
                        "kind": "param",
                        "name": "noDelay",
                        "default": "true"
                      }
                    ]
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6334,
                    "col": 4,
                    "byteIndex": 199567
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "noDelay",
                      "optional": true,
                      "tsType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "setKeepAlive",
                  "jsDoc": {
                    "doc": "Enable/disable keep-alive functionality."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6336,
                    "col": 4,
                    "byteIndex": 199660
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "keepAlive",
                      "optional": true,
                      "tsType": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                }
              ],
              "properties": [],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "UnixConnectOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6340,
              "col": 2,
              "byteIndex": 199735
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "transport",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6341,
                    "col": 4,
                    "byteIndex": 199777
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "unix",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "unix"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "path",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6342,
                    "col": 4,
                    "byteIndex": 199800
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "UnixConn",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6346,
              "col": 2,
              "byteIndex": 199848
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "Conn",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "UnixAddr",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "UnixAddr"
                        }
                      }
                    ],
                    "typeName": "Conn"
                  }
                }
              ],
              "constructors": [],
              "methods": [],
              "properties": [],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "ConnectTlsOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6368,
              "col": 2,
              "byteIndex": 200773
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "port",
                  "jsDoc": {
                    "doc": "The port to connect to."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6370,
                    "col": 4,
                    "byteIndex": 200849
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "hostname",
                  "jsDoc": {
                    "doc": "A literal IP address or host name that can be resolved to an IP address.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "\"127.0.0.1\""
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6374,
                    "col": 4,
                    "byteIndex": 200988
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "caCerts",
                  "jsDoc": {
                    "doc": "A list of root certificates that will be used in addition to the\ndefault root certificates to verify the peer's certificate.\n\nMust be in PEM format."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6379,
                    "col": 4,
                    "byteIndex": 201191
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "alpnProtocols",
                  "jsDoc": {
                    "doc": "Application-Layer Protocol Negotiation (ALPN) protocols supported by\nthe client. If not specified, no ALPN extension will be included in the\nTLS handshake."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6384,
                    "col": 4,
                    "byteIndex": 201401
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "connectTls",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6414,
              "col": 2,
              "byteIndex": 202613
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Establishes a secure connection over TLS (transport layer security) using\nan optional list of CA certs, hostname (default is \"127.0.0.1\") and port.\n\nThe CA cert list is optional and if not included Mozilla's root\ncertificates will be used (see also https://github.com/ctz/webpki-roots for\nspecifics).\n\nMutual TLS (mTLS or client certificates) are supported by providing a\n`key` and `cert` in the options as PEM-encoded strings.\n\n```ts\nconst caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\nconst conn1 = await Deno.connectTls({ port: 80 });\nconst conn2 = await Deno.connectTls({ caCerts: [caCert], hostname: \"192.0.2.1\", port: 80 });\nconst conn3 = await Deno.connectTls({ hostname: \"[2001:db8::1]\", port: 80 });\nconst conn4 = await Deno.connectTls({ caCerts: [caCert], hostname: \"golang.org\", port: 80});\n\nconst key = \"----BEGIN PRIVATE KEY----...\";\nconst cert = \"----BEGIN CERTIFICATE----...\";\nconst conn5 = await Deno.connectTls({ port: 80, key, cert });\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "ConnectTlsOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ConnectTlsOptions"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "intersection",
                          "intersection": [
                            {
                              "repr": "ConnectTlsOptions",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ConnectTlsOptions"
                              }
                            },
                            {
                              "repr": "TlsCertifiedKeyPem",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "TlsCertifiedKeyPem"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "TlsConn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TlsConn"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "StartTlsOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6419,
              "col": 2,
              "byteIndex": 202769
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "hostname",
                  "jsDoc": {
                    "doc": "A literal IP address or host name that can be resolved to an IP address.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "\"127.0.0.1\""
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6423,
                    "col": 4,
                    "byteIndex": 202929
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "caCerts",
                  "jsDoc": {
                    "doc": "A list of root certificates that will be used in addition to the\ndefault root certificates to verify the peer's certificate.\n\nMust be in PEM format."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6428,
                    "col": 4,
                    "byteIndex": 203132
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "alpnProtocols",
                  "jsDoc": {
                    "doc": "Application-Layer Protocol Negotiation (ALPN) protocols to announce to\nthe client. If not specified, no ALPN extension will be included in the\nTLS handshake."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6433,
                    "col": 4,
                    "byteIndex": 203344
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "startTls",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6462,
              "col": 2,
              "byteIndex": 204713
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Start TLS handshake from an existing connection using an optional list of\nCA certificates, and hostname (default is \"127.0.0.1\"). Specifying CA certs\nis optional. By default the configured root certificates are used. Using\nthis function requires that the other end of the connection is prepared for\na TLS handshake.\n\nNote that this function *consumes* the TCP connection passed to it, thus the\noriginal TCP connection will be unusable after calling this. Additionally,\nyou need to ensure that the TCP connection is not being used elsewhere when\ncalling this function in order for the TCP connection to be consumed properly.\nFor instance, if there is a `Promise` that is waiting for read operation on\nthe TCP connection to complete, it is considered that the TCP connection is\nbeing used elsewhere. In such a case, this function will fail.\n\n```ts\nconst conn = await Deno.connect({ port: 80, hostname: \"127.0.0.1\" });\nconst caCert = await Deno.readTextFile(\"./certs/my_custom_root_CA.pem\");\n// `conn` becomes unusable after calling `Deno.startTls`\nconst tlsConn = await Deno.startTls(conn, { caCerts: [caCert], hostname: \"localhost\" });\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "conn",
                  "optional": false,
                  "tsType": {
                    "repr": "TcpConn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TcpConn"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "StartTlsOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "StartTlsOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "TlsConn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TlsConn"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "UnsafeWindowSurface",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6498,
              "col": 2,
              "byteIndex": 205904
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Creates a presentable WebGPU surface from given window and\n display handles.\n\n The parameters correspond to the table below:\n\n | system            | winHandle     | displayHandle   |\n | ----------------- | ------------- | --------------- |\n | \"cocoa\" (macOS)   | `NSView*`     | -               |\n | \"win32\" (Windows) | `HWND`        | `HINSTANCE`     |\n | \"x11\" (Linux)     | Xlib `Window` | Xlib `Display*` |\n | \"wayland\" (Linux) | `wl_surface*` | `wl_display*`   |\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "GPU"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [
                {
                  "accessibility": null,
                  "name": "constructor",
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "options",
                      "optional": false,
                      "tsType": {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "constructors": [],
                          "methods": [],
                          "properties": [
                            {
                              "name": "system",
                              "location": {
                                "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                "line": 6501,
                                "col": 8,
                                "byteIndex": 205981
                              },
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "",
                                "kind": "union",
                                "union": [
                                  {
                                    "repr": "cocoa",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "cocoa"
                                    }
                                  },
                                  {
                                    "repr": "win32",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "win32"
                                    }
                                  },
                                  {
                                    "repr": "x11",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "x11"
                                    }
                                  },
                                  {
                                    "repr": "wayland",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "wayland"
                                    }
                                  }
                                ]
                              },
                              "typeParams": []
                            },
                            {
                              "name": "windowHandle",
                              "location": {
                                "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                "line": 6502,
                                "col": 8,
                                "byteIndex": 206036
                              },
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "Deno.PointerValue",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "unknown",
                                      "kind": "keyword",
                                      "keyword": "unknown"
                                    }
                                  ],
                                  "typeName": "Deno.PointerValue"
                                }
                              },
                              "typeParams": []
                            },
                            {
                              "name": "displayHandle",
                              "location": {
                                "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                "line": 6503,
                                "col": 8,
                                "byteIndex": 206086
                              },
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "Deno.PointerValue",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "unknown",
                                      "kind": "keyword",
                                      "keyword": "unknown"
                                    }
                                  ],
                                  "typeName": "Deno.PointerValue"
                                }
                              },
                              "typeParams": []
                            },
                            {
                              "name": "width",
                              "location": {
                                "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                "line": 6504,
                                "col": 8,
                                "byteIndex": 206137
                              },
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              },
                              "typeParams": []
                            },
                            {
                              "name": "height",
                              "location": {
                                "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                "line": 6505,
                                "col": 8,
                                "byteIndex": 206160
                              },
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    }
                  ],
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6499,
                    "col": 4,
                    "byteIndex": 205943
                  }
                }
              ],
              "properties": [],
              "indexSignatures": [],
              "methods": [
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getContext",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "context",
                        "optional": false,
                        "tsType": {
                          "repr": "webgpu",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "webgpu"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "GPUCanvasContext",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "GPUCanvasContext"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6508,
                    "col": 4,
                    "byteIndex": 206196
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "present",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6509,
                    "col": 4,
                    "byteIndex": 206249
                  }
                }
              ],
              "extends": null,
              "implements": [],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "MulticastV4Membership",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6519,
              "col": 2,
              "byteIndex": 206416
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Represents membership of a IPv4 multicast group.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "leave",
                  "jsDoc": {
                    "doc": "Leaves the multicast group."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6521,
                    "col": 4,
                    "byteIndex": 206500
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "Promise",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "void",
                              "kind": "keyword",
                              "keyword": "void"
                            }
                          ],
                          "typeName": "Promise"
                        }
                      },
                      "params": [],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "setLoopback",
                  "jsDoc": {
                    "doc": "Sets the multicast loopback option. If enabled, multicast packets will be looped back to the local socket."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6523,
                    "col": 4,
                    "byteIndex": 206650
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "Promise",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "void",
                              "kind": "keyword",
                              "keyword": "void"
                            }
                          ],
                          "typeName": "Promise"
                        }
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "loopback",
                          "optional": false,
                          "tsType": {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "setTTL",
                  "jsDoc": {
                    "doc": "Sets the time-to-live of outgoing multicast packets for this socket."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6525,
                    "col": 4,
                    "byteIndex": 206785
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "Promise",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "void",
                              "kind": "keyword",
                              "keyword": "void"
                            }
                          ],
                          "typeName": "Promise"
                        }
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "ttl",
                          "optional": false,
                          "tsType": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "MulticastV6Membership",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6535,
              "col": 2,
              "byteIndex": 206975
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Represents membership of a IPv6 multicast group.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "leave",
                  "jsDoc": {
                    "doc": "Leaves the multicast group."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6537,
                    "col": 4,
                    "byteIndex": 207059
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "Promise",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "void",
                              "kind": "keyword",
                              "keyword": "void"
                            }
                          ],
                          "typeName": "Promise"
                        }
                      },
                      "params": [],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "setLoopback",
                  "jsDoc": {
                    "doc": "Sets the multicast loopback option. If enabled, multicast packets will be looped back to the local socket."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6539,
                    "col": 4,
                    "byteIndex": 207209
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "Promise",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "void",
                              "kind": "keyword",
                              "keyword": "void"
                            }
                          ],
                          "typeName": "Promise"
                        }
                      },
                      "params": [
                        {
                          "kind": "identifier",
                          "name": "loopback",
                          "optional": false,
                          "tsType": {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "DatagramConn",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6549,
              "col": 2,
              "byteIndex": 207422
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A generic transport listener for message-oriented protocols.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "AsyncIterable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": [
                          {
                            "repr": "Uint8Array",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Uint8Array"
                            }
                          },
                          {
                            "repr": "Addr",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Addr"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "AsyncIterable"
                  }
                }
              ],
              "constructors": [],
              "methods": [
                {
                  "name": "joinMulticastV4",
                  "jsDoc": {
                    "doc": "Joins an IPv4 multicast group."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6551,
                    "col": 4,
                    "byteIndex": 207542
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "address",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "networkInterface",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "MulticastV4Membership",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MulticastV4Membership"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "joinMulticastV6",
                  "jsDoc": {
                    "doc": "Joins an IPv6 multicast group."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6557,
                    "col": 4,
                    "byteIndex": 207700
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "address",
                      "optional": false,
                      "tsType": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "networkInterface",
                      "optional": false,
                      "tsType": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "MulticastV6Membership",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MulticastV6Membership"
                          }
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "receive",
                  "jsDoc": {
                    "doc": "Waits for and resolves to the next message to the instance.\n\nMessages are received in the format of a tuple containing the data array\nand the address information."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6567,
                    "col": 4,
                    "byteIndex": 208015
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": true,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "tuple",
                          "tuple": [
                            {
                              "repr": "Uint8Array",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Uint8Array"
                              }
                            },
                            {
                              "repr": "Addr",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Addr"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "send",
                  "jsDoc": {
                    "doc": "Sends a message to the target via the connection. The method resolves\nwith the number of bytes sent."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6570,
                    "col": 4,
                    "byteIndex": 208192
                  },
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "p",
                      "optional": false,
                      "tsType": {
                        "repr": "Uint8Array",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Uint8Array"
                        }
                      }
                    },
                    {
                      "kind": "identifier",
                      "name": "addr",
                      "optional": false,
                      "tsType": {
                        "repr": "Addr",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Addr"
                        }
                      }
                    }
                  ],
                  "optional": false,
                  "returnType": {
                    "repr": "Promise",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        }
                      ],
                      "typeName": "Promise"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "close",
                  "jsDoc": {
                    "doc": "Close closes the socket. Any pending message promises will be rejected\nwith errors."
                  },
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6573,
                    "col": 4,
                    "byteIndex": 208348
                  },
                  "params": [],
                  "optional": false,
                  "returnType": {
                    "repr": "void",
                    "kind": "keyword",
                    "keyword": "void"
                  },
                  "typeParams": []
                },
                {
                  "name": "[Symbol.asyncIterator]",
                  "kind": "method",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6576,
                    "col": 4,
                    "byteIndex": 208439
                  },
                  "params": [],
                  "computed": true,
                  "optional": false,
                  "returnType": {
                    "repr": "AsyncIterableIterator",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "tuple",
                          "tuple": [
                            {
                              "repr": "Uint8Array",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Uint8Array"
                              }
                            },
                            {
                              "repr": "Addr",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Addr"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "AsyncIterableIterator"
                    }
                  },
                  "typeParams": []
                }
              ],
              "properties": [
                {
                  "name": "addr",
                  "jsDoc": {
                    "doc": "Return the address of the instance."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6575,
                    "col": 4,
                    "byteIndex": 208414
                  },
                  "params": [],
                  "readonly": true,
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "Addr",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Addr"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "UdpListenOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6606,
              "col": 2,
              "byteIndex": 209330
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Unstable options which can be set when opening a datagram listener via\n{@linkcode Deno.listenDatagram}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Network"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [
                {
                  "repr": "ListenOptions",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ListenOptions"
                  }
                }
              ],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "reuseAddress",
                  "jsDoc": {
                    "doc": "When `true` the specified address will be reused, even if another\nprocess has already bound a socket on it. This effectively steals the\nsocket from the listener.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6612,
                    "col": 4,
                    "byteIndex": 209610
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "loopback",
                  "jsDoc": {
                    "doc": "When `true`, sent multicast packets will be looped back to the local socket.\n",
                    "tags": [
                      {
                        "kind": "default",
                        "value": "false"
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6617,
                    "col": 4,
                    "byteIndex": 209758
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "listenDatagram",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6642,
              "col": 2,
              "byteIndex": 210298
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Listen announces on the local transport address.\n\n```ts\nconst listener1 = Deno.listenDatagram({\n  port: 80,\n  transport: \"udp\"\n});\nconst listener2 = Deno.listenDatagram({\n  hostname: \"golang.org\",\n  port: 80,\n  transport: \"udp\"\n});\n```\n\nRequires `allow-net` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-net"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "intersection",
                    "intersection": [
                      {
                        "repr": "UdpListenOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "UdpListenOptions"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "constructors": [],
                          "methods": [],
                          "properties": [
                            {
                              "name": "transport",
                              "location": {
                                "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                "line": 6643,
                                "col": 34,
                                "byteIndex": 210364
                              },
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "udp",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "udp"
                                }
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "DatagramConn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "DatagramConn"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "listenDatagram",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6663,
              "col": 2,
              "byteIndex": 210825
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Listen announces on the local transport address.\n\n```ts\nconst listener = Deno.listenDatagram({\n  path: \"/foo/bar.sock\",\n  transport: \"unixpacket\"\n});\n```\n\nRequires `allow-read` and `allow-write` permission.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Network"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "intersection",
                    "intersection": [
                      {
                        "repr": "UnixListenOptions",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "UnixListenOptions"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "typeLiteral",
                        "typeLiteral": {
                          "constructors": [],
                          "methods": [],
                          "properties": [
                            {
                              "name": "transport",
                              "location": {
                                "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                "line": 6664,
                                "col": 35,
                                "byteIndex": 210892
                              },
                              "params": [],
                              "computed": false,
                              "optional": false,
                              "tsType": {
                                "repr": "unixpacket",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "unixpacket"
                                }
                              },
                              "typeParams": []
                            }
                          ],
                          "callSignatures": [],
                          "indexSignatures": []
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "DatagramConn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "DatagramConn"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "openKv",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6684,
              "col": 2,
              "byteIndex": 211667
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Open a new {@linkcode Deno.Kv} connection to persist data.\n\nWhen a path is provided, the database will be persisted to disk at that\npath. Read and write access to the file is required.\n\nWhen no path is provided, the database will be opened in a default path for\nthe current script. This location is persistent across script runs and is\nkeyed on the origin storage key (the same key that is used to determine\n`localStorage` persistence). More information about the origin storage key\ncan be found in the Deno Manual.\n",
              "tags": [
                {
                  "kind": "tags",
                  "tags": [
                    "allow-read",
                    "allow-write"
                  ]
                },
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "path",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Kv",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Kv"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "CronScheduleExpression",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6693,
              "col": 2,
              "byteIndex": 211946
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "CronScheduleExpression is used as the type of `minute`, `hour`,\n`dayOfMonth`, `month`, and `dayOfWeek` in {@linkcode CronSchedule}.",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "exact",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6693,
                            "col": 50,
                            "byteIndex": 211994
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "number",
                                "kind": "keyword",
                                "keyword": "number"
                              },
                              {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "number",
                                  "kind": "keyword",
                                  "keyword": "number"
                                }
                              }
                            ]
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "start",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6694,
                            "col": 4,
                            "byteIndex": 212029
                          },
                          "params": [],
                          "computed": false,
                          "optional": true,
                          "tsType": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          "typeParams": []
                        },
                        {
                          "name": "end",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6695,
                            "col": 4,
                            "byteIndex": 212049
                          },
                          "params": [],
                          "computed": false,
                          "optional": true,
                          "tsType": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          "typeParams": []
                        },
                        {
                          "name": "every",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6696,
                            "col": 4,
                            "byteIndex": 212067
                          },
                          "params": [],
                          "computed": false,
                          "optional": true,
                          "tsType": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "CronSchedule",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6706,
              "col": 2,
              "byteIndex": 212251
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "CronSchedule is the interface used for JSON format\ncron `schedule`.",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "minute",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6707,
                    "col": 4,
                    "byteIndex": 212287
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "CronScheduleExpression",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "CronScheduleExpression"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "hour",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6708,
                    "col": 4,
                    "byteIndex": 212324
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "CronScheduleExpression",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "CronScheduleExpression"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "dayOfMonth",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6709,
                    "col": 4,
                    "byteIndex": 212359
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "CronScheduleExpression",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "CronScheduleExpression"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "month",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6710,
                    "col": 4,
                    "byteIndex": 212400
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "CronScheduleExpression",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "CronScheduleExpression"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "dayOfWeek",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6711,
                    "col": 4,
                    "byteIndex": 212436
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "CronScheduleExpression",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "CronScheduleExpression"
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "cron",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6738,
              "col": 2,
              "byteIndex": 213206
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Create a cron job that will periodically execute the provided handler\ncallback based on the specified schedule.\n\n```ts\nDeno.cron(\"sample cron\", \"20 * * * *\", () => {\n  console.log(\"cron job executed\");\n});\n```\n\n```ts\nDeno.cron(\"sample cron\", { hour: { every: 6 } }, () => {\n  console.log(\"cron job executed\");\n});\n```\n\n`schedule` can be a string in the Unix cron format or in JSON format\nas specified by interface {@linkcode CronSchedule}, where time is specified\nusing UTC time zone.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "schedule",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "CronSchedule",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "CronSchedule"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "handler",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          },
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ]
                      },
                      "params": [],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "cron",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6770,
              "col": 2,
              "byteIndex": 214374
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Create a cron job that will periodically execute the provided handler\ncallback based on the specified schedule.\n\n```ts\nDeno.cron(\"sample cron\", \"20 * * * *\", {\n  backoffSchedule: [10, 20]\n}, () => {\n  console.log(\"cron job executed\");\n});\n```\n\n`schedule` can be a string in the Unix cron format or in JSON format\nas specified by interface {@linkcode CronSchedule}, where time is specified\nusing UTC time zone.\n\n`backoffSchedule` option can be used to specify the retry policy for failed\nexecutions. Each element in the array represents the number of milliseconds\nto wait before retrying the execution. For example, `[1000, 5000, 10000]`\nmeans that a failed execution will be retried at most 3 times, with 1\nsecond, 5 seconds, and 10 seconds delay between each retry.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "function",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "schedule",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "CronSchedule",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "CronSchedule"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "backoffSchedule",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6773,
                            "col": 15,
                            "byteIndex": 214466
                          },
                          "params": [],
                          "computed": false,
                          "optional": true,
                          "tsType": {
                            "repr": "",
                            "kind": "array",
                            "array": {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            }
                          },
                          "typeParams": []
                        },
                        {
                          "name": "signal",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6773,
                            "col": 43,
                            "byteIndex": 214494
                          },
                          "params": [],
                          "computed": false,
                          "optional": true,
                          "tsType": {
                            "repr": "AbortSignal",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "AbortSignal"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "handler",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "Promise",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ],
                              "typeName": "Promise"
                            }
                          },
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ]
                      },
                      "params": [],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            }
          },
          {
            "name": "KvKey",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6795,
              "col": 2,
              "byteIndex": 215363
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A key to be persisted in a {@linkcode Deno.Kv}. A key is a sequence\nof {@linkcode Deno.KvKeyPart}s.\n\nKeys are ordered lexicographically by their parts. The first part is the\nmost significant, and the last part is the least significant. The order of\nthe parts is determined by both the type and the value of the part. The\nrelative significance of the types can be found in documentation for the\n{@linkcode Deno.KvKeyPart} type.\n\nKeys have a maximum size of 2048 bytes serialized. If the size of the key\nexceeds this limit, an error will be thrown on the operation that this key\nwas passed to.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "typeOperator",
                "typeOperator": {
                  "operator": "readonly",
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "KvKeyPart",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "KvKeyPart"
                      }
                    }
                  }
                }
              },
              "typeParams": []
            }
          },
          {
            "name": "KvKeyPart",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6832,
              "col": 2,
              "byteIndex": 216821
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A single part of a {@linkcode Deno.KvKey}. Parts are ordered\nlexicographically, first by their type, and within a given type by their\nvalue.\n\nThe ordering of types is as follows:\n\n1. `Uint8Array`\n2. `string`\n3. `number`\n4. `bigint`\n5. `boolean`\n\nWithin a given type, the ordering is as follows:\n\n- `Uint8Array` is ordered by the byte ordering of the array\n- `string` is ordered by the byte ordering of the UTF-8 encoding of the\n  string\n- `number` is ordered following this pattern: `-NaN`\n  < `-Infinity` < `-100.0` < `-1.0` < -`0.5` < `-0.0` < `0.0` < `0.5`\n  < `1.0` < `100.0` < `Infinity` < `NaN`\n- `bigint` is ordered by mathematical ordering, with the largest negative\n  number being the least first value, and the largest positive number\n  being the last value\n- `boolean` is ordered by `false` < `true`\n\nThis means that the part `1.0` (a number) is ordered before the part `2.0`\n(also a number), but is greater than the part `0n` (a bigint), because\n`1.0` is a number and `0n` is a bigint, and type ordering has precedence\nover the ordering of values within a type.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Uint8Array",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Uint8Array"
                    }
                  },
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  {
                    "repr": "bigint",
                    "kind": "keyword",
                    "keyword": "bigint"
                  },
                  {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  {
                    "repr": "symbol",
                    "kind": "keyword",
                    "keyword": "symbol"
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "KvConsistencyLevel",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6850,
              "col": 2,
              "byteIndex": 217203
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Consistency level of a KV operation.\n\n- `strong` - This operation must be strongly-consistent.\n- `eventual` - Eventually-consistent behavior is allowed.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "strong",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "strong"
                    }
                  },
                  {
                    "repr": "eventual",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "eventual"
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "KvListSelector",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6865,
              "col": 2,
              "byteIndex": 217776
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A selector that selects the range of data returned by a list operation on a\n{@linkcode Deno.Kv}.\n\nThe selector can either be a prefix selector or a range selector. A prefix\nselector selects all keys that start with the given prefix (optionally\nstarting at a given key). A range selector selects all keys that are\nlexicographically between the given start and end keys.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "prefix",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6866,
                            "col": 8,
                            "byteIndex": 217813
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "KvKey",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvKey"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "prefix",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6867,
                            "col": 8,
                            "byteIndex": 217837
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "KvKey",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvKey"
                            }
                          },
                          "typeParams": []
                        },
                        {
                          "name": "start",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6867,
                            "col": 23,
                            "byteIndex": 217852
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "KvKey",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvKey"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "prefix",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6868,
                            "col": 8,
                            "byteIndex": 217875
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "KvKey",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvKey"
                            }
                          },
                          "typeParams": []
                        },
                        {
                          "name": "end",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6868,
                            "col": 23,
                            "byteIndex": 217890
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "KvKey",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvKey"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "start",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6869,
                            "col": 8,
                            "byteIndex": 217911
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "KvKey",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvKey"
                            }
                          },
                          "typeParams": []
                        },
                        {
                          "name": "end",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6869,
                            "col": 22,
                            "byteIndex": 217925
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "KvKey",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvKey"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "KvMutation",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6904,
              "col": 2,
              "byteIndex": 219901
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A mutation to a key in a {@linkcode Deno.Kv}. A mutation is a\ncombination of a key, a value, and a type. The type determines how the\nmutation is applied to the key.\n\n- `set` - Sets the value of the key to the given value, overwriting any\n  existing value. Optionally an `expireIn` option can be specified to\n  set a time-to-live (TTL) for the key. The TTL is specified in\n  milliseconds, and the key will be deleted from the database at earliest\n  after the specified number of milliseconds have elapsed. Once the\n  specified duration has passed, the key may still be visible for some\n  additional time. If the `expireIn` option is not specified, the key will\n  not expire.\n- `delete` - Deletes the key from the database. The mutation is a no-op if\n  the key does not exist.\n- `sum` - Adds the given value to the existing value of the key. Both the\n  value specified in the mutation, and any existing value must be of type\n  `Deno.KvU64`. If the key does not exist, the value is set to the given\n  value (summed with 0). If the result of the sum overflows an unsigned\n  64-bit integer, the result is wrapped around.\n- `max` - Sets the value of the key to the maximum of the existing value\n  and the given value. Both the value specified in the mutation, and any\n  existing value must be of type `Deno.KvU64`. If the key does not exist,\n  the value is set to the given value.\n- `min` - Sets the value of the key to the minimum of the existing value\n  and the given value. Both the value specified in the mutation, and any\n  existing value must be of type `Deno.KvU64`. If the key does not exist,\n  the value is set to the given value.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "intersection",
                "intersection": [
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "key",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6905,
                            "col": 8,
                            "byteIndex": 219934
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "KvKey",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvKey"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  },
                  {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "type",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6907,
                                  "col": 10,
                                  "byteIndex": 219965
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "set",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "set"
                                  }
                                },
                                "typeParams": []
                              },
                              {
                                "name": "value",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6907,
                                  "col": 23,
                                  "byteIndex": 219978
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "unknown",
                                  "kind": "keyword",
                                  "keyword": "unknown"
                                },
                                "typeParams": []
                              },
                              {
                                "name": "expireIn",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6907,
                                  "col": 39,
                                  "byteIndex": 219994
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "number",
                                  "kind": "keyword",
                                  "keyword": "number"
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        },
                        {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "type",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6908,
                                  "col": 10,
                                  "byteIndex": 220024
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "delete",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "delete"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        },
                        {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "type",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6909,
                                  "col": 10,
                                  "byteIndex": 220051
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "sum",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "sum"
                                  }
                                },
                                "typeParams": []
                              },
                              {
                                "name": "value",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6909,
                                  "col": 23,
                                  "byteIndex": 220064
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "KvU64",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "KvU64"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        },
                        {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "type",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6910,
                                  "col": 10,
                                  "byteIndex": 220089
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "max",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "max"
                                  }
                                },
                                "typeParams": []
                              },
                              {
                                "name": "value",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6910,
                                  "col": 23,
                                  "byteIndex": 220102
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "KvU64",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "KvU64"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        },
                        {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "type",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6911,
                                  "col": 10,
                                  "byteIndex": 220127
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "min",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "min"
                                  }
                                },
                                "typeParams": []
                              },
                              {
                                "name": "value",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 6911,
                                  "col": 23,
                                  "byteIndex": 220140
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "KvU64",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "KvU64"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              "typeParams": []
            }
          },
          {
            "name": "KvListIterator",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6924,
              "col": 2,
              "byteIndex": 220470
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An iterator over a range of data entries in a {@linkcode Deno.Kv}.\n\nThe cursor getter returns the cursor that can be used to resume the\niteration from the current position in the future.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [],
              "properties": [],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Returns the cursor of the current position in the iteration. This cursor\ncan be used to resume the iteration from the current position in the\nfuture by passing it to the `cursor` option of the `list` method."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "cursor",
                  "kind": "getter",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6930,
                    "col": 4,
                    "byteIndex": 220797
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "next",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "IteratorResult",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "KvEntry",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "T",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "T"
                                        }
                                      }
                                    ],
                                    "typeName": "KvEntry"
                                  }
                                },
                                {
                                  "repr": "undefined",
                                  "kind": "keyword",
                                  "keyword": "undefined"
                                }
                              ],
                              "typeName": "IteratorResult"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6932,
                    "col": 4,
                    "byteIndex": 220824
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "[Symbol.asyncIterator]",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "AsyncIterableIterator",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "KvEntry",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "T",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "T"
                                  }
                                }
                              ],
                              "typeName": "KvEntry"
                            }
                          }
                        ],
                        "typeName": "AsyncIterableIterator"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6933,
                    "col": 4,
                    "byteIndex": 220884
                  }
                }
              ],
              "extends": null,
              "implements": [
                {
                  "repr": "AsyncIterableIterator",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "KvEntry",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "T",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "T"
                              }
                            }
                          ],
                          "typeName": "KvEntry"
                        }
                      }
                    ],
                    "typeName": "AsyncIterableIterator"
                  }
                }
              ],
              "typeParams": [
                {
                  "name": "T"
                }
              ],
              "superTypeParams": []
            }
          },
          {
            "name": "KvEntry",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6947,
              "col": 2,
              "byteIndex": 221365
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A versioned pair of key and value in a {@linkcode Deno.Kv}.\n\nThe `versionstamp` is a string that represents the current version of the\nkey-value pair. It can be used to perform atomic operations on the KV store\nby passing it to the `check` method of a {@linkcode Deno.AtomicOperation}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "key",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6948,
                    "col": 4,
                    "byteIndex": 221399
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "KvKey",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "KvKey"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "value",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6949,
                    "col": 4,
                    "byteIndex": 221415
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "versionstamp",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6950,
                    "col": 4,
                    "byteIndex": 221429
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": [
                {
                  "name": "T"
                }
              ]
            }
          },
          {
            "name": "KvEntryMaybe",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6964,
              "col": 2,
              "byteIndex": 221809
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An optional versioned pair of key and value in a {@linkcode Deno.Kv}.\n\nThis is the same as a {@linkcode KvEntry}, but the `value` and `versionstamp`\nfields may be `null` if no value exists for the given key in the KV store.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "typeAlias",
            "typeAliasDef": {
              "tsType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "KvEntry",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "KvEntry"
                    }
                  },
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "key",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6965,
                            "col": 4,
                            "byteIndex": 221858
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "KvKey",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvKey"
                            }
                          },
                          "typeParams": []
                        },
                        {
                          "name": "value",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6966,
                            "col": 4,
                            "byteIndex": 221874
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          },
                          "typeParams": []
                        },
                        {
                          "name": "versionstamp",
                          "location": {
                            "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                            "line": 6967,
                            "col": 4,
                            "byteIndex": 221891
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ]
              },
              "typeParams": [
                {
                  "name": "T"
                }
              ]
            }
          },
          {
            "name": "KvListOptions",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 6977,
              "col": 2,
              "byteIndex": 222073
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Options for listing key-value pairs in a {@linkcode Deno.Kv}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "limit",
                  "jsDoc": {
                    "doc": "The maximum number of key-value pairs to return. If not specified, all\nmatching key-value pairs will be returned."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6982,
                    "col": 4,
                    "byteIndex": 222254
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                },
                {
                  "name": "cursor",
                  "jsDoc": {
                    "doc": "The cursor to resume the iteration from. If not specified, the iteration\nwill start from the beginning."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6987,
                    "col": 4,
                    "byteIndex": 222408
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                },
                {
                  "name": "reverse",
                  "jsDoc": {
                    "doc": "Whether to reverse the order of the returned key-value pairs. If not\nspecified, the order will be ascending from the start of the range as per\nthe lexicographical ordering of the keys. If `true`, the order will be\ndescending from the end of the range.\n\nThe default value is `false`."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 6996,
                    "col": 4,
                    "byteIndex": 222769
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  "typeParams": []
                },
                {
                  "name": "consistency",
                  "jsDoc": {
                    "doc": "The consistency level of the list operation. The default consistency\nlevel is \"strong\". Some use cases can benefit from using a weaker\nconsistency level. For more information on consistency levels, see the\ndocumentation for {@linkcode Deno.KvConsistencyLevel}.\n\nList operations are performed in batches (in sizes specified by the\n`batchSize` option). The consistency level of the list operation is\napplied to each batch individually. This means that while each batch is\nguaranteed to be consistent within itself, the entire list operation may\nnot be consistent across batches because a mutation may be applied to a\nkey-value pair between batches, in a batch that has already been returned\nby the list operation."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7011,
                    "col": 4,
                    "byteIndex": 223603
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "KvConsistencyLevel",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "KvConsistencyLevel"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "batchSize",
                  "jsDoc": {
                    "doc": "The size of the batches in which the list operation is performed. Larger\nor smaller batch sizes may positively or negatively affect the\nperformance of a list operation depending on the specific use case and\niteration behavior. Slow iterating queries may benefit from using a\nsmaller batch size for increased overall consistency, while fast\niterating queries may benefit from using a larger batch size for better\nperformance.\n\nThe default batch size is equal to the `limit` option, or 100 if this is\nunset. The maximum value for this option is 500. Larger values will be\nclamped."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7025,
                    "col": 4,
                    "byteIndex": 224312
                  },
                  "params": [],
                  "computed": false,
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "KvCommitResult",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 7032,
              "col": 2,
              "byteIndex": 224391
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "ok",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7033,
                    "col": 4,
                    "byteIndex": 224429
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "true",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": true
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "versionstamp",
                  "jsDoc": {
                    "doc": "The versionstamp of the value committed to KV."
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7035,
                    "col": 4,
                    "byteIndex": 224501
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "KvCommitError",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 7042,
              "col": 2,
              "byteIndex": 224582
            },
            "declarationKind": "export",
            "jsDoc": {
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "ok",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7043,
                    "col": 4,
                    "byteIndex": 224619
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "false",
                    "kind": "literal",
                    "literal": {
                      "kind": "boolean",
                      "boolean": false
                    }
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "AtomicCheck",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 7056,
              "col": 2,
              "byteIndex": 225048
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A check to perform as part of a {@linkcode Deno.AtomicOperation}. The check\nwill fail if the versionstamp for the key-value pair in the KV store does\nnot match the given versionstamp. A check with a `null` versionstamp checks\nthat the key-value pair does not currently exist in the KV store.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "interface",
            "interfaceDef": {
              "extends": [],
              "constructors": [],
              "methods": [],
              "properties": [
                {
                  "name": "key",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7057,
                    "col": 4,
                    "byteIndex": 225083
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "KvKey",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "KvKey"
                    }
                  },
                  "typeParams": []
                },
                {
                  "name": "versionstamp",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7058,
                    "col": 4,
                    "byteIndex": 225099
                  },
                  "params": [],
                  "computed": false,
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "null",
                        "kind": "keyword",
                        "keyword": "null"
                      }
                    ]
                  },
                  "typeParams": []
                }
              ],
              "callSignatures": [],
              "indexSignatures": [],
              "typeParams": []
            }
          },
          {
            "name": "AtomicOperation",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 7098,
              "col": 2,
              "byteIndex": 227325
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "An operation on a {@linkcode Deno.Kv} that can be performed\natomically. Atomic operations do not auto-commit, and must be committed\nexplicitly by calling the `commit` method.\n\nAtomic operations can be used to perform multiple mutations on the KV store\nin a single atomic transaction. They can also be used to perform\nconditional mutations by specifying one or more\n{@linkcode Deno.AtomicCheck}s that ensure that a mutation is only performed\nif the key-value pair in the KV has a specific versionstamp. If any of the\nchecks fail, the entire operation will fail and no mutations will be made.\n\nThe ordering of mutations is guaranteed to be the same as the ordering of\nthe mutations specified in the operation. Checks are performed before any\nmutations are performed. The ordering of checks is unobservable.\n\nAtomic operations can be used to implement optimistic locking, where a\nmutation is only performed if the key-value pair in the KV store has not\nbeen modified since the last read. This can be done by specifying a check\nthat ensures that the versionstamp of the key-value pair matches the\nversionstamp that was read. If the check fails, the mutation will not be\nperformed and the operation will fail. One can then retry the read-modify-\nwrite operation in a loop until it succeeds.\n\nThe `commit` method of an atomic operation returns a value indicating\nwhether checks passed and mutations were performed. If the operation failed\nbecause of a failed check, the return value will be a\n{@linkcode Deno.KvCommitError} with an `ok: false` property. If the\noperation failed for any other reason (storage error, invalid value, etc.),\nan exception will be thrown. If the operation succeeded, the return value\nwill be a {@linkcode Deno.KvCommitResult} object with a `ok: true` property\nand the versionstamp of the value committed to KV.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [],
              "properties": [],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Add to the operation a check that ensures that the versionstamp of the\nkey-value pair in the KV store matches the given versionstamp. If the\ncheck fails, the entire operation will fail and no mutations will be\nperformed during the commit."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "check",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "rest",
                        "arg": {
                          "kind": "identifier",
                          "name": "checks",
                          "optional": false,
                          "tsType": null
                        },
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "AtomicCheck",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "AtomicCheck"
                            }
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7105,
                    "col": 4,
                    "byteIndex": 227643
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Add to the operation a mutation that performs the specified mutation on\nthe specified key if all checks pass during the commit. The types and\nsemantics of all available mutations are described in the documentation\nfor {@linkcode Deno.KvMutation}."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "mutate",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "rest",
                        "arg": {
                          "kind": "identifier",
                          "name": "mutations",
                          "optional": false,
                          "tsType": null
                        },
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "KvMutation",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvMutation"
                            }
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7112,
                    "col": 4,
                    "byteIndex": 227977
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Shortcut for creating a `sum` mutation. This method wraps `n` in a\n{@linkcode Deno.KvU64}, so the value of `n` must be in the range\n`[0, 2^64-1]`."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "sum",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "KvKey",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvKey"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "n",
                        "optional": false,
                        "tsType": {
                          "repr": "bigint",
                          "kind": "keyword",
                          "keyword": "bigint"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7118,
                    "col": 4,
                    "byteIndex": 228207
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Shortcut for creating a `min` mutation. This method wraps `n` in a\n{@linkcode Deno.KvU64}, so the value of `n` must be in the range\n`[0, 2^64-1]`."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "min",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "KvKey",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvKey"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "n",
                        "optional": false,
                        "tsType": {
                          "repr": "bigint",
                          "kind": "keyword",
                          "keyword": "bigint"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7124,
                    "col": 4,
                    "byteIndex": 228429
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Shortcut for creating a `max` mutation. This method wraps `n` in a\n{@linkcode Deno.KvU64}, so the value of `n` must be in the range\n`[0, 2^64-1]`."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "max",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "KvKey",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvKey"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "n",
                        "optional": false,
                        "tsType": {
                          "repr": "bigint",
                          "kind": "keyword",
                          "keyword": "bigint"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7130,
                    "col": 4,
                    "byteIndex": 228651
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Add to the operation a mutation that sets the value of the specified key\nto the specified value if all checks pass during the commit.\n\nOptionally an `expireIn` option can be specified to set a time-to-live\n(TTL) for the key. The TTL is specified in milliseconds, and the key will\nbe deleted from the database at earliest after the specified number of\nmilliseconds have elapsed. Once the specified duration has passed, the\nkey may still be visible for some additional time. If the `expireIn`\noption is not specified, the key will not expire."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "set",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "KvKey",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvKey"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "expireIn",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7142,
                                  "col": 48,
                                  "byteIndex": 229352
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "number",
                                  "kind": "keyword",
                                  "keyword": "number"
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7142,
                    "col": 4,
                    "byteIndex": 229308
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Add to the operation a mutation that deletes the specified key if all\nchecks pass during the commit."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "delete",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "KvKey",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvKey"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7147,
                    "col": 4,
                    "byteIndex": 229515
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Add to the operation a mutation that enqueues a value into the queue\nif all checks pass during the commit."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "enqueue",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "delay",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7155,
                                  "col": 8,
                                  "byteIndex": 229739
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "number",
                                  "kind": "keyword",
                                  "keyword": "number"
                                },
                                "typeParams": []
                              },
                              {
                                "name": "keysIfUndelivered",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7156,
                                  "col": 8,
                                  "byteIndex": 229763
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "",
                                  "kind": "array",
                                  "array": {
                                    "repr": "KvKey",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "KvKey"
                                    }
                                  }
                                },
                                "typeParams": []
                              },
                              {
                                "name": "backoffSchedule",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7157,
                                  "col": 8,
                                  "byteIndex": 229800
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "",
                                  "kind": "array",
                                  "array": {
                                    "repr": "number",
                                    "kind": "keyword",
                                    "keyword": "number"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "this",
                      "kind": "this",
                      "this": true
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7152,
                    "col": 4,
                    "byteIndex": 229682
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Commit the operation to the KV store. Returns a value indicating whether\nchecks passed and mutations were performed. If the operation failed\nbecause of a failed check, the return value will be a {@linkcode\nDeno.KvCommitError} with an `ok: false` property. If the operation failed\nfor any other reason (storage error, invalid value, etc.), an exception\nwill be thrown. If the operation succeeded, the return value will be a\n{@linkcode Deno.KvCommitResult} object with a `ok: true` property and the\nversionstamp of the value committed to KV.\n\nIf the commit returns `ok: false`, one may create a new atomic operation\nwith updated checks and mutations and attempt to commit it again. See the\nnote on optimistic locking in the documentation for\n{@linkcode Deno.AtomicOperation}."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "commit",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "KvCommitResult",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "KvCommitResult"
                                }
                              },
                              {
                                "repr": "KvCommitError",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "KvCommitError"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7175,
                    "col": 4,
                    "byteIndex": 230734
                  }
                }
              ],
              "extends": null,
              "implements": [],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "Kv",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 7215,
              "col": 2,
              "byteIndex": 232972
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A key-value database that can be used to store and retrieve data.\n\nData is stored as key-value pairs, where the key is a {@linkcode Deno.KvKey}\nand the value is an arbitrary structured-serializable JavaScript value.\nKeys are ordered lexicographically as described in the documentation for\n{@linkcode Deno.KvKey}. Keys are unique within a database, and the last\nvalue set for a given key is the one that is returned when reading the\nkey. Keys can be deleted from the database, in which case they will no\nlonger be returned when reading keys.\n\nValues can be any structured-serializable JavaScript value (objects,\narrays, strings, numbers, etc.). The special value {@linkcode Deno.KvU64}\ncan be used to store 64-bit unsigned integers in the database. This special\nvalue can not be nested within other objects or arrays. In addition to the\nregular database mutation operations, the unsigned 64-bit integer value\nalso supports `sum`, `max`, and `min` mutations.\n\nKeys are versioned on write by assigning the key an ever-increasing\n\"versionstamp\". The versionstamp represents the version of a key-value pair\nin the database at some point in time, and can be used to perform\ntransactional operations on the database without requiring any locking.\nThis is enabled by atomic operations, which can have conditions that ensure\nthat the operation only succeeds if the versionstamp of the key-value pair\nmatches an expected versionstamp.\n\nKeys have a maximum length of 2048 bytes after serialization. Values have a\nmaximum length of 64 KiB after serialization. Serialization of both keys\nand values is somewhat opaque, but one can usually assume that the\nserialization of any value is about the same length as the resulting string\nof a JSON serialization of that same value. If theses limits are exceeded,\nan exception will be thrown.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [],
              "properties": [],
              "indexSignatures": [],
              "methods": [
                {
                  "jsDoc": {
                    "doc": "Retrieve the value and versionstamp for the given key from the database\nin the form of a {@linkcode Deno.KvEntryMaybe}. If no value exists for\nthe key, the returned entry will have a `null` value and versionstamp.\n\n```ts\nconst db = await Deno.openKv();\nconst result = await db.get([\"foo\"]);\nresult.key; // [\"foo\"]\nresult.value; // \"bar\"\nresult.versionstamp; // \"00000000000000010000\"\n```\n\nThe `consistency` option can be used to specify the consistency level\nfor the read operation. The default consistency level is \"strong\". Some\nuse cases can benefit from using a weaker consistency level. For more\ninformation on consistency levels, see the documentation for\n{@linkcode Deno.KvConsistencyLevel}."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "get",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "KvKey",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvKey"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "consistency",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7237,
                                  "col": 18,
                                  "byteIndex": 233902
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "KvConsistencyLevel",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "KvConsistencyLevel"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "KvEntryMaybe",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "T",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "T"
                                  }
                                }
                              ],
                              "typeName": "KvEntryMaybe"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "T",
                        "default": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7235,
                    "col": 4,
                    "byteIndex": 233848
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Retrieve multiple values and versionstamps from the database in the form\nof an array of {@linkcode Deno.KvEntryMaybe} objects. The returned array\nwill have the same length as the `keys` array, and the entries will be in\nthe same order as the keys. If no value exists for a given key, the\nreturned entry will have a `null` value and versionstamp.\n\n```ts\nconst db = await Deno.openKv();\nconst result = await db.getMany([[\"foo\"], [\"baz\"]]);\nresult[0].key; // [\"foo\"]\nresult[0].value; // \"bar\"\nresult[0].versionstamp; // \"00000000000000010000\"\nresult[1].key; // [\"baz\"]\nresult[1].value; // null\nresult[1].versionstamp; // null\n```\n\nThe `consistency` option can be used to specify the consistency level\nfor the read operation. The default consistency level is \"strong\". Some\nuse cases can benefit from using a weaker consistency level. For more\ninformation on consistency levels, see the documentation for\n{@linkcode Deno.KvConsistencyLevel}."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "getMany",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "keys",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "typeOperator",
                          "typeOperator": {
                            "operator": "readonly",
                            "tsType": {
                              "repr": "",
                              "kind": "tuple",
                              "tuple": [
                                {
                                  "repr": "",
                                  "kind": "rest",
                                  "rest": {
                                    "repr": "",
                                    "kind": "mapped",
                                    "mappedType": {
                                      "typeParam": {
                                        "name": "K",
                                        "constraint": {
                                          "repr": "",
                                          "kind": "typeOperator",
                                          "typeOperator": {
                                            "operator": "keyof",
                                            "tsType": {
                                              "repr": "T",
                                              "kind": "typeRef",
                                              "typeRef": {
                                                "typeParams": null,
                                                "typeName": "T"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "tsType": {
                                        "repr": "KvKey",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "KvKey"
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "consistency",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7266,
                                  "col": 18,
                                  "byteIndex": 235192
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "KvConsistencyLevel",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "KvConsistencyLevel"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "mapped",
                            "mappedType": {
                              "typeParam": {
                                "name": "K",
                                "constraint": {
                                  "repr": "",
                                  "kind": "typeOperator",
                                  "typeOperator": {
                                    "operator": "keyof",
                                    "tsType": {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    }
                                  }
                                }
                              },
                              "tsType": {
                                "repr": "KvEntryMaybe",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "indexedAccess",
                                      "indexedAccess": {
                                        "readonly": false,
                                        "objType": {
                                          "repr": "T",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "T"
                                          }
                                        },
                                        "indexType": {
                                          "repr": "K",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "K"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "KvEntryMaybe"
                                }
                              }
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "T",
                        "constraint": {
                          "repr": "",
                          "kind": "typeOperator",
                          "typeOperator": {
                            "operator": "readonly",
                            "tsType": {
                              "repr": "",
                              "kind": "array",
                              "array": {
                                "repr": "unknown",
                                "kind": "keyword",
                                "keyword": "unknown"
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7264,
                    "col": 4,
                    "byteIndex": 235082
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Set the value for the given key in the database. If a value already\nexists for the key, it will be overwritten.\n\n```ts\nconst db = await Deno.openKv();\nawait db.set([\"foo\"], \"bar\");\n```\n\nOptionally an `expireIn` option can be specified to set a time-to-live\n(TTL) for the key. The TTL is specified in milliseconds, and the key will\nbe deleted from the database at earliest after the specified number of\nmilliseconds have elapsed. Once the specified duration has passed, the\nkey may still be visible for some additional time. If the `expireIn`\noption is not specified, the key will not expire."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "set",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "KvKey",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvKey"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "expireIn",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7287,
                                  "col": 18,
                                  "byteIndex": 236055
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "number",
                                  "kind": "keyword",
                                  "keyword": "number"
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "KvCommitResult",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvCommitResult"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7284,
                    "col": 4,
                    "byteIndex": 235992
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Delete the value for the given key from the database. If no value exists\nfor the key, this operation is a no-op.\n\n```ts\nconst db = await Deno.openKv();\nawait db.delete([\"foo\"]);\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "delete",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "key",
                        "optional": false,
                        "tsType": {
                          "repr": "KvKey",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvKey"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7299,
                    "col": 4,
                    "byteIndex": 236359
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Retrieve a list of keys in the database. The returned list is an\n{@linkcode Deno.KvListIterator} which can be used to iterate over the\nentries in the database.\n\nEach list operation must specify a selector which is used to specify the\nrange of keys to return. The selector can either be a prefix selector, or\na range selector:\n\n- A prefix selector selects all keys that start with the given prefix of\n  key parts. For example, the selector `[\"users\"]` will select all keys\n  that start with the prefix `[\"users\"]`, such as `[\"users\", \"alice\"]`\n  and `[\"users\", \"bob\"]`. Note that you can not partially match a key\n  part, so the selector `[\"users\", \"a\"]` will not match the key\n  `[\"users\", \"alice\"]`. A prefix selector may specify a `start` key that\n  is used to skip over keys that are lexicographically less than the\n  start key.\n- A range selector selects all keys that are lexicographically between\n  the given start and end keys (including the start, and excluding the\n  end). For example, the selector `[\"users\", \"a\"], [\"users\", \"n\"]` will\n  select all keys that start with the prefix `[\"users\"]` and have a\n  second key part that is lexicographically between `a` and `n`, such as\n  `[\"users\", \"alice\"]`, `[\"users\", \"bob\"]`, and `[\"users\", \"mike\"]`, but\n  not `[\"users\", \"noa\"]` or `[\"users\", \"zoe\"]`.\n\n```ts\nconst db = await Deno.openKv();\nconst entries = db.list({ prefix: [\"users\"] });\nfor await (const entry of entries) {\n  entry.key; // [\"users\", \"alice\"]\n  entry.value; // { name: \"Alice\" }\n  entry.versionstamp; // \"00000000000000010000\"\n}\n```\n\nThe `options` argument can be used to specify additional options for the\nlist operation. See the documentation for {@linkcode Deno.KvListOptions}\nfor more information."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "list",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "selector",
                        "optional": false,
                        "tsType": {
                          "repr": "KvListSelector",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvListSelector"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "KvListOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "KvListOptions"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "KvListIterator",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "KvListIterator"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "T",
                        "default": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7340,
                    "col": 4,
                    "byteIndex": 238396
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Add a value into the database queue to be delivered to the queue\nlistener via {@linkcode Deno.Kv.listenQueue}.\n\n```ts\nconst db = await Deno.openKv();\nawait db.enqueue(\"bar\");\n```\n\nThe `delay` option can be used to specify the delay (in milliseconds)\nof the value delivery. The default delay is 0, which means immediate\ndelivery.\n\n```ts\nconst db = await Deno.openKv();\nawait db.enqueue(\"bar\", { delay: 60000 });\n```\n\nThe `keysIfUndelivered` option can be used to specify the keys to\nbe set if the value is not successfully delivered to the queue\nlistener after several attempts. The values are set to the value of\nthe queued message.\n\nThe `backoffSchedule` option can be used to specify the retry policy for\nfailed message delivery. Each element in the array represents the number of\nmilliseconds to wait before retrying the delivery. For example,\n`[1000, 5000, 10000]` means that a failed delivery will be retried\nat most 3 times, with 1 second, 5 seconds, and 10 seconds delay\nbetween each retry.\n\n```ts\nconst db = await Deno.openKv();\nawait db.enqueue(\"bar\", {\n  keysIfUndelivered: [[\"foo\", \"bar\"]],\n  backoffSchedule: [1000, 5000, 10000],\n});\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "enqueue",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "delay",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7386,
                                  "col": 8,
                                  "byteIndex": 239978
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "number",
                                  "kind": "keyword",
                                  "keyword": "number"
                                },
                                "typeParams": []
                              },
                              {
                                "name": "keysIfUndelivered",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7387,
                                  "col": 8,
                                  "byteIndex": 240002
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "",
                                  "kind": "array",
                                  "array": {
                                    "repr": "KvKey",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "KvKey"
                                    }
                                  }
                                },
                                "typeParams": []
                              },
                              {
                                "name": "backoffSchedule",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7388,
                                  "col": 8,
                                  "byteIndex": 240039
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "",
                                  "kind": "array",
                                  "array": {
                                    "repr": "number",
                                    "kind": "keyword",
                                    "keyword": "number"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "KvCommitResult",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "KvCommitResult"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7383,
                    "col": 4,
                    "byteIndex": 239921
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Listen for queue values to be delivered from the database queue, which\nwere enqueued with {@linkcode Deno.Kv.enqueue}. The provided handler\ncallback is invoked on every dequeued value. A failed callback\ninvocation is automatically retried multiple times until it succeeds\nor until the maximum number of retries is reached.\n\n```ts\nconst db = await Deno.openKv();\ndb.listenQueue(async (msg: unknown) => {\n  await db.set([\"foo\"], msg);\n});\n```"
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "listenQueue",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "handler",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "Promise",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "void",
                                        "kind": "keyword",
                                        "keyword": "void"
                                      }
                                    ],
                                    "typeName": "Promise"
                                  }
                                },
                                {
                                  "repr": "void",
                                  "kind": "keyword",
                                  "keyword": "void"
                                }
                              ]
                            },
                            "params": [
                              {
                                "kind": "identifier",
                                "name": "value",
                                "optional": false,
                                "tsType": {
                                  "repr": "any",
                                  "kind": "keyword",
                                  "keyword": "any"
                                }
                              }
                            ],
                            "typeParams": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7407,
                    "col": 4,
                    "byteIndex": 240693
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Create a new {@linkcode Deno.AtomicOperation} object which can be used to\nperform an atomic transaction on the database. This does not perform any\noperations on the database - the atomic transaction must be committed\nexplicitly using the {@linkcode Deno.AtomicOperation.commit} method once\nall checks and mutations have been added to the operation."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "atomic",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "AtomicOperation",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "AtomicOperation"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7416,
                    "col": 4,
                    "byteIndex": 241173
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Watch for changes to the given keys in the database. The returned stream\nis a {@linkcode ReadableStream} that emits a new value whenever any of\nthe watched keys change their versionstamp. The emitted value is an array\nof {@linkcode Deno.KvEntryMaybe} objects, with the same length and order\nas the `keys` array. If no value exists for a given key, the returned\nentry will have a `null` value and versionstamp.\n\nThe returned stream does not return every single intermediate state of\nthe watched keys, but rather only keeps you up to date with the latest\nstate of the keys. This means that if a key is modified multiple times\nquickly, you may not receive a notification for every single change, but\nrather only the latest state of the key.\n\n```ts\nconst db = await Deno.openKv();\n\nconst stream = db.watch([[\"foo\"], [\"bar\"]]);\nfor await (const entries of stream) {\n  entries[0].key; // [\"foo\"]\n  entries[0].value; // \"bar\"\n  entries[0].versionstamp; // \"00000000000000010000\"\n  entries[1].key; // [\"bar\"]\n  entries[1].value; // null\n  entries[1].versionstamp; // null\n}\n```\n\nThe `options` argument can be used to specify additional options for the\nwatch operation. The `raw` option can be used to specify whether a new\nvalue should be emitted whenever a mutation occurs on any of the watched\nkeys (even if the value of the key does not change, such as deleting a\ndeleted key), or only when entries have observably changed in some way.\nWhen `raw: true` is used, it is possible for the stream to occasionally\nemit values even if no mutations have occurred on any of the watched\nkeys. The default value for this option is `false`."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "watch",
                  "kind": "method",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "keys",
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "typeOperator",
                          "typeOperator": {
                            "operator": "readonly",
                            "tsType": {
                              "repr": "",
                              "kind": "tuple",
                              "tuple": [
                                {
                                  "repr": "",
                                  "kind": "rest",
                                  "rest": {
                                    "repr": "",
                                    "kind": "mapped",
                                    "mappedType": {
                                      "typeParam": {
                                        "name": "K",
                                        "constraint": {
                                          "repr": "",
                                          "kind": "typeOperator",
                                          "typeOperator": {
                                            "operator": "keyof",
                                            "tsType": {
                                              "repr": "T",
                                              "kind": "typeRef",
                                              "typeRef": {
                                                "typeParams": null,
                                                "typeName": "T"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "tsType": {
                                        "repr": "KvKey",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "KvKey"
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "raw",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7457,
                                  "col": 18,
                                  "byteIndex": 243194
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "boolean",
                                  "kind": "keyword",
                                  "keyword": "boolean"
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "ReadableStream",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "",
                            "kind": "mapped",
                            "mappedType": {
                              "typeParam": {
                                "name": "K",
                                "constraint": {
                                  "repr": "",
                                  "kind": "typeOperator",
                                  "typeOperator": {
                                    "operator": "keyof",
                                    "tsType": {
                                      "repr": "T",
                                      "kind": "typeRef",
                                      "typeRef": {
                                        "typeParams": null,
                                        "typeName": "T"
                                      }
                                    }
                                  }
                                }
                              },
                              "tsType": {
                                "repr": "KvEntryMaybe",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "",
                                      "kind": "indexedAccess",
                                      "indexedAccess": {
                                        "readonly": false,
                                        "objType": {
                                          "repr": "T",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "T"
                                          }
                                        },
                                        "indexType": {
                                          "repr": "K",
                                          "kind": "typeRef",
                                          "typeRef": {
                                            "typeParams": null,
                                            "typeName": "K"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "typeName": "KvEntryMaybe"
                                }
                              }
                            }
                          }
                        ],
                        "typeName": "ReadableStream"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": [
                      {
                        "name": "T",
                        "constraint": {
                          "repr": "",
                          "kind": "typeOperator",
                          "typeOperator": {
                            "operator": "readonly",
                            "tsType": {
                              "repr": "",
                              "kind": "array",
                              "array": {
                                "repr": "unknown",
                                "kind": "keyword",
                                "keyword": "unknown"
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7455,
                    "col": 4,
                    "byteIndex": 243086
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Close the database connection. This will prevent any further operations\nfrom being performed on the database, and interrupt any in-flight\noperations immediately."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "close",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7465,
                    "col": 4,
                    "byteIndex": 243478
                  }
                },
                {
                  "jsDoc": {
                    "doc": "Get a symbol that represents the versionstamp of the current atomic\noperation. This symbol can be used as the last part of a key in\n`.set()`, both directly on the `Kv` object and on an `AtomicOperation`\nobject created from this `Kv` instance."
                  },
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "commitVersionstamp",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "symbol",
                      "kind": "keyword",
                      "keyword": "symbol"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7473,
                    "col": 4,
                    "byteIndex": 243785
                  }
                },
                {
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "[Symbol.dispose]",
                  "kind": "method",
                  "functionDef": {
                    "params": [],
                    "returnType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  },
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7475,
                    "col": 4,
                    "byteIndex": 243820
                  }
                }
              ],
              "extends": null,
              "implements": [
                {
                  "repr": "Disposable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Disposable"
                  }
                }
              ],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "KvU64",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 7486,
              "col": 2,
              "byteIndex": 244040
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "Wrapper type for 64-bit unsigned integers for use as values in a\n{@linkcode Deno.Kv}.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Cloud"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "class",
            "classDef": {
              "isAbstract": false,
              "constructors": [
                {
                  "jsDoc": {
                    "doc": "Create a new `KvU64` instance from the given bigint value. If the value\nis signed or greater than 64-bits, an error will be thrown."
                  },
                  "accessibility": null,
                  "name": "constructor",
                  "params": [
                    {
                      "kind": "identifier",
                      "name": "value",
                      "optional": false,
                      "tsType": {
                        "repr": "bigint",
                        "kind": "keyword",
                        "keyword": "bigint"
                      }
                    }
                  ],
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7489,
                    "col": 4,
                    "byteIndex": 244215
                  }
                }
              ],
              "properties": [
                {
                  "jsDoc": {
                    "doc": "The value of this unsigned 64-bit integer, represented as a bigint."
                  },
                  "tsType": {
                    "repr": "bigint",
                    "kind": "keyword",
                    "keyword": "bigint"
                  },
                  "readonly": true,
                  "accessibility": null,
                  "optional": false,
                  "isAbstract": false,
                  "isStatic": false,
                  "name": "value",
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7491,
                    "col": 4,
                    "byteIndex": 244326
                  }
                }
              ],
              "indexSignatures": [],
              "methods": [],
              "extends": null,
              "implements": [],
              "typeParams": [],
              "superTypeParams": []
            }
          },
          {
            "name": "jupyter",
            "isDefault": false,
            "location": {
              "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
              "line": 7502,
              "col": 2,
              "byteIndex": 244574
            },
            "declarationKind": "export",
            "jsDoc": {
              "doc": "A namespace containing runtime APIs available in Jupyter notebooks.\n\nWhen accessed outside of Jupyter notebook context an error will be thrown.\n",
              "tags": [
                {
                  "kind": "category",
                  "doc": "Jupyter"
                },
                {
                  "kind": "experimental"
                }
              ]
            },
            "kind": "namespace",
            "namespaceDef": {
              "elements": [
                {
                  "name": "DisplayOptions",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7507,
                    "col": 4,
                    "byteIndex": 244667
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "interface",
                  "interfaceDef": {
                    "extends": [],
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "raw",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7508,
                          "col": 6,
                          "byteIndex": 244707
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "update",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7509,
                          "col": 6,
                          "byteIndex": 244728
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "display_id",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7510,
                          "col": 6,
                          "byteIndex": 244752
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": [],
                    "typeParams": []
                  }
                },
                {
                  "name": "VegaObject",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7517,
                    "col": 4,
                    "byteIndex": 244846
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "interface",
                  "interfaceDef": {
                    "extends": [],
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "$schema",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7518,
                          "col": 6,
                          "byteIndex": 244882
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": [
                      {
                        "readonly": false,
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "key",
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          }
                        ],
                        "tsType": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        },
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7519,
                          "col": 6,
                          "byteIndex": 244905
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                {
                  "name": "MediaBundle",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7528,
                    "col": 4,
                    "byteIndex": 245086
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "A collection of supported media types and data for Jupyter frontends.\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "interface",
                  "interfaceDef": {
                    "extends": [],
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "text/plain",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7529,
                          "col": 6,
                          "byteIndex": 245123
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "text/html",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7530,
                          "col": 6,
                          "byteIndex": 245152
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "image/svg+xml",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7531,
                          "col": 6,
                          "byteIndex": 245180
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "text/markdown",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7532,
                          "col": 6,
                          "byteIndex": 245212
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "application/javascript",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7533,
                          "col": 6,
                          "byteIndex": 245244
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "image/png",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7538,
                          "col": 6,
                          "byteIndex": 245487
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "image/jpeg",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7539,
                          "col": 6,
                          "byteIndex": 245549
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "image/gif",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7540,
                          "col": 6,
                          "byteIndex": 245612
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "application/pdf",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7541,
                          "col": 6,
                          "byteIndex": 245674
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "application/json",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7544,
                          "col": 6,
                          "byteIndex": 245848
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "object",
                          "kind": "keyword",
                          "keyword": "object"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "application/geo+json",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7545,
                          "col": 6,
                          "byteIndex": 245883
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "object",
                          "kind": "keyword",
                          "keyword": "object"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "application/vdom.v1+json",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7546,
                          "col": 6,
                          "byteIndex": 245922
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "object",
                          "kind": "keyword",
                          "keyword": "object"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "application/vnd.plotly.v1+json",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7547,
                          "col": 6,
                          "byteIndex": 245965
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "object",
                          "kind": "keyword",
                          "keyword": "object"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "application/vnd.vega.v5+json",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7548,
                          "col": 6,
                          "byteIndex": 246014
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "VegaObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "VegaObject"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "application/vnd.vegalite.v4+json",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7549,
                          "col": 6,
                          "byteIndex": 246065
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "VegaObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "VegaObject"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "application/vnd.vegalite.v5+json",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7550,
                          "col": 6,
                          "byteIndex": 246120
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "VegaObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "VegaObject"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": [
                      {
                        "readonly": false,
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "key",
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          }
                        ],
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "object",
                              "kind": "keyword",
                              "keyword": "object"
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        },
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7553,
                          "col": 6,
                          "byteIndex": 246245
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                {
                  "name": "$display",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7560,
                    "col": 17,
                    "byteIndex": 246375
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "variable",
                  "variableDef": {
                    "tsType": {
                      "repr": "",
                      "kind": "typeOperator",
                      "typeOperator": {
                        "operator": "unique",
                        "tsType": {
                          "repr": "symbol",
                          "kind": "keyword",
                          "keyword": "symbol"
                        }
                      }
                    },
                    "kind": "const"
                  }
                },
                {
                  "name": "Displayable",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7566,
                    "col": 4,
                    "byteIndex": 246467
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "interface",
                  "interfaceDef": {
                    "extends": [],
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "$display",
                        "location": {
                          "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                          "line": 7567,
                          "col": 6,
                          "byteIndex": 246504
                        },
                        "params": [],
                        "computed": true,
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "fnOrConstructor",
                          "fnOrConstructor": {
                            "constructor": false,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "MediaBundle",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "MediaBundle"
                                  }
                                },
                                {
                                  "repr": "Promise",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "MediaBundle",
                                        "kind": "typeRef",
                                        "typeRef": {
                                          "typeParams": null,
                                          "typeName": "MediaBundle"
                                        }
                                      }
                                    ],
                                    "typeName": "Promise"
                                  }
                                }
                              ]
                            },
                            "params": [],
                            "typeParams": []
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": [],
                    "typeParams": []
                  }
                },
                {
                  "name": "display",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7580,
                    "col": 4,
                    "byteIndex": 246940
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Display function for Jupyter Deno Kernel.\nMimics the behavior of IPython's `display(obj, raw=True)` function to allow\nasynchronous displaying of objects in Jupyter.\n",
                    "tags": [
                      {
                        "kind": "param",
                        "name": "obj",
                        "doc": "- The object to be displayed"
                      },
                      {
                        "kind": "param",
                        "name": "options",
                        "doc": "- Display options with a default { raw: true }"
                      },
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "function",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "obj",
                        "optional": false,
                        "tsType": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "options",
                        "optional": true,
                        "tsType": {
                          "repr": "DisplayOptions",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "DisplayOptions"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  }
                },
                {
                  "name": "md",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7608,
                    "col": 4,
                    "byteIndex": 247705
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Show Markdown in Jupyter frontends with a tagged template function.\n\nTakes a template string and returns a displayable object for Jupyter frontends.\n",
                    "tags": [
                      {
                        "kind": "example",
                        "doc": "Create a Markdown view.\n\n```typescript\nconst { md } = Deno.jupyter;\nmd`# Notebooks in TypeScript via Deno ![Deno logo](https://github.com/denoland.png?size=32)\n\n* TypeScript ${Deno.version.typescript}\n* V8 ${Deno.version.v8}\n* Deno ${Deno.version.deno}\n\nInteractive compute with Jupyter _built into Deno_!\n`\n```\n"
                      },
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "function",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "strings",
                        "optional": false,
                        "tsType": {
                          "repr": "TemplateStringsArray",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TemplateStringsArray"
                          }
                        }
                      },
                      {
                        "kind": "rest",
                        "arg": {
                          "kind": "identifier",
                          "name": "values",
                          "optional": false,
                          "tsType": null
                        },
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Displayable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Displayable"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  }
                },
                {
                  "name": "html",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7628,
                    "col": 4,
                    "byteIndex": 248205
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Show HTML in Jupyter frontends with a tagged template function.\n\nTakes a template string and returns a displayable object for Jupyter frontends.\n",
                    "tags": [
                      {
                        "kind": "example",
                        "doc": "Create an HTML view.\n```typescript\nconst { html } = Deno.jupyter;\nhtml`<h1>Hello, world!</h1>`\n```\n"
                      },
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "function",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "strings",
                        "optional": false,
                        "tsType": {
                          "repr": "TemplateStringsArray",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TemplateStringsArray"
                          }
                        }
                      },
                      {
                        "kind": "rest",
                        "arg": {
                          "kind": "identifier",
                          "name": "values",
                          "optional": false,
                          "tsType": null
                        },
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Displayable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Displayable"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  }
                },
                {
                  "name": "svg",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7647,
                    "col": 4,
                    "byteIndex": 248736
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "SVG Tagged Template Function.\n\nTakes a template string and returns a displayable object for Jupyter frontends.\n\nExample usage:\n\nsvg`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n     <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n   </svg>`\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "function",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "strings",
                        "optional": false,
                        "tsType": {
                          "repr": "TemplateStringsArray",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TemplateStringsArray"
                          }
                        }
                      },
                      {
                        "kind": "rest",
                        "arg": {
                          "kind": "identifier",
                          "name": "values",
                          "optional": false,
                          "tsType": null
                        },
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Displayable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Displayable"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  }
                },
                {
                  "name": "format",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7661,
                    "col": 4,
                    "byteIndex": 249053
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Format an object for displaying in Deno\n",
                    "tags": [
                      {
                        "kind": "param",
                        "name": "obj",
                        "doc": "- The object to be displayed"
                      },
                      {
                        "kind": "return",
                        "doc": "Promise<MediaBundle>\n"
                      },
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "function",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "obj",
                        "optional": false,
                        "tsType": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "MediaBundle",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "MediaBundle"
                            }
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  }
                },
                {
                  "name": "broadcast",
                  "isDefault": false,
                  "location": {
                    "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                    "line": 7685,
                    "col": 4,
                    "byteIndex": 249727
                  },
                  "declarationKind": "export",
                  "jsDoc": {
                    "doc": "Broadcast a message on IO pub channel.\n\n```\nawait Deno.jupyter.broadcast(\"display_data\", {\n  data: { \"text/html\": \"<b>Processing.</b>\" },\n  metadata: {},\n  transient: { display_id: \"progress\" }\n});\n\nawait new Promise((resolve) => setTimeout(resolve, 500));\n\nawait Deno.jupyter.broadcast(\"update_display_data\", {\n  data: { \"text/html\": \"<b>Processing..</b>\" },\n  metadata: {},\n  transient: { display_id: \"progress\" }\n});\n```\n",
                    "tags": [
                      {
                        "kind": "category",
                        "doc": "Jupyter"
                      },
                      {
                        "kind": "experimental"
                      }
                    ]
                  },
                  "kind": "function",
                  "functionDef": {
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "msgType",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "content",
                        "optional": false,
                        "tsType": {
                          "repr": "Record",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "unknown",
                                "kind": "keyword",
                                "keyword": "unknown"
                              }
                            ],
                            "typeName": "Record"
                          }
                        }
                      },
                      {
                        "kind": "identifier",
                        "name": "extra",
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "metadata",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7689,
                                  "col": 8,
                                  "byteIndex": 249841
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "Record",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      },
                                      {
                                        "repr": "unknown",
                                        "kind": "keyword",
                                        "keyword": "unknown"
                                      }
                                    ],
                                    "typeName": "Record"
                                  }
                                },
                                "typeParams": []
                              },
                              {
                                "name": "buffers",
                                "location": {
                                  "filename": "file:///Users/phil/projects/Deno/docs/reference_gen/types/deno.d.ts",
                                  "line": 7690,
                                  "col": 8,
                                  "byteIndex": 249885
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "",
                                  "kind": "array",
                                  "array": {
                                    "repr": "Uint8Array",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Uint8Array"
                                    }
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "Promise",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "void",
                            "kind": "keyword",
                            "keyword": "void"
                          }
                        ],
                        "typeName": "Promise"
                      }
                    },
                    "isAsync": false,
                    "isGenerator": false,
                    "typeParams": []
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
}
